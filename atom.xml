<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[(think)]]></title>
  <link href="http://bbatsov.github.com/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2012-12-09T13:25:49+02:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[From Linux to OSX: Meet Your New Apps]]></title>
    <link href="http://bbatsov.github.com/articles/2012/12/09/from-linux-to-osx-meet-your-new-apps/"/>
    <updated>2012-12-09T11:41:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/12/09/from-linux-to-osx-meet-your-new-apps</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>It&#8217;s time I resume what I started in
<a href="http://batsov.com/articles/2012/09/09/from-linux-to-osx-1-year-later/">my previous article documenting my first year as an OSX user</a>
a few months ago.</p>

<p>In this article I&#8217;ll focus primarily on the applications I&#8217;ve adopted
during my short time being a Mac OSX user, after being a GNU/Linux
user for quite some time before that. The focus of the article will be
mostly desktop applications, since the command-line tools are more or
less the same in both operating system. I will mention a couple of OSX
specific command-line tools near the end of the article though.</p>

<!--more-->


<h2>Productivity</h2>

<h3>Office Suite</h3>

<p>On Linux I was mostly using LibreOffice (chiefly its Impress
module) and while it did get the job done I wasn&#8217;t particularly
fond of it. At some point I was so frustrated with LibreOffice, that I
started running Microsoft Office with
<a href="http://www.codeweavers.com/products/">CodeWeavers CrossOver for Linux</a>. If
you like LibreOffice - it&#8217;s available on OSX as well. If you don&#8217;t
like it - you have some solid alternative available.</p>

<p>First, there is a native port of Microsoft Office for OSX. It&#8217;s a far
cry from the Windows version of the app, but it does have a few
advantages over LibreOffice. If you&#8217;re doing a lot of document
authoring and editing it might be a good option for you.</p>

<p>The other office suite you might want to explore is Apple&#8217;s own
<strong>iWorks</strong>. It has a few distinct advantages over Microsoft Office -
you can buy only the apps you need (as opposed to the whole suite), it
integrates great with the OS (but that&#8217;s hardly a suprise) and it&#8217;s
much cheaper. I only bought <strong>Pages</strong> (Apple&#8217;s <strong>Word</strong> alternative)
and <strong>Keynote</strong> (<strong>PowerPoint</strong> alternative). Pages is a so-so
application, but Keynote is simply fantastic. I write a lot of
presentations and for the first I actually enjoy the process.</p>

<h3>Instant Messaging</h3>

<h4>Skype</h4>

<p>Skype has a native client for OSX, that&#8217;s much more stable and
featureful than the Linux one.</p>

<h4>Pidgin/Kopete</h4>

<p>OSX Mountain Lion ships with an app similar to Pidgin and Kopete
called <strong>Messages</strong> (and iMessage in older OSX versions). It supports
a plethora of chat protocols, but it kept constantly disconnecting and
crashing for me, so I started looking for an
alternative. <a href="http://adium.im/">Adium</a> is a great free IM app that
supports many protocols and works flawlessly (at least for me), so I&#8217;d
recommend it to everyone.</p>

<h4>IRC</h4>

<p>If you&#8217;re in the market for an XChat replacement look no further than
<a href="http://colloquy.info/">Colloquy</a>. Personally I used Emacs&#8217;s ERC under
Linux and continue to use it under OSX as well.</p>

<h4>Twitter</h4>

<p>Twitter has an official desktop app for OSX, that&#8217;s available for free
in the Mac App store. It has one notable shortcoming - no retina
support. Rumour has it Twitter will kill the app in the future, but it
gets the job done for the time being and there are plenty of
alternatives lying around.</p>

<h3>Browser</h3>

<p>The default OSX browser Safari is great and has some fairly unique
features like pinch to zoom gesture support (smartphone users will
appreciate those). Unfortunately it has a pretty small selection of
plugins and might not be well suited for power users. I recommend the
use of Google Chrome on OSX, since Firefox really seems to lag in terms
of features there (the upcoming Firefox 18 will be the first with
Retina support).</p>

<h3>Email</h3>

<p>OSX&#8217;s default application <strong>Mail</strong> is decent, but nothing
more. Thunderbird is available for OSX, but I personally think it&#8217;s no
better than Mail. My desktop email client of choice is the delightful
<a href="http://www.sparrowmailapp.com/mac.php">Sparrow</a>. It&#8217;s the first
desktop email client I ever liked (I used to check my email with
terminal clients and Emacs afterwards) and has great integration with
GMail (it even supports GMail&#8217;s keyboard shortcuts), Dropbox,
Facebook, etc. While it&#8217;s a doomed product since
<a href="http://www.sparrowmailapp.com/">Google acquired Sparrow</a> I plan to
continue using it in the foreseeable future.</p>

<h3>Keyboard remapping</h3>

<p>By default you cannot remap that many things in OSX. The small utility
<a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a> allows
you to do much crazier remappings and despite its name the tool works
on all recent Macs.</p>

<h3>Virtualization Software</h3>

<p>The go-to desktop virtualization solution favoured by most Linux users
is VirtualBox and it&#8217;s available for OSX as well. VirtualBox gets the
job done, but doesn&#8217;t even come close to
<a href="http://www.parallels.com/">Parallels</a> in terms of performance,
stability and integration with OSX. Parallels support for Windows
guests is particularly good.</p>

<h2>Software Development</h2>

<h3>Text Editing</h3>

<p>Every major text editor has a port for OSX, so things are pretty
much the same here. On OSX you&#8217;ll also get access to
<a href="http://macromates.com/">TextMate</a>. My affection for Emacs is widely
known though. Excellent Emacs builds are available
<a href="http://emacsformacosx.com/">here</a> and the upcoming Emacs 24.3 will
finally feature OSX Lion style full-screen support. If the mention of
Emacs and vim scares you I&#8217;d recommend trying out
<a href="http://www.sublimetext.com/2">Sublime Text 2</a>.</p>

<h3>IDEs</h3>

<p>Eclipse, NetBeans and IntelliJ are available (no suprise since they
are all Java apps) and look and perform great on OSX. There&#8217;s also
Apple&#8217;s own XCode, which I found unwieldy.</p>

<h3>Terminal Emulator</h3>

<p>OSX comes with a pretty barebone terminal emulator called
<strong>Terminal</strong>. I wouldn&#8217;t advice anyone to spent much time with it.</p>

<p>Install <a href="http://www.iterm2.com/#/section/home">iTerm2</a>. It redefines
the meaning of insanely great.</p>

<h3>Shells</h3>

<p>OSX comes with Bash enabled by default, but Zsh is also preinstalled
and you can easily enable it by typing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chsh -s /bin/zsh
</span></code></pre></td></tr></table></div></figure>


<h2>Media</h2>

<h3>Video player</h3>

<p>As in Linux <a href="http://www.videolan.org/vlc/index.html">VLC</a> is the king.</p>

<h3>Audio player</h3>

<p>iTunes fits the bill for a basic music player. I still haven&#8217;t found an
OSX app which I like as much as Linux&#8217;s Amarok and Exaile.</p>

<h3>UPnP server</h3>

<p>Under Linux I used to use MediaTomb and it performed great. It&#8217;s
available for OSX as well, but was causing a lot of problems for me,
so I finally decided to go with a commercial solution. I heartily
recommend <a href="http://www.yazsoft.com/products/playback/">Playback</a>. Of
course if your media player supports NFS you should go with it instead
of UPnP.</p>

<h2>File Transfer</h2>

<h3>FTP</h3>

<p><a href="http://filezilla-project.org/download.php?type=client">Filezilla</a> is
extremely popular under Linux and has a native OSX version as
well. <a href="http://cyberduck.ch/">Cyberduck</a> seems to be the top choice of
OSX users.</p>

<h3>Bittorrent</h3>

<p>There are plenty of great Bittorrent clients on Linux - Deluge,
KTorrent, Transmission, etc. Transmission is the only with an OSX port
and it seems that it&#8217;s also the only popular OSX torrent client.</p>

<h2>Package Management</h2>

<p>OSX has no official package managent tool but it has plenty of
unofficial ones. Currently
<a href="http://mxcl.github.com/homebrew/">homebrew</a> seems to be the most
popular option. Its package selection is quite vast and I&#8217;ve rarely
experienced problems with it. While regular users are unlikely to use
anything from outside the Mac App store, developers and power users
should definitely check homebrew out.</p>

<h2>Command Line</h2>

<p>Most of the command line applications that you know and love from
Linux are available in OSX (by default or installable via homebrew) as
well (but might be slightly different since Linux ships with GNU&#8217;s
version of many tools and OSX with BSD&#8217;s). Here&#8217;s a few notable OSX
specific commands:</p>

<ul>
<li><code>open</code> - opens a file or directory in the appropriate desktop application</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>open doc.pdf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>pbcopy</code> and <code>pbpaste</code> allow you to interact with OSX&#8217;s clipboard</p></li>
<li><p><code>launchctl</code> is a rough equivalent to the <code>service</code> and <code>chkconfig</code> commands on some Linux distros</p></li>
<li><p><code>fs_usage</code> allows you to monitor your filesystem usage statistics</p></li>
<li><p><code>system_profiler</code> gives you information about your hardware configuration (kind of like <code>lshw</code>)</p></li>
</ul>


<h2>Epilogue</h2>

<p>This was a whirlwind tour of so many apps. I hope that my superficial
treatment of many of them won&#8217;t stop you from trying them out. It
seems to me that the app selection catalogue on OSX is not as vast as
the one on Linux, but there&#8217;s also a tendency that established OSX
apps are much more polished and reliable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing with SSL certificate validation errors in Rails]]></title>
    <link href="http://bbatsov.github.com/articles/2012/12/06/dealing-with-ssl-certificate-validation-errors-in-rails/"/>
    <updated>2012-12-06T17:07:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/12/06/dealing-with-ssl-certificate-validation-errors-in-rails</id>
    <content type="html"><![CDATA[<p>I often see this question asked - &#8220;I&#8217;m getting the following error</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>OpenSSL::SSL::SSLError: hostname was not match with the server certificate</span></code></pre></td></tr></table></div></figure>


<p>when trying to deliver an email with Rails 3. How can I solve the problem?&#8221;</p>

<p>Obviously the best solution would be get a valid certificate for your hostname, but sometimes
this is not possible or you simply don&#8217;t want to bother with this stuff (on your development machine for instance).
The solution to the problem commonly suggested is to turn off encryption completely like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">smtp_settings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:address</span>              <span class="o">=&gt;</span> <span class="s1">&#39;mail.foo.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:port</span>                 <span class="o">=&gt;</span> <span class="mi">587</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:domain</span>               <span class="o">=&gt;</span> <span class="s1">&#39;foo.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:user_name</span>            <span class="o">=&gt;</span> <span class="s1">&#39;addy@foo.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:password</span>             <span class="o">=&gt;</span> <span class="s1">&#39;foofoo&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:authentication</span>       <span class="o">=&gt;</span> <span class="s1">&#39;plain&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:enable_starttls_auto</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This bit of code represent a portion of your <code>ActionMailer</code> configuration and you&#8217;d put it in <code>application.rb</code> or
<code>env.rb</code> (where env is something like <code>development</code>, <code>staging</code>, <code>production</code>, etc).</p>

<p>While the solution is OK for <code>development.rb</code> you&#8217;d be crazy to use
this code in production! Disabling encryption means that your username
and password will traverse the Internet in plain text! A simple, but
secure solution would be to just disable the certificate validation,
without sacrificing the secure connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">smtp_settings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:address</span>              <span class="o">=&gt;</span> <span class="s1">&#39;mail.foo.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:port</span>                 <span class="o">=&gt;</span> <span class="mi">587</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:domain</span>               <span class="o">=&gt;</span> <span class="s1">&#39;foo.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:user_name</span>            <span class="o">=&gt;</span> <span class="s1">&#39;addy@foo.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:password</span>             <span class="o">=&gt;</span> <span class="s1">&#39;foofoo&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:authentication</span>       <span class="o">=&gt;</span> <span class="s1">&#39;plain&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:enable_starttls_auto</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:openssl_verify_mode</span>  <span class="o">=&gt;</span> <span class="s1">&#39;none&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code snippet is mostly the same as the one shown before. The crucial difference is the line
<code>:openssl_verify_mode =&gt; 'none'</code>.</p>

<p>I hope someone will find this short article useful. Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #7: Remap Return to Control in OSX]]></title>
    <link href="http://bbatsov.github.com/articles/2012/12/06/emacs-tip-number-7-remap-return-to-control-in-osx/"/>
    <updated>2012-12-06T16:06:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/12/06/emacs-tip-number-7-remap-return-to-control-in-osx</id>
    <content type="html"><![CDATA[<p>One of the major problems when using
<a href="http://batsov.com/articles/2012/10/14/emacs-on-osx/">Emacs on OSX</a> is
not related to OSX itself - the problem has to do with the Mac&#8217;s
hardware. Recent Mac keyboards(both laptop and desktop, with the
exception of the wired full size Mac keyboard) lack a right <code>Control</code>
key and it happens to be extremely important if you&#8217;re looking to
fully leverage the power of Emacs.</p>

<p>The traditional solution to the problem is to use a tool like
<a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a> to remap
the right <code>Option</code> key to right <code>Control</code> and to use a snippet like
this to make <code>Command</code> behave like <code>Meta</code> in Emacs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;meta</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but it&#8217;s hardly ideal since you&#8217;re remapping <code>Option</code> at
fairly low level and you won&#8217;t be able to use it anywhere as <code>Option</code>.</p>

<p>A much better idea would be to leverage a little know capability of
KeyRemap4MacBook (a great program which despite its name works with
desktop Macs as well) and map the <code>Return</code> key to <code>Control</code> only
when it&#8217;s held down (it will behave like a normal Return key in all
other situations). The option you&#8217;ll have to find in KeyRemap4MacBook
is in the <code>Change Return</code> section and it labeled <code>Return to Control_R
(+ When you type Return only, send Return)</code>.</p>

<p>This approach has several advantages.  First and foremost you&#8217;re not
sacrificing a valuable key like <code>Option</code>. Second - it&#8217;s much easier to
hit <code>Return</code> with your right pinky than it is to hit <code>Option</code>
(especially if you&#8217;re using a US layout keyboard - these have long
single row <code>Return</code> keys, compared to the short 2 row Returns found on
European keyboards). Lastly, if you&#8217;ve already remapped <code>CapsLock</code> to
<code>Control</code> (like so many people do) you&#8217;re getting a pretty symmetrical
mapping on the opposite side of your keyboard.</p>

<p>All in all - remapping <code>Return</code> to <code>Control</code> is a huge win if you&#8217;re
using heavily one of Apple&#8217;s smaller keyboards. Of course, if you have
the option to use an external keyboard you&#8217;d do yourself a solid if you
obtained a good full size keyboard like the
<a href="http://batsov.com/articles/2008/06/16/das-keyboard/">Das Keyboard</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #6: Remove variable &amp; function definitions]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions/"/>
    <updated>2012-10-20T20:29:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions</id>
    <content type="html"><![CDATA[<p>From time to time you might want to void (unbind) a variable or a
function definition in Emacs. Most often you&#8217;ll probably be dealing
with variables created with <code>defvar</code> whose values you&#8217;ll want to
update.  The magic functions you need are the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; this will make the symbol my-nasty-variable&#39;s value void</span>
</span><span class='line'><span class="p">(</span><span class="nb">makunbound</span> <span class="ss">&#39;my-nasty-variable</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; this will make the symbol my-nasty-function&#39;s</span>
</span><span class='line'><span class="c1">;; function definition void</span>
</span><span class='line'><span class="p">(</span><span class="nb">fmakunbound</span> <span class="ss">&#39;my-nasty-function</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The names aren&#8217;t exactly intuitive and even I happen to forget them from time to
time. Now at least I&#8217;ll now where to look for them if that happens
again. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs on OSX]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/emacs-on-osx/"/>
    <updated>2012-10-14T22:03:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/emacs-on-osx</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>In this article I&#8217;ll share with you a few tips and tricks about
running Emacs under the Max OSX operating system.</p>

<h2>Installation</h2>

<p>While Emacs is available for installation from
<a href="http://wikemacs.org/wiki/Installing_Emacs_on_OS_X">various sources</a>
I personally recommend you to use the
<a href="http://wikemacs.org/wiki/Installing_Emacs_on_OS_X">Emacs for Mac OSX binary distribution</a>.</p>

<p>Installation via Homebrew is also a decent option, although it more time consuming.</p>

<p>After the installation you might want to wipe out the ancient Emacs 22
that ships with OSX by default(its presence will only cause headaches, trust me):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rm /usr/bin/emacs
</span><span class='line'><span class="nv">$ </span>sudo rm -rf /usr/share/emacs
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind that the OSX updates will (unfortunately) bring Emacs 22 back from the dead, so
you might consider altering your <code>PATH</code> instead.</p>

<p>Alternatively you can just create an alias in your shell and when you
invoke <code>emacs</code> it will run the newly installed version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/Applications/Emacs.app/Contents/MacOS/Emacs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you installed via Homebrew that path might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/usr/local/Cellar/emacs/24.2/Emacs.app/Contents/MacOS/Emacs -nw&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make it permanent, if using bash, add that line to
<code>~/.bash_profile</code>. zsh users will want to update <code>~/.zshrc</code> instead.</p>

<h2>Full-screen support</h2>

<p>The Homebrew Emacs formula includes a patch providing the <code>M-x
ns-toggle-fullscreen</code> command for switching between normal and
full-screen modes. It works well, but does not provide the typical OS
X Lion full-screen app experience. In particular, it remains on the
desktop, obscuring non-full-screen applications, rather than moving to
its own space. For OSX Lion style fullscreen support have a look at
this
<a href="http://sourcematters.org/2012/04/10/full-screen-emacs-24-for-os-x-lion.html">article</a>.</p>

<p>Another option that you might want to explore is
the <a href="http://osxdaily.com/2011/07/22/enable-full-screen-support-all-apps-os-x-lion-maximizer/">maximizer</a>
utility that brings full-screen support for all Cocoa apps under Lion.</p>

<h2>Keybindings</h2>

<p>I heartily recommend you to remap your <em>Caps Lock</em> key to <em>Control</em>. This
can be easily done via <em>Preferences -> Keyboard -> Modifier Keys</em>. If
you&#8217;re using a laptop keyboard or the bluetooth keyboard you&#8217;ll
definitely want to remap your right Option key to Control as
well. No one can use effectively Emacs without a right Control
key. Remapping it is a bit more involved and requires the use of the
third-party utility
<a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a>.</p>

<p>On a regular Mac keyboard you&#8217;ll probably want to map Command to Meta
and Option to Super. On an external Windows keyboard you&#8217;ll want to
map Command to Super and Option to Meta (on Windows keyboard the
Command and Option keys are swapped). Add this to your <code>init.el</code> (or
<code>.emacs</code>) file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">mac-option-modifier</span> <span class="ss">&#39;meta</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you often switch between your laptop keyboard and an external
Windows keyboard (like me) you might want to define this helper
command and bind it to some key combo (<code>C-c w</code> in the example):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">swap-meta-and-super</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Swap the mapping of meta and super. Very useful for people using their Mac</span>
</span><span class='line'><span class="s">with a Windows external keyboard from time to time.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>        <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;meta</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-option-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Command is now bound to META and Option is bound to SUPER.&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>      <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-option-modifier</span> <span class="ss">&#39;meta</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Command is now bound to SUPER and Option is bound to META.&quot;</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c w&quot;</span><span class="p">)</span> <span class="ss">&#39;swap-meta-and-super</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setting the PATH variable</h2>

<p>Long story short - if you&#8217;re running Emacs from Spotlight (or any
other launcher for that matter) your <code>PATH</code> and <code>exec-path</code> variables
won&#8217;t be same as the ones in your shell (and that&#8217;s every nasty since
you want be able to run some external programs from Emacs). The best
way to handle this would be installing the package
<a href="https://github.com/purcell/exec-path-from-shell">exec-path-from-shell</a>
by Steve Purcell.</p>

<h2>Flyspell</h2>

<p>For flyspell to work correctly you&#8217;ll need to install aspell plus a few dictionaries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install aspell --lang<span class="o">=</span>en
</span></code></pre></td></tr></table></div></figure>


<h2>More goodies</h2>

<p>If you want to spare yourself part of the headache of configuring
Emacs on OSX and get a lot of extra firepower you might want to install
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> - an enhanced
Emacs 24.x configuration (developed by yours truly) that should make
your experience with Emacs both more pleasant and more powerful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tip #1: Use Pry Instead of irb for the Rails Console]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/rails-tip-number-1-use-pry-instead-of-irb-for-the-rails-console/"/>
    <updated>2012-10-14T18:06:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/rails-tip-number-1-use-pry-instead-of-irb-for-the-rails-console</id>
    <content type="html"><![CDATA[<p>This tip is going to be a really short one. Hopefully by now you&#8217;ve
heard about <a href="http://pryrepl.org/">pry</a> - a fantastic <code>irb</code>
replacement, that somewhat reminds me of the mighty Lisp REPLs. What
you might not know is how to hook it into Rails so that the <code>rails
console</code> (a.k.a. <code>rails c</code>) command would fire a pry shell instead of
an irb one. There are several ways to do so, but I find one
particularly straightforward - the awesome little gem
<a href="https://github.com/rweng/pry-rails">pry-rails</a>.</p>

<p>So what are you waiting for? Go ahead, install the little sucker and
enjoy your new pry-powered Rails console.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tip #3: Matching on an Object's Class in a Case Expression]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/ruby-tip-number-3-matching-on-an-objects-class-in-a-case-expression/"/>
    <updated>2012-10-14T15:23:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/ruby-tip-number-3-matching-on-an-objects-class-in-a-case-expression</id>
    <content type="html"><![CDATA[<p>From time to time you might want to take different actions depending
on an object&#8217;s class. One handy way to do so is with a <code>case</code>
expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">object</span>
</span><span class='line'><span class="k">when</span> <span class="no">Fixnum</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is an integer number&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="nb">String</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a string&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="no">Hash</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a hash&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Behind the scenes this is transformed to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Fixnum</span> <span class="o">===</span> <span class="n">object</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Object is an integer number&#39;</span>
</span><span class='line'><span class="k">elsif</span> <span class="nb">String</span> <span class="o">===</span> <span class="n">object</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Object is a string&#39;</span>
</span><span class='line'><span class="k">elsif</span> <span class="no">Hash</span> <span class="o">===</span> <span class="n">object</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Object is a hash&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of people seem to make the following mistake, so beware:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># WRONG - Class === Class will return false</span>
</span><span class='line'><span class="k">case</span> <span class="n">object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="k">when</span> <span class="no">Fixnum</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is an integer number&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="nb">String</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a string&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="no">Hash</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a hash&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully you&#8217;ll find this small tip useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up fallback locale(s) in Rails 3]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/12/setting-up-fallback-locale-s-in-rails-3/"/>
    <updated>2012-09-12T14:56:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/12/setting-up-fallback-locale-s-in-rails-3</id>
    <content type="html"><![CDATA[<p>I18n(internationalization) and l10n(localization) are topics that are
covered superbly by the
<a href="http://guides.rubyonrails.org/i18n.html">Rails Guides</a>. The one thing
that&#8217;s left out is the setup of fallback locales in case something is
missing in the currently selected locale (and mark my words -
something probably is). Therefore I&#8217;m writing this
post.</p>

<p>Ideally we&#8217;d have i18n-ed and localized everything perfectly, but
that&#8217;s rarely the case. I&#8217;d rather have the users see things from
another locale than error messages. So how do we do that in Rails 3?
It&#8217;s pretty simple actually. There are three fallback options we can
select and they all require small changes to the <code>application.rb</code> file.</p>

<ul>
<li>fallback to the default locale</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># fallback to what&#39;s specified in config.i18n.default_locale</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>fallback to a specified locale</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># fallback to en, regardless of what&#39;s in config.i18n.default_locale</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:en</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>specify a fallback map (different fallback locales for different
locales)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># missing translations of es and fr languages will fallback to english</span>
</span><span class='line'><span class="c1"># missing translations in german will fallback to french</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;es&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">,</span> <span class="s1">&#39;fr&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;fr&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that&#8217;s the gist of it. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Linux to OSX - 1 Year Later]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/from-linux-to-osx-1-year-later/"/>
    <updated>2012-09-09T22:11:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/from-linux-to-osx-1-year-later</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>A little more than an year ago I wrote my rant post
<a href="http://batsov.com/articles/2011/06/11/linux-desktop-experience-killing-linux-on-the-desktop/">The Linux Desktop Experience is Killing Linux on the Desktop</a>
and for the first time in 8 years I wasn&#8217;t a desktop Linux user
anymore. I spent about a month wrestling with Windows 7, but let&#8217;s
face it - Windows is ill suited for professional Ruby programmers like
me (and it&#8217;s ill suited for most programmers, except maybe Java &amp; .Net I
guess).</p>

<p>Anyways, it was never my intention to stick with Windows - I was just
doing my Mac due diligence. Now with 1+ year of OSX usage I&#8217;d
like to share a few things about my experience thus far with you.</p>

<!--more-->


<h2>From Linux to OSX</h2>

<p>The transition was initially painful - I felt very odd dragging app
icons to the <code>Applications</code> folder to install them. To be honest I was
quite puzzled what was I supposed to do the first time I had to
install an app this way (it didn&#8217;t have those helpful hints with the arrows most apps
do). The Linux distro package management is definitely infinitely
better, or at least it seems so from where I&#8217;m standing. Luckily for me most of the
tools I use are available from the third-party <a href="http://mxcl.github.com/homebrew/">homebrew</a> package
manager for OSX. It&#8217;s like an extremely basic version of the mighty
Gentoo <code>portage</code>, but it generally gets the job done.</p>

<p>On a more positive note - I was impressed with the quality and
responsiveness of the OSX desktop and the fact that Emacs keybindings
are used by default in its editor toolkit (and strangely puzzled by
the lack of right control key - how is one supposed to hit <code>Control +
a</code> I dare ask?). One app in particular - <code>spotlight</code>, blew me off the
water, especially after having dealt on Linux with crappy clones like
<code>beagle</code> in the past. Spotlight can truly find just about anything,
was it&#8217;s own SQL-like query language and is <strong>blazingly</strong> fast.</p>

<p>I quickly found a good terminal emulator (that would be
<a href="http://www.iterm2.com/#/section/home">iterm2</a> - it&#8217;s actually the
best terminal emulator in the world IMHO) and
most of the command-line apps I used from day to day were already lying around
(after all OSX <strong>is</strong> Unix) - to my great surprise even stuff like PostgreSQL
(only on OSX Server) and <code>zsh</code> came preinstalled. Most of the other
apps I really needed had native OSX ports; the others - worthy
alternatives.</p>

<p>Having hated OpenOffice.org for many years I was very pleasantly
surprised by quality of apps like <code>Keynote</code> &amp; <code>Words</code>.</p>

<p>Being a keyboard chap preaching in the church of <code>Das Keyboard</code> I was
a bit underwhelmed by the whole multi-touch mumbo-jumbo at first, but
after a while I came to the conclusion that Apple have the only
trackpads and mice that are actually worth using (even though I still
like using the keyboard way more).</p>

<p>To sum it all up - I got up to speed fairly quickly, but it was a
bumpy ride.</p>

<p>Here&#8217;s a bit more details&#8230;</p>

<h2>The things I love about OSX</h2>

<h3>The Desktop</h3>

<p>It&#8217;s pretty, it&#8217;s quick, it&#8217;s stable. It makes KDE4 and GNOME3 look
like school projects in comparison. And did I mention that the fonts
on OSX are even prettier than the ones in Windows?</p>

<h3>The OSX flavored apps</h3>

<p><a href="http://sparrowapp.com/">Sparrow</a> is the first desktop mail client I ever liked (shame on
you Google for killing it).</p>

<p>iTerm2 is the ultimate terminal emulator. It alone warrants the
purchase of a Mac.</p>

<p>Keynote is the best presentation program I&#8217;ve come to use thus far.</p>

<p><a href="http://www.parallels.com/">Parallels Desktop</a> is light years ahead of VirtualBox and KVM (as far
as desktop virtualization is concerned).</p>

<p>I could go on a lot like this, but I&#8217;ll stop now.</p>

<p>It&#8217;s obvious that Mac users have developed a taste in extremely
refined software.</p>

<h3>Hardware compatibility</h3>

<p>If something is supposed to work with OSX - it works superbly
out-of-the-box. I&#8217;ve almost forgotten now the days of constant battle
with crappy hardware. Sleep &amp; Wake just work. Battery life is
exceptional (due to very advanced power management capabilities).</p>

<p>Certainly controlling all of the hardware an OS will run on helps a
lot, but we still have to acknowledge Apple&#8217;s achievement.</p>

<h3>Stability</h3>

<p>One year, three Macs - only two or three system crashes. For a
developer that likes to tinker a little bit more than he should -
that&#8217;s impressive.</p>

<p>That having said I had some Linux desktops that used run for more than
half an year without reboots (and the reboots were often caused by
power outages or distro/kernel updates). Linux stability on a (fairly
new) laptop? Well, that&#8217;s a whole different story&#8230;</p>

<h2>The things that are OK</h2>

<h3>The default apps</h3>

<p>The apps bundled with OSX are not bad at all, but they aren&#8217;t
particularly great. Still - Safari is a very good browser, Mail is a
much better desktop client than Evolution/Thunderbird, Calendar is a
good organizer (but a bit buggy when it comes down to Google Calendar
integration), Messages is so-so.</p>

<p>The bottom line is - you can go a long way with the bundled apps, but
they aren&#8217;t exactly perfect. My advice - shop for alternatives (both
open-source and proprietary).</p>

<h3>Mac App Store</h3>

<p>Decent way to distribute proprietary apps, but with all the
restrictions on the app sandboxing there aren&#8217;t many interesting apps
out there. Hopefully it&#8217;ll get better in time. The ability to upgrade
your OSX by purchasing the new version from the App Store is very cool
(for a proprietary OS of course).</p>

<h3>Emacs</h3>

<p>The Cocoa port of Emacs is a bit immature and there are some visual
glitches here and there (try out <code>M-x linum-mode</code> for instance), but
they are forgivable. I&#8217;m also missing the deep integration Emacs had with Linux.
And who the fuck designed all the official Mac keyboards without a
right control key? I finally understood why so many Mac users where on
vim :-)</p>

<p>Btw, remapping the <code>Caps</code> to <code>Control</code> is not the answer. I do it now,
I did it on Linux as well. You simply not supposed to hit Control +
any other key with the same hand. It&#8217;s disruptive to your
typing&#8230; But then again - you should probably do most of your typing
will a full sized keyboard :-)</p>

<h3>Software Development</h3>

<p>OSX doesn&#8217;t nurture software development as much as Linux does, but it
comes pretty close in second place. All the tools you know and love
are available, but their installation &amp; setup is a little bit more
involved on OSX. There is a reason why the screenshots in most
programming books show OSX.</p>

<h3>System administration</h3>

<p>Definitely a step back from Linux. Programs like <code>launchctl</code> (for instance) are not
exactly fun to work with, but they do get the job done. I&#8217;d never use
an OSX box for anything more than a desktop workstation. Setting up a
sensible <code>$PATH</code> is not as trivial as it was on Linux either
(<code>/etc/paths</code> and some plist I forgotten come to mind).</p>

<h2>The things I hate</h2>

<h3>The special keys</h3>

<p>Not exactly an OSX feature, but still&#8230;</p>

<p>One year and I still hate <code>Command</code> and <code>Option</code> - option is basically <code>Alt</code>
on a strange location and Command is totally useless IMHO. I&#8217;d
probably wouldn&#8217;t have hated them as much if there were room left on
the Apple keyboards (expect of course the old wired Apple keyboard) for an addition control key. Luckily for me I use an
external
<a href="http://batsov.com/articles/2008/06/16/das-keyboard/">Das Keyboard Ultimate</a>
most of the time&#8230;</p>

<p>Command and Option do have some value, I&#8217;d probably would have
appreciated it if they didn&#8217;t come at the cost of my beloved right
control (which I guess only Emacs users are missing anyways).</p>

<h3>No standard all mighty package manager</h3>

<p>On Linux I had <code>aptitude</code>, <code>yum</code>, <code>portage</code> and <code>pacman</code> - all amazing at what
they do. On OSX - <code>homebrew</code> is a decent option, but it&#8217;s a far cry from
the might and magic of the Linux package managers. Still, <code>homebrew</code>
is better than it&#8217;s alternative, so beware!</p>

<h3>Ugly XML config files</h3>

<p>Here and there in OSX you have to write some appalling <a href="http://en.wikipedia.org/wiki/Property_list">XML config
files</a>. I thought I&#8217;d never see the likes of those again after I put
Java development behind me :-)</p>

<h3>XCode</h3>

<p>You need to install a giant lame IDE just to get a bunch of command
line development tools? That&#8217;s one of the most annoying things I&#8217;ve
encountered up-to-date in OSX.</p>

<p>Yep, I know about the tools being available
<a href="http://kennethreitz.com/xcode-gcc-and-homebrew.html">separately</a> for
couple of months now, but requesting an Apple developer registration
just to get them seems a bit to much to me.</p>

<h2>Epilogue</h2>

<p>Am I happier now without Linux? Definitely! Is OSX a better OS than
Linux? Absolutely not! It does have a <strong>much</strong> better desktop
experience and since I spend most of the time on a computer
interacting with the desktop - that&#8217;s a big win for me. Of course I
wouldn&#8217;t mind seeing Linux achieve this level of desktop maturity and
stability.</p>

<p>Should you dump Linux and join me in <strong>darkness</strong>? How the hell should
I know? :-) I&#8217;m just sharing my two cents - if you&#8217;re happy using
Linux you should <strong>definitely</strong> stick with it. Obviously I wasn&#8217;t and
there weren&#8217;t that many alternatives lying around.</p>

<p>Not having to deal with hardware problems and immature desktop apps is
like a breath of fresh air and it more than compensates for the few
shortcomings of OSX. Nothing compensates the lack of that right
control key on most keyboards, but after all that&#8217;s not an OS problem
;-)</p>

<p>There is great vibrant hacker community gathered around OSX and it&#8217;s
one of the main driving forces of the OS. There is unfortunately a lot
of corporate pressure from Apple as well, but as you already know by
now - there are never perfect things, there are always
compromises. I&#8217;d rather use a proprietary OS that stays out of my way,
than a free OS into which I bump at every turn.</p>

<p>Soon I&#8217;ll blog a little bit more about the practical aspects and
implication of the migration. Cheers, mates!</p>

<p><strong>P.S. I&#8217;ve updated the original post a bit to reflect some of the
initial feedback I received.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[guru-mode]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/guru-mode/"/>
    <updated>2012-09-09T21:17:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/guru-mode</id>
    <content type="html"><![CDATA[<p>Getting started with Emacs is hard. That&#8217;s a fact of life and you
shouldn&#8217;t believe anyone telling you otherwise.</p>

<p>One of the harder parts of the journey to Emacs mastery is remembering
all those keybindings at the beginning (<code>C-h t</code>), which can be really
overwhelming. To make matters worse for many common commands there are
two sets of keybindings - the Emacs ones (that are touch typing
friendly) and the popular ones (that typically involve the use of the
arrow keys). Most people never get to use the <em>proper</em> keybindings and
forever make use of the arrow keys.</p>

<p>To help Emacs newcomers get used to the proper Emacs keybindings I&#8217;ve
created <a href="http://github.com/bbatsov/guru-mode">guru-mode</a> - a simple
minor mode that will show you a (helpful) message in the minibuffer
every time you try to use a <em>non Emacs way</em> keybinding.</p>

<p><img src="http://bbatsov.github.com/images/articles/guru-mode.png"></p>

<p>It will probably annoy you <strong>a lot</strong> in the beginning, but trust me -
it&#8217;ll be worth it in the long run.</p>

<p><code>guru-mode</code> comes bundled with
<a href="http://github.com/bbatsov/prelude">Emacs Prelude</a> and is available
for installation from <a href="http://marmalade-repo.org">Marmalade</a> and <a href="http://melpa.milkbox.net">MELPA</a>.</p>

<p>P.S. True Emacs mastery cannot be achieved if you do not practice
touch typing; if you&#8217;re doing hunt-and-peck typing you&#8217;d better fire up the
venerable <code>gtypist</code> before looking at <code>guru-mode</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Support for the Slim Template Language]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/emacs-support-for-the-slim-template-language/"/>
    <updated>2012-09-09T20:16:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/emacs-support-for-the-slim-template-language</id>
    <content type="html"><![CDATA[<p>I&#8217;m mostly a Ruby on Rails developer these days and as such I&#8217;m pretty
fond of the <a href="http://slim-lang.com">Slim template language</a>. I&#8217;ve
always hated HTML + ERB, since that evil duo encourages all sorts of
ever practices and recently I&#8217;ve adopted Slim as a replacement for
my long time favourite ERB alternative - <a href="http://haml-lang.com">Haml</a>.</p>

<p>I won&#8217;t discuss here the shortcomings of Haml vs Slim, but I&#8217;ll share
with you the big advantage Haml has over Slim (for Emacs users at
least) - it has a pretty nice major editing mode for Emacs. Slim&#8217;s
Emacs support on the other hand is rather iffy and is presently mostly
based on <code>haml-mode</code>. That will hopefully change soon, since recently
I&#8217;ve become a co-maintainer of
<a href="http://github.com/minad/emacs-slim">slim-mode</a> and I plan to improve
it as much as I can (currently I&#8217;m mostly working on precise
font-locking). Any help from interested parties is, naturally, most
welcome. I very much doubt that me and
<a href="https://github.com/minad">Daniel Mendler</a> are the only two people
dreaming of great Slim experience in Emacs. :-)</p>

<p><img src="http://bbatsov.github.com/images/articles/slim-mode.png"></p>

<p>Let us together eliminate that big Haml advantage. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Long Time, No See]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/long-time-no-see/"/>
    <updated>2012-09-09T19:50:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/long-time-no-see</id>
    <content type="html"><![CDATA[<p>It&#8217;s been quite a while since my last blog post. And there hasn&#8217;t been that
much action on the open-source projects I happen to maintain
either. The reason for this is quite simple - recently I&#8217;ve joined the
ranks of the social trading start-up <a href="http://tradeo.com">Tradeo</a> and
things have been crazy at work ever since.</p>

<p>While this is without a doubt my coolest job to date, it&#8217;s also the
most demanding. Anyways - just wanted to let you know I&#8217;m doing OK and
I plan to resume my usual blogging and open-source coding duties soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A True Emacs Knight]]></title>
    <link href="http://bbatsov.github.com/articles/2012/05/28/a-true-emacs-knight/"/>
    <updated>2012-05-28T15:39:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/05/28/a-true-emacs-knight</id>
    <content type="html"><![CDATA[<p>Here&#8217;s one true Emacs Knight (courtesy of my friend Gergana
Stancheva). Feel free to use it wherever you see fit.</p>

<p><img src="http://bbatsov.github.com/images/articles/emacs_knight.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changelog vs API diff]]></title>
    <link href="http://bbatsov.github.com/articles/2012/04/07/changelog-vs-api-diff/"/>
    <updated>2012-04-07T12:22:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/04/07/changelog-vs-api-diff</id>
    <content type="html"><![CDATA[<p><em>This is a guest post from my friend <a href="http://about.me/atodorov">Alexander Todorov</a>
who is a QA guru, software engineer and cloud enthusiast!</em></p>

<p><strong>Software changes fast! Open source software even faster!</strong></p>

<p>And once you start to update dependencies, libraries and frameworks it never ends&#8230;
After all the testing and validation you may have done there is no
guarantee that the software will keep working afterwards.
This is no big deal for small and medium sized projects but becomes a full-time
job for larger projects with longer life span which require constant maintenance
and enhancements. I&#8217;ve seen this time and time again during my work on various projects.
Even a simple <em>Drupal</em> based website pops up an update every couple of weeks.</p>

<p>OTOH back porting fixes and keeping stable APIs can be a big business. This is what
<em>Red Hat</em> is doing for their <em>Red Hat Enterprise Linux</em> distribution. Nearly all changes
are backwards compatible and and the software stack remains stable compared
to upstream <em>Fedora</em> or the more upstream projects which comprise it.</p>

<p>Let me say that I don&#8217;t like to upgrade. Long ago I was using <em>Debian</em> <strong>stable</strong>
on my computer. Now I use <em>RHEL</em>. No fancy features, no bells and
whistles and more important predictable behavior wrt updates and APIs.
The same approach I take when developing software. I stay away from the latest and
greatest technology simply because it changes too often. I prefer mature frameworks and
packages which produce new versions every six months or less frequent.
This approach allows me to concentrate on writing code and getting the project done
instead of plumbing bugs introduced by the latest <em>package foo</em> version.</p>

<p>All this said I have a very careful approach to upgrades, especially if I&#8217;m
using an upstream package. I will first look at the changelog if any. Luckily
many of the mature projects provide comprehensive changelog records. This is
especially true for Perl packages. I&#8217;m looking for notices about backward
incompatible changes, API breakage, security notices, major bug fixes,
changes in behavior and the like.
When changelog is not available there&#8217;s the commit log. I admit this is
not something I usually look at but it happens once in a while. I do this for projects
I&#8217;m particularly interested in or otherwise following.
Doing a content diff is another possibility which usually helps you
spot (if you look carefully) some API changes as well. I resort to this if I&#8217;m not able to find the upstream
source repository or when it is hosted on something ancient like CVS.</p>

<p>Based on all of this I decide to upgrade or not. With careful planning
of updates (which version, which moment of time) and testing I manage to
minimize the hassle of breaking my projects and spending days fixing
bugs afterwards. Instead I use the time to write some code that kicks ass
(or at least I hope so).</p>

<p>I&#8217;m curious to know what sort of information folks do prefer to have
when considering an update? Changelog vs. API diff or seething else?
I personally prefer well written Changelog and full list of fixed bugs.
Please cast your vote in the comments or visit the
<a href="http://www.surveymonkey.com/s/T7YW2MJ">survey</a>! Thank you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MELPA - homebrew (Emacs Edition)]]></title>
    <link href="http://bbatsov.github.com/articles/2012/04/06/melpa-homebrew-emacs-edition/"/>
    <updated>2012-04-06T18:04:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/04/06/melpa-homebrew-emacs-edition</id>
    <content type="html"><![CDATA[<p>A few weeks ago I wrote an
<a href="http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/">article about the state of package management in Emacs</a>. In
that article I pointed out that on the side of <a href="http://wikemacs.org/wiki/Package.el">package.el</a> too much
was riding on the poorly maintained Marmalade repo. Today
Marmalade went dark (again) and many people are wondering what to do
now. The answer is simple - start using <a href="http://melpa.milkbox.net/">MELPA</a> instead.</p>

<p>I was thinking of starting a project similar to Marmalade to alleviate
its problems, but then the MELPA project was brought to my
attention. This project follows the Homebrew (unofficial OSX package
manager) model of using simple GitHub collaboration to maintain and
grow a bunch of build recipes. In the case of MELPA, those recipes
show how to bundle upstream source packages into package.el-compliant
packages. The recipes can be tested locally by package authors, and
they are run hourly on the MELPA server to create an HTTP package
archive that Emacs users can simply add to their <code>'package-archives</code>
list. As <a href="http://technomancy.us">Phil Hagelberg</a> said - there&#8217;s no reason to drag in
complicated dependencies like Node for something that&#8217;s essentially a
pile of static files. MELPA on the other hand is written mostly in
Emacs Lisp and is thus much more comprehensible to casual Emacs hackers.</p>

<p>Most packages currently contained in MELPA are development snapshots,
but the project maintainer
<a href="https://github.com/milkypostman">Donald Curtis</a> and
<a href="http://www.sanityinc.com/">Steve Purcell</a> (aka <code>sanityinc</code>) are
working on extending the MELPA build scripts to support stable
packages, using upstream version tags.</p>

<p>Adding a new package to MELPA is as simple as adding a few lines of
code to the <code>pkglist</code> file in MELPA&#8217;s source code repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">name</span> <span class="ss">:url</span> <span class="s">&quot;&lt;repo url&gt;&quot;</span>
</span><span class='line'> <span class="ss">:fetcher</span> <span class="nv">[git|svn|darcs</span><span class="err">|</span><span class="nv">wiki]</span>
</span><span class='line'> <span class="nv">[:files</span> <span class="p">(</span><span class="s">&quot;&lt;file1&gt;&quot;</span><span class="o">,</span> <span class="o">...</span><span class="p">)</span><span class="nv">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You simply have to fork the <a href="https://github.com/milkypostman/melpa">official repo</a>, modify <code>pkglist</code>, send a pull
request and <code>package.el</code> compatible packages will be built
automatically for you on MELPA&#8217;s server (you can also build the
packages locally to test if everything is OK with your recipes). Sure it&#8217;s not as easy as
submitting a package via a web UI, but it&#8217;s a much more robust
approach. It also eliminates a common problem in Marmalade - there
only the original uploader (+ people selected by him) can update a
package. Often the original uploaders are very hard to find&#8230;</p>

<p>To use MELPA with Emacs 24 (or a recent version of <code>package.el</code>) just
add this to your <code>.emacs</code> (or equivalent):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;package-archives</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;melpa&quot;</span> <span class="o">.</span> <span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a lot more info regarding MELPA on its official website and
I&#8217;d rather not duplicate it here.</p>

<p>I would encourage package authors and users to investigate and
contribute to MELPA. I&#8217;ve already submitted a bunch of packages
there and rebased <a href="http://batsov.com/prelude">Emacs Prelude</a> to
use MELPA instead of Marmalade.</p>

<p>Together we can turn MELPA into the most extensive and robust community-supported
<code>package.el</code> repo! Emacs users deserve one of those :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WikEmacs - The Other Emacs Wiki]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki/"/>
    <updated>2012-03-26T11:23:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki</id>
    <content type="html"><![CDATA[<p>I&#8217;d like to apologize to everyone insulted by my previous
posts. Contrary to popular belief I acknowledge EmacsWiki&#8217;s
contribution to the Emacs community. Obviously many people are too
fond of its current format so I doubt that it will ever change
(considerably). I didn&#8217;t mean to insult anyone, I just wanted to catch
your attention (which unfortunately requires harsher words from time to
time) and point it in the direction of the existing problems.</p>

<p>For the people that weren&#8217;t happy with EmacsWiki - the ones that felt
my pain and were looking for a change I present
<a href="http://wikemacs.org">WikEmacs</a> (pronounced wikimacs). It&#8217;s a
MediaWiki powered Emacs wiki, that will try to bring to the community
cleaner, leaner and more up-to-date documentation.</p>

<p>There are only a few guidelines for the contributors there:</p>

<ul>
<li>articles should be geared only towards the current and future
versions of Emacs (currently 23 and 24) for maintainability&#8217;s sake.</li>
<li>articles should not copy Emacs&#8217;s or extension&#8217;s official
documentation - they should refer to it instead. An overview, some
nice pointers, tips and links - that seems like a good article,
doesn&#8217;t it?</li>
<li>comments and questions should go to an article&#8217;s discussion page</li>
</ul>


<p>File uploads are disabled on WikEmacs (but image file uploads will
probably be allowed soon) - it will never host Emacs extensions of any
sort.</p>

<p>There is a Google discussion group
<a href="https://groups.google.com/forum/?fromgroups#!forum/wikemacs">here</a>
for more general questions regarding the wiki.</p>

<p>Our goal is not to copy over the 8500 articles available at
EmacsWiki. It&#8217;s to provide a good road map for new users coming to
Emacs and enough helpful hints and tips for experienced users. Everyone
is welcome to join our efforts.</p>

<p>As far as short term goals go - have a look at the outlined structure
of the wiki (on its home page), pick a section that interests you and
create/extend/improve it. Our content is licensed with GNU&#8217;s Free
Documentation License (which is compatible with Wikipedia&#8217;s and
probably EmacsWiki&#8217;s GPL2). Some nice blog articles about Emacs might
be converted to wiki articles with permission from their authors. You
might find <a href="http://johnmacfarlane.net/pandoc/try">pandoc</a> useful to
automatically convert articles from other formats to MediaWiki markup
and <a href="https://launchpad.net/mediawiki-el">mediawiki.el</a> to edit
articles on wiki from the comfort of your beloved editor.</p>

<p>Thanks to the people that brought us the original EmacsWiki. Thanks to
everyone who supported the idea for the new wiki. Thanks in advance to
all future contributors.</p>

<p>Some people will undoubtedly see the birth of WikEmacs as a separatist move to fraction
the Emacs community. To them I&#8217;d like to say that few things in life
are as productive as competition. Obviously a lot of people willing to
contribute to a new wiki are unwilling to do so for EmacsWiki and vice
versa. This is not a contest and there will be no winner. I wish the
best of luck to EmacsWiki and its supporters. What I wish for is to give
our community the best source of documentation available and the
option to choose.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Hands on Deck! (or the Action Plan for a new Emacs community wiki)]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/21/all-hands-on-deck-or-the-action-plan-for-a-new-emacs-community-wiki/"/>
    <updated>2012-03-21T11:11:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/21/all-hands-on-deck-or-the-action-plan-for-a-new-emacs-community-wiki</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>Yesterday I wrote a highly
<a href="http://batsov.com/articles/2012/03/20/die-emacswiki/">controversial article about the state of the EmacsWiki</a>
and suggested a few things we can do to make things better. I got the
usual batch of hate mail and some remarks on the poor quality of my
English and writing style (which generally amuse me a lot). But I
got much more encouraging feedback from <strong>a lot</strong> of Emacs community
members. So here our story continues&#8230;</p>

<!--more -->


<h2>On The Essence of Things</h2>

<p>Some people accused me that I don&#8217;t even know what I wiki is. To them
I&#8217;d like to say that a thing is not its dictionary/encyclopedia
definition. A thing is what it&#8217;s perceived to be. People expect wiki
entries to look and behave like those found in MediaWiki or Confluence
and not like some mixture of a wiki, forum and irc conversation&#8230;</p>

<h2>A Word from Our Sponsor</h2>

<p>Alex wrote a
<a href="http://www.emacswiki.org/emacs/2012-03-20">public response on the EmacsWiki</a>
yesterday, that I&#8217;d first like to share (since probably more people
will see it here, than there). I publish it here with no alternations:</p>

<blockquote><p>Bozhidar Batsov is apparently very frustrated with Emacs Wiki. He<br/>seems to think that we should start over – use new software, add<br/>moderators, guidelines, and sorts of fancy stuff. My answer is the<br/>same as it was back in 2008 (http://www.emacswiki.org/emacs/MissionRant).</p><p>One of his ideas I actually agree with. &#8220;Submit documentation only to<br/>the official project pages.&#8221; Absolutely. :)</p><p>Some ideas I am luke warm about: &#8220;package something on Marmalade…&#8221;<br/>Sure, why not? I have never used Marmalade, but I encourage you to<br/>improve the tools you use. There&#8217;s also &#8220;don&#8217;t respond to any bug<br/>requests regarding modified copies of your sources distributed via<br/>EmacsWiki.&#8221; I also don&#8217;t want to encourage bug reports on the<br/>wiki. Use the facilities built into Emacs to report bugs. But almost<br/>all of you know that.</p><p>But other ideas?</p><p>&#8220;Drop the current format of the wiki - use something standard like<br/>MediaWiki instead of OddMuse.&#8221; How is reformatting the pages going to<br/>improve them?</p><p>&#8220;Drop all the articles about Emacs extensions.&#8221; Just delete them? Are<br/>you at least going to rewrite them and move them to the appropriate<br/>project pages out there? Or are you just going to delete them? Taking<br/>away and not giving back?</p><p>&#8220;Drop all the extensions hosted there.&#8221; Some of the old code has no<br/>other home. Some of the old code is here for the poor sods stuck with<br/>Emacs 20. Are you going to package them for ELPA or Marmalade or<br/>whatever you are going to suggest instead?</p><p>Some of you – like Drew Adams – keep their packages on the wiki. For<br/>those packages, I don&#8217;t see any alternative. Are you going to maintain<br/>his software? Fix his bugs? Develop his features? Unless you are, I<br/>guess you can try and fork his stuff and keep it on whatever other<br/>system you want. But please don&#8217;t suggest taking something away<br/>without giving something in return.</p><p>&#8220;Assemble a team of moderators.&#8221; Indeed. Moderators! Where have you<br/>been hiding for the last ten years! Are you volunteering? I&#8217;m a bit<br/>wary regarding your deletionist tendencies. But perhaps you’d like to<br/>start with a new Table of Contents and new top-down menus where only<br/>the pages you personally vetted and checked are listed. That would be<br/>an awesome thing to do! Of course, there’s no need to delete anything<br/>in order for you to do this. Just arrange the stuff you like and do<br/>it.</p><p>In fact, in order to do it, just do it.</p><p>&#8220;Accept only articles about general Emacs usage and Emacs Lisp<br/>programming.&#8221; How is that going to work – more deleting? I don&#8217;t<br/>know&#8230; I don&#8217;t think you understand where the value of Emacs Wiki<br/>comes from. Perhaps you should write a book about Emacs? Collect a<br/>team of authors and editors and deletionists, take a copy of the wiki,<br/>and just do it right.</p><p>Also, less hyperbole when posting&#8230; :P</p><footer><strong>Alex Schroeder</strong> <cite>Creator and Maintainer of EmacsWiki.org</cite></footer></blockquote>


<p>Here&#8217;s my two cents on the letter:</p>

<ul>
<li><p>The markup format hardly matters. A new wiki engine would give us
better structure of the wiki as whole (like separate discussion pages
for one).</p></li>
<li><p>Dropping it from the wiki doesn&#8217;t mean we&#8217;ll delete the code
forever. What I meant was - dump all the extensions to some archive
for the interested parties and remove them from the wiki. You&#8217;re
basically putting words in my mouth.</p></li>
<li><p>We should care for the bad choices some people made (like Drew - all
my respect to his work). With so many free project hosting services I
don&#8217;t feel we&#8217;ll be taking something away and not giving an alternative.</p></li>
<li><p>No, I don&#8217;t volunteer. Not for this format of the wiki. But I do
volunteer for an alternative matching the outline I&#8217;ve suggested.</p></li>
<li><p>Mocking me is not right response, you know. The problem exists, you
fail to acknowledge it, but I don&#8217;t care that much.</p></li>
<li><p>Alex calls it hyperbole, I call it the simple truth (and many others
would second me).</p></li>
</ul>


<h2>The Plan</h2>

<p>Many people commented that my post is not worth a damn if I&#8217;m not
willing to back it with action. I&#8217;m sad to disappoint my critics - but
I&#8217;ll willing to go the whole nine yards on this one. Here&#8217;s the
outline of my proposal for a new wiki:</p>

<ol>
<li><p>Use <a href="http://moinmo.in/">MoinMoin</a> as the wiki engine. It&#8217;s written in Python and
it&#8217;s GPL software. It doesn&#8217;t use a database, it&#8217;s featureful and
mature. It&#8217;s successfully used by Debian and Ubuntu (and many other
respectable software organizations). I&#8217;m against using a Git backed
systems since it will increase the entry bar for user
participation. I&#8217;m even more against the use of a custom platform
developed specially to serve as the EmacsWiki.</p></li>
<li><p>I&#8217;ll pay for the hosting and the new domain and set up the wiki
initially. I&#8217;d suggest that the new project begins with the domain
emacswiki.net or emacswiki.info and eventually we&#8217;ll assume the old
emacswiki.org domain as well (should the new wiki be successful
enough). Suggestions for another name are welcome in the comments
section.</p></li>
<li><p>I and anyone willing to lend a hand will pick the articles worth
saving from the EmacsWiki and migrate them to the new one. I and
anyone willing to serve as moderator will monitor new contributions
afterwards.</p></li>
<li><p>Wiki entries will have a more or less standard structure and will
adhere and community established guidelines.</p></li>
<li><p>The old EmacsWiki will eventually be retired to another domain such
as old.emacswiki.org (or similar) for historic purposes and benefit of
users of old Emacs versions.</p></li>
</ol>


<p>It this good enough for you to call it an action plan? Comments on it
are most welcome!</p>

<h2>Epilogue</h2>

<p>I&#8217;m sorry that I&#8217;m the guy that has to break the terrible news to all of
the delusional EmacsWiki supporters out there - <em>It&#8217;s not
special. It&#8217;s not a beautiful or unique snowflake. It&#8217;s the same
decaying wiki matter like some many else.</em> I&#8217;m sorry for my terrible
English and my lack of good manners. I&#8217;m sorry I&#8217;m willing do to
something while so many of you are just whining and ignoring the
existing problems.</p>

<p>I think as a member of the Emacs community I&#8217;ve shown my worth so far
and I&#8217;ll willing to do even more. But I cannot carry out such a
massive undertaking on my own. I encourage everyone serious about
helping out to comment the article (here, not on reddit or hacker
news) or send me a personal email.</p>

<p><strong>Update</strong></p>

<p>The new wiki is now available at
<a href="http://wikemacs.org">http://wikemacs.org</a>. It&#8217;s using MediaWiki (it
turned out it had several nice advantages over MoinMoin).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Die EmacsWiki, Die!]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/20/die-emacswiki/"/>
    <updated>2012-03-20T14:49:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/20/die-emacswiki</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>Emacs is slowly, but firmly moving in the right direction with
<a href="http://batsov.com/articles/2011/08/19/a-peek-at-emacs24/">Emacs 24</a>. A
lot of new important features are coming, the release date is nearing,
but there is something worrisome on the otherwise bright Emacs
horizon. It&#8217;s a remnant from the <strong>Dark Emacs Days</strong> and it&#8217;s called
<a href="http://emacswiki.org">EmacsWiki</a>.</p>

<p>Shortly put - <em>EmacsWiki is a blight</em>.</p>

<!--more-->


<h2>A Little Bit of Background</h2>

<p>Here&#8217;s the longer story. EmacsWiki was created by
<a href="http://www.emacswiki.org/alex/">Alex Schroeder</a> (aka <strong>kensanata</strong>)
way back (in 2001) with the goal to become the home of all the Emacs
information one would ever need (both about Emacs in general and its
extensions). I have to admit that this was a noble goal and I know that
Alex had all the right intentions, but unfortunately right intentions
rarely are enough for things to always move in the right
direction.</p>

<p>The software behind the wiki is called
<a href="http://www.oddmuse.org/cgi-bin/oddmuse">OddMuse</a> and it&#8217;s authored by
Alex himself. It&#8217;s pretty basic Perl script and doesn&#8217;t feature db
support. Its motto is <em>No MySQL; no PostgreSQL; no worries.</em> - wish it
were true&#8230;</p>

<h2>The Problems</h2>

<p>The EmacsWiki has several epic problems. Here we go:</p>

<h3>Odd Choice for a Wiki</h3>

<p>Even if in the beginning OddMuse might have been a good choice (Alex
authored it and MediaWiki didn&#8217;t exist back then), it hasn&#8217;t been a
good choice for quite a while. There are much better solutions in
terms of markup support (Markdown anyone?), usability and
performance. Some of the features of the wiki are simply abhorring -
like the lack of user access control; anyone can enter any user name and
edit the wiki&#8230; Yep, this is not a joke&#8230;</p>

<h3>Moderators, Where Art Though?</h3>

<p>I&#8217;ve never seen so much junk in a wiki in my entire life (and I&#8217;ve
seen the wikis of 15-year enterprise systems). When I was
an Emacs beginner I often consulted the wiki for advice - even then I
noticed that there were some suspicious practices being suggested
there. Now I can say with certainly that much of the content there is
total bullshit - it&#8217;s mostly written by people with very little
knowledge of Emacs (not to mention good Emacs practices). The articles
are littered with crappy advice confusing beginners, have little
structure and are filled with ridiculous questions (questions in an
wiki???). All of this would have been avoided had the EmacsWiki had a
team of moderators to keep shitty contributions at bay. Alas, such a
team does not exist (or does a very crappy job of it).</p>

<h3>Software Distribution Medium</h3>

<p>As crazy as it seems a lot of people are using the wiki as a software
distribution mechanism. Instead of hosting their projects in version
control (say <a href="http://github.com">GitHub</a>) they develop stuff locally,
upload them to the wiki and say that this is the canonical way to
obtain their software. Needless to say - this is a horrible, horrible
practice. I&#8217;ve often encountered on the wiki source files authored by
someone, then edited by 10 different guys, that have a tendency to add
their names to the copyrights sections instead of thinking how their
poor users will understand what exactly was changed in these
files. Sometimes the authors themselves are to blame (for being
fucking lazy), but often someone just copies a snapshot of a project
from version control and uploads it to the wiki, creating problems of
epic proportions for the maintainers, who start receiving bugs about
stuff they never developed in the first place.</p>

<p>For the love of God - take your project(s) to GitHub and develop them
there with pleasure, under the scrutiny of an active and passionate
developer community. Wikis should be used for documentation only!</p>

<p>Tools like audo-install (an extension that supports installing
software from EmacsWiki) should never have existed. el-get should not
have added support for the installation of stuff from the wiki. As
long as such practices are tolerated they will not stop.</p>

<p>Need I remind you that we&#8217;re now living in the era of
<a href="http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/">package.el</a>
and distributed version control (Git, Mercurial, Bazaar)? Act accordingly!</p>

<h3>Jack of All Trades</h3>

<p>Documenting each and every Emacs project is an impossible task. And it
should not be centralized. Each project should be responsible for
producing its own up-to-date easy-to-follow crystal-clear
documentation. By putting everything in one place you&#8217;re just making
sure you&#8217;ll end up with a pile of out-of-date confusing unstructured
ramblings (the EmacsWiki proves my point).</p>

<p>An EmacsWiki shouldn&#8217;t list tips on the use of external projects -
such tips should be in the project&#8217;s wiki. An EmacsWiki should
document the core Emacs experience and customizations only.</p>

<h2>The Solution</h2>

<p>Kill the EmacsWiki! (may it be reborn from its ashes)</p>

<h3>Action Plan for The Maintainers</h3>

<p>Drop the current format of the wiki - use something standard like
MediaWiki instead of OddMuse. Drop all the articles about Emacs
extensions. Drop all the extensions hosted there. Assemble
a team of moderators. Accept only articles about general Emacs usage
and Emacs Lisp programming.</p>

<h3>Action Plan for Emacs Extensions Authors</h3>

<p>If you&#8217;ve got a normal project hosted on GitHub (or a similar service)
- delete everything about your project on the wiki and don&#8217;t respond
to any bug requests regarding modified copies of your sources
distributed via EmacsWiki.</p>

<p>If you&#8217;ve got a project hosted on the EmacsWiki - there is still
a chance for you to redeem yourself. Migrate your project(s) to GitHub
(you&#8217;ll thank me later for that). Use their version control, their
issue tracker, their wiki system. Start distributing your project via
Marmalade or MELPA (<code>package.el</code> repos). Your life will become much nicer and
the visibility of your project and the possibility to attract new
developers will be significantly boosted. GitHub is a project hosting
solution, the EmacsWiki is not.</p>

<h3>The Regular Users</h3>

<p>Boycott the wiki (unless the maintainers take actions)! Submit
documentation only to the official project pages. Ignore projects
hosted on the EmacsWiki. (or migrate them to GitHub if they seem
orphaned and try to rekindle them)</p>

<h2>Epilogue</h2>

<p>Do we need an EmacsWiki? Certainly we do! But we need a <strong>real</strong>
EmacsWiki and not this abomination that is currently a detriment to
new Emacs users, instead of help. The wiki needs restructuring, but
first it needs to die. I hope you&#8217;ll see the truth in my words and
take action instead of commenting how outrageous my claims are. Do
something meaningful for a change - save a project from the EmacsWiki,
contribute documentation to an official project&#8217;s wiki, package
something on Marmalade&#8230;</p>

<p>Die, Die EmacsWiki! I&#8217;ll be seeing you in hell&#8230;</p>

<p><strong>Update</strong></p>

<p>This post stirred a huge discussion online and as a result there is
now another Emacs wiki out there. The new wiki is available at
<a href="http://wikemacs.org">http://wikemacs.org</a>. It&#8217;s using MediaWiki (it
turned out it had several nice advantages over MoinMoin).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #5: Save Buffers Automatically on Buffer or Window Switch]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/"/>
    <updated>2012-03-08T15:58:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch</id>
    <content type="html"><![CDATA[<p>When I program in Java I usually leave the comfort of Emacs and use
IntelliJ IDEA instead (for various reasons that are irrelevant to this
post). IDEA has one particularly nice feature - &#8220;auto-save on focus
lost&#8221;. Basically you never have to hit <code>C-s</code> there explicitly, because
any time your current editor window loses focus its contents get
flushed to the disk automatically. Implementing something exactly the
same in Emacs is impossible (at least in Emacs Lisp), but we can
create a solution that is similar in spirit at least - we can
auto-save buffers when we switch the Emacs window or the current
buffer (which are more or less the most popular ways to change editing
focus in Emacs). This is easy to achieve in Emacs Lisp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; use shift + arrow keys to switch between visible buffers</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;windmove</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">windmove-default-keybindings</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; automatically save buffers associated with files on buffer switch</span>
</span><span class='line'><span class="c1">;; and on windows switch</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">switch-to-buffer</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">save-buffer-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">other-window</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-up</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-down</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-left</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-right</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously this code could have been written in a more compact manner
with the use of a macro, but I&#8217;ve decided to use this more verbose
variant for the sake of simplicity. We assume that you want to
auto-save your current work (buffer) when you switch to a new buffer
or to a new window (with either <code>C-x o</code> (<code>other-window</code>) or a
<code>windmove</code> command).</p>

<p>XEmacs has a hook called <code>deselect-frame-hook</code> that can take the
concept even further, but it&#8217;s absent from GNU Emacs.</p>

<p>So, that&#8217;s all for this tip, folks! I hope you&#8217;ve enjoyed it!
Personally I find it much more useful that the standard auto-save
mechanism in Emacs. And one more thing -
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> naturally
enables this functionality by default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tip #2: Get a List of All Rake Tasks]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/08/ruby-tip-number-2-get-a-list-of-all-rake-tasks/"/>
    <updated>2012-03-08T15:28:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/08/ruby-tip-number-2-get-a-list-of-all-rake-tasks</id>
    <content type="html"><![CDATA[<p>Many people are having trouble remembering all the rake tasks defined
in a particular project&#8217;s <code>Rakefile</code> (especially if they hadn&#8217;t
authored it). This is quite normal given the fact that Rails&#8217;s
Rakefile, for instance, defines 39 tasks (as of version
3.2.2). Personally I never memorize anything, but the most basic rake
tasks - for everything else there is the <code>rake -T</code> (or <code>rake --tasks</code>)
command. Here&#8217;s the command in action for Octopress&#8217;s Rakefile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake -T
</span><span class='line'>rake clean                 <span class="c"># Clean out caches: .pygments-cache, .gist-cache, .sass-cache</span>
</span><span class='line'>rake copydot<span class="o">[</span><span class="nb">source</span>,dest<span class="o">]</span>  <span class="c"># copy dot files for deployment</span>
</span><span class='line'>rake deploy                <span class="c"># Default deploy task</span>
</span><span class='line'>rake gen_deploy            <span class="c"># Generate website and deploy</span>
</span><span class='line'>rake generate              <span class="c"># Generate jekyll site</span>
</span><span class='line'>rake install<span class="o">[</span>theme<span class="o">]</span>        <span class="c"># Initial setup for Octopress: copies the default theme into the path of Jekyll&#39;s generator.</span>
</span><span class='line'>rake integrate             <span class="c"># Move all stashed posts back into the posts directory, ready for site generation.</span>
</span><span class='line'>rake isolate<span class="o">[</span>filename<span class="o">]</span>     <span class="c"># Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much quicker.</span>
</span><span class='line'>rake list                  <span class="c"># list tasks</span>
</span><span class='line'>rake new_page<span class="o">[</span>filename<span class="o">]</span>    <span class="c"># Create a new page in source/(filename)/index.markdown</span>
</span><span class='line'>rake new_post<span class="o">[</span>title<span class="o">]</span>       <span class="c"># Begin a new post in source/_posts</span>
</span><span class='line'>rake preview               <span class="c"># preview the site in a web browser</span>
</span><span class='line'>rake push                  <span class="c"># deploy public directory to github pages</span>
</span><span class='line'>rake rsync                 <span class="c"># Deploy website via rsync</span>
</span><span class='line'>rake set_root_dir<span class="o">[</span>dir<span class="o">]</span>     <span class="c"># Update configurations to support publishing to root or sub directory</span>
</span><span class='line'>rake setup_github_pages    <span class="c"># Set up _deploy folder and deploy branch for Github Pages deployment</span>
</span><span class='line'>rake update_source<span class="o">[</span>theme<span class="o">]</span>  <span class="c"># Move source to source.old, install source theme updates, replace source/_includes/navigation.html with source.old&#39;s navigation</span>
</span><span class='line'>rake update_style<span class="o">[</span>theme<span class="o">]</span>   <span class="c"># Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom</span>
</span><span class='line'>rake watch                 <span class="c"># Watch the site and regenerate when it</span>
</span><span class='line'>changes
</span></code></pre></td></tr></table></div></figure>


<p>Not only did you get a list of all the tasks, but nice descriptions of
the tasks as well.</p>
]]></content>
  </entry>
  
</feed>
