<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[(think)]]></title>
  <link href="http://bbatsov.github.com/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2012-10-20T20:46:52+03:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #6: Remove variable &amp; function definitions]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions/"/>
    <updated>2012-10-20T20:29:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions</id>
    <content type="html"><![CDATA[<p>From time to time you might want to void (unbind) a variable or a
function definition in Emacs. Most often you&#8217;ll probably be dealing
with variables created with <code>defvar</code> whose values you&#8217;ll want to
update.  The magic functions you need are the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; this will make the symbol my-nasty-variable&#39;s value void</span>
</span><span class='line'><span class="p">(</span><span class="nb">makunbound</span> <span class="ss">&#39;my-nasty-variable</span><span class="p">)</span>
</span><span class='line'><span class="c1">;; this will make the symbol my-nasty-function&#39;s</span>
</span><span class='line'><span class="c1">;; function definition void</span>
</span><span class='line'><span class="p">(</span><span class="nb">fmakunbound</span> <span class="ss">&#39;my-nasty-function</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The names aren&#8217;t exactly intuitive and even I happen to forget them from time to
time. Now at least I&#8217;ll now where to look for them if that happens
again. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs on OSX]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/emacs-on-osx/"/>
    <updated>2012-10-14T22:03:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/emacs-on-osx</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>In this article I&#8217;ll share with you a few tips and tricks about
running Emacs under the Max OSX operating system.</p>

<h2>Installation</h2>

<p>While Emacs is available for installation from
<a href="http://wikemacs.org/wiki/Installing_Emacs_on_OS_X">various sources</a>
I personally recommend you to use the
<a href="http://wikemacs.org/wiki/Installing_Emacs_on_OS_X">Emacs for Mac OSX binary distribution</a>.</p>

<p>Installation via Homebrew is also a decent option, although it more time consuming.</p>

<p>After the installation you might want to wipe out the ancient Emacs 22
that ships with OSX by default(its presence will only cause headaches, trust me):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rm /usr/bin/emacs
</span><span class='line'><span class="nv">$ </span>sudo rm -rf /usr/share/emacs
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind that the OSX updates will (unfortunately) bring Emacs 22 back from the dead, so
you might consider altering your <code>PATH</code> instead.</p>

<p>Alternatively you can just create an alias in your shell and when you
invoke <code>emacs</code> it will run the newly installed version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/Applications/Emacs.app/Contents/MacOS/Emacs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you installed via Homebrew that path might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">alias </span><span class="nv">emacs</span><span class="o">=</span><span class="s2">&quot;/usr/local/Cellar/emacs/24.2/Emacs.app/Contents/MacOS/Emacs -nw&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make it permanent, if using bash, add that line to
<code>~/.bash_profile</code>. zsh users will want to update <code>~/.zshrc</code> instead.</p>

<h2>Full-screen support</h2>

<p>The Homebrew Emacs formula includes a patch providing the <code>M-x
ns-toggle-fullscreen</code> command for switching between normal and
full-screen modes. It works well, but does not provide the typical OS
X Lion full-screen app experience. In particular, it remains on the
desktop, obscuring non-full-screen applications, rather than moving to
its own space. For OSX Lion style fullscreen support have a look at
this
<a href="http://sourcematters.org/2012/04/10/full-screen-emacs-24-for-os-x-lion.html">article</a>.</p>

<p>Another option that you might want to explore is
the <a href="http://osxdaily.com/2011/07/22/enable-full-screen-support-all-apps-os-x-lion-maximizer/">maximizer</a>
utility that brings full-screen support for all Cocoa apps under Lion.</p>

<h2>Keybindings</h2>

<p>I heartily recommend you to remap your <em>Caps Lock</em> key to <em>Control</em>. This
can be easily done via <em>Preferences -> Keyboard -> Modifier Keys</em>. If
you&#8217;re using a laptop keyboard or the bluetooth keyboard you&#8217;ll
definitely want to remap your right Option key to Control as
well. No one can use effectively Emacs without a right Control
key. Remapping it is a bit more involved and requires the use of the
third-party utility
<a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a>.</p>

<p>On a regular Mac keyboard you&#8217;ll probably want to map Command to Meta
and Option to Super. On an external Windows keyboard you&#8217;ll want to
map Command to Super and Option to Meta (on Windows keyboard the
Command and Option keys are swapped). Add this to your <code>init.el</code> (or
<code>.emacs</code>) file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">mac-option-modifier</span> <span class="ss">&#39;meta</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you often switch between your laptop keyboard and an external
Windows keyboard (like me) you might want to define this helper
command and bind it to some key combo (<code>C-c w</code> in the example):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">swap-meta-and-super</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Swap the mapping of meta and super. Very useful for people using their Mac</span>
</span><span class='line'><span class="s">with a Windows external keyboard from time to time.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>        <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;meta</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-option-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Command is now bound to META and Option is bound to SUPER.&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>      <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-option-modifier</span> <span class="ss">&#39;meta</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Command is now bound to SUPER and Option is bound to META.&quot;</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;C-c w&quot;</span><span class="p">)</span> <span class="ss">&#39;swap-meta-and-super</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Setting the PATH variable</h2>

<p>Long story short - if you&#8217;re running Emacs from Spotlight (or any
other launcher for that matter) your <code>PATH</code> and <code>exec-path</code> variables
won&#8217;t be same as the ones in your shell (and that&#8217;s every nasty since
you want be able to run some external programs from Emacs). The best
way to handle this would be installing the package
<a href="https://github.com/purcell/exec-path-from-shell">exec-path-from-shell</a>
by Steve Purcell.</p>

<h2>Flyspell</h2>

<p>For flyspell to work correctly you&#8217;ll need to install aspell plus a few dictionaries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install aspell --lang<span class="o">=</span>en
</span></code></pre></td></tr></table></div></figure>


<h2>More goodies</h2>

<p>If you want to spare yourself part of the headache of configuring
Emacs on OSX and get a lot of extra firepower you might want to install
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> - an enhanced
Emacs 24.x configuration (developed by yours truly) that should make
your experience with Emacs both more pleasant and more powerful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tip #1: Use Pry Instead of irb for the Rails Console]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/rails-tip-number-1-use-pry-instead-of-irb-for-the-rails-console/"/>
    <updated>2012-10-14T18:06:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/rails-tip-number-1-use-pry-instead-of-irb-for-the-rails-console</id>
    <content type="html"><![CDATA[<p>This tip is going to be a really short one. Hopefully by now you&#8217;ve
heard about <a href="http://pryrepl.org/">pry</a> - a fantastic <code>irb</code>
replacement, that somewhat reminds me of the mighty Lisp REPLs. What
you might not know is how to hook it into Rails so that the <code>rails
console</code> (a.k.a. <code>rails c</code>) command would fire a pry shell instead of
an irb one. There are several ways to do so, but I find one
particularly straightforward - the awesome little gem
<a href="https://github.com/rweng/pry-rails">pry-rails</a>.</p>

<p>So what are you waiting for? Go ahead, install the little sucker and
enjoy your new pry-powered Rails console.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tip #3: Matching on an Object's Class in a Case Expression]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/ruby-tip-number-3-matching-on-an-objects-class-in-a-case-expression/"/>
    <updated>2012-10-14T15:23:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/ruby-tip-number-3-matching-on-an-objects-class-in-a-case-expression</id>
    <content type="html"><![CDATA[<p>From time to time you might want to take different actions depending
on an object&#8217;s class. One handy way to do so is with a <code>case</code>
expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">object</span>
</span><span class='line'><span class="k">when</span> <span class="no">Fixnum</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is an integer number&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="nb">String</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a string&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="no">Hash</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a hash&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Behind the scenes this is transformed to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Fixnum</span> <span class="o">===</span> <span class="n">object</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Object is an integer number&#39;</span>
</span><span class='line'><span class="k">elsif</span> <span class="nb">String</span> <span class="o">===</span> <span class="n">object</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Object is a string&#39;</span>
</span><span class='line'><span class="k">elsif</span> <span class="no">Hash</span> <span class="o">===</span> <span class="n">object</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Object is a hash&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of people seem to make the following mistake, so beware:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># WRONG - Class === Class will return false</span>
</span><span class='line'><span class="k">case</span> <span class="n">object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="k">when</span> <span class="no">Fixnum</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is an integer number&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="nb">String</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a string&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="no">Hash</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;Object is a hash&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully you&#8217;ll find this small tip useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up fallback locale(s) in Rails 3]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/12/setting-up-fallback-locale-s-in-rails-3/"/>
    <updated>2012-09-12T14:56:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/12/setting-up-fallback-locale-s-in-rails-3</id>
    <content type="html"><![CDATA[<p>I18n(internationalization) and l10n(localization) are topics that are
covered superbly by the
<a href="http://guides.rubyonrails.org/i18n.html">Rails Guides</a>. The one thing
that&#8217;s left out is the setup of fallback locales in case something is
missing in the currently selected locale (and mark my words -
something probably is). Therefore I&#8217;m writing this
post.</p>

<p>Ideally we&#8217;d have i18n-ed and localized everything perfectly, but
that&#8217;s rarely the case. I&#8217;d rather have the users see things from
another locale than error messages. So how do we do that in Rails 3?
It&#8217;s pretty simple actually. There are three fallback options we can
select and they all require small changes to the <code>application.rb</code> file.</p>

<ul>
<li>fallback to the default locale</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># fallback to what&#39;s specified in config.i18n.default_locale</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>fallback to a specified locale</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># fallback to en, regardless of what&#39;s in config.i18n.default_locale</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:en</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>specify a fallback map (different fallback locales for different
locales)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># missing translations of es and fr languages will fallback to english</span>
</span><span class='line'><span class="c1"># missing translations in german will fallback to french</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;es&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">,</span> <span class="s1">&#39;fr&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">,</span> <span class="s1">&#39;de&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;fr&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Well, that&#8217;s the gist of it. Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Linux to OSX - 1 Year Later]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/from-linux-to-osx-1-year-later/"/>
    <updated>2012-09-09T22:11:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/from-linux-to-osx-1-year-later</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>A little more than an year ago I wrote my rant post
<a href="http://batsov.com/articles/2011/06/11/linux-desktop-experience-killing-linux-on-the-desktop/">The Linux Desktop Experience is Killing Linux on the Desktop</a>
and for the first time in 8 years I wasn&#8217;t a desktop Linux user
anymore. I spent about a month wrestling with Windows 7, but let&#8217;s
face it - Windows is ill suited for professional Ruby programmers like
me (and it&#8217;s ill suited for most programmers, except maybe Java &amp; .Net I
guess).</p>

<p>Anyways, it was never my intention to stick with Windows - I was just
doing my Mac due diligence. Now with 1+ year of OSX usage I&#8217;d
like to share a few things about my experience thus far with you.</p>

<!--more-->


<h2>From Linux to OSX</h2>

<p>The transition was initially painful - I felt very odd dragging app
icons to the <code>Applications</code> folder to install them. To be honest I was
quite puzzled what was I supposed to do the first time I had to
install an app this way (it didn&#8217;t have those helpful hints with the arrows most apps
do). The Linux distro package management is definitely infinitely
better, or at least it seems so from where I&#8217;m standing. Luckily for me most of the
tools I use are available from the third-party <a href="http://mxcl.github.com/homebrew/">homebrew</a> package
manager for OSX. It&#8217;s like an extremely basic version of the mighty
Gentoo <code>portage</code>, but it generally gets the job done.</p>

<p>On a more positive note - I was impressed with the quality and
responsiveness of the OSX desktop and the fact that Emacs keybindings
are used by default in its editor toolkit (and strangely puzzled by
the lack of right control key - how is one supposed to hit <code>Control +
a</code> I dare ask?). One app in particular - <code>spotlight</code>, blew me off the
water, especially after having dealt on Linux with crappy clones like
<code>beagle</code> in the past. Spotlight can truly find just about anything,
was it&#8217;s own SQL-like query language and is <strong>blazingly</strong> fast.</p>

<p>I quickly found a good terminal emulator (that would be
<a href="http://www.iterm2.com/#/section/home">iterm2</a> - it&#8217;s actually the
best terminal emulator in the world IMHO) and
most of the command-line apps I used from day to day were already lying around
(after all OSX <strong>is</strong> Unix) - to my great surprise even stuff like PostgreSQL
(only on OSX Server) and <code>zsh</code> came preinstalled. Most of the other
apps I really needed had native OSX ports; the others - worthy
alternatives.</p>

<p>Having hated OpenOffice.org for many years I was very pleasantly
surprised by quality of apps like <code>Keynote</code> &amp; <code>Words</code>.</p>

<p>Being a keyboard chap preaching in the church of <code>Das Keyboard</code> I was
a bit underwhelmed by the whole multi-touch mumbo-jumbo at first, but
after a while I came to the conclusion that Apple have the only
trackpads and mice that are actually worth using (even though I still
like using the keyboard way more).</p>

<p>To sum it all up - I got up to speed fairly quickly, but it was a
bumpy ride.</p>

<p>Here&#8217;s a bit more details&#8230;</p>

<h2>The things I love about OSX</h2>

<h3>The Desktop</h3>

<p>It&#8217;s pretty, it&#8217;s quick, it&#8217;s stable. It makes KDE4 and GNOME3 look
like school projects in comparison. And did I mention that the fonts
on OSX are even prettier than the ones in Windows?</p>

<h3>The OSX flavored apps</h3>

<p><a href="http://sparrowapp.com/">Sparrow</a> is the first desktop mail client I ever liked (shame on
you Google for killing it).</p>

<p>iTerm2 is the ultimate terminal emulator. It alone warrants the
purchase of a Mac.</p>

<p>Keynote is the best presentation program I&#8217;ve come to use thus far.</p>

<p><a href="http://www.parallels.com/">Parallels Desktop</a> is light years ahead of VirtualBox and KVM (as far
as desktop virtualization is concerned).</p>

<p>I could go on a lot like this, but I&#8217;ll stop now.</p>

<p>It&#8217;s obvious that Mac users have developed a taste in extremely
refined software.</p>

<h3>Hardware compatibility</h3>

<p>If something is supposed to work with OSX - it works superbly
out-of-the-box. I&#8217;ve almost forgotten now the days of constant battle
with crappy hardware. Sleep &amp; Wake just work. Battery life is
exceptional (due to very advanced power management capabilities).</p>

<p>Certainly controlling all of the hardware an OS will run on helps a
lot, but we still have to acknowledge Apple&#8217;s achievement.</p>

<h3>Stability</h3>

<p>One year, three Macs - only two or three system crashes. For a
developer that likes to tinker a little bit more than he should -
that&#8217;s impressive.</p>

<p>That having said I had some Linux desktops that used run for more than
half an year without reboots (and the reboots were often caused by
power outages or distro/kernel updates). Linux stability on a (fairly
new) laptop? Well, that&#8217;s a whole different story&#8230;</p>

<h2>The things that are OK</h2>

<h3>The default apps</h3>

<p>The apps bundled with OSX are not bad at all, but they aren&#8217;t
particularly great. Still - Safari is a very good browser, Mail is a
much better desktop client than Evolution/Thunderbird, Calendar is a
good organizer (but a bit buggy when it comes down to Google Calendar
integration), Messages is so-so.</p>

<p>The bottom line is - you can go a long way with the bundled apps, but
they aren&#8217;t exactly perfect. My advice - shop for alternatives (both
open-source and proprietary).</p>

<h3>Mac App Store</h3>

<p>Decent way to distribute proprietary apps, but with all the
restrictions on the app sandboxing there aren&#8217;t many interesting apps
out there. Hopefully it&#8217;ll get better in time. The ability to upgrade
your OSX by purchasing the new version from the App Store is very cool
(for a proprietary OS of course).</p>

<h3>Emacs</h3>

<p>The Cocoa port of Emacs is a bit immature and there are some visual
glitches here and there (try out <code>M-x linum-mode</code> for instance), but
they are forgivable. I&#8217;m also missing the deep integration Emacs had with Linux.
And who the fuck designed all the official Mac keyboards without a
right control key? I finally understood why so many Mac users where on
vim :-)</p>

<p>Btw, remapping the <code>Caps</code> to <code>Control</code> is not the answer. I do it now,
I did it on Linux as well. You simply not supposed to hit Control +
any other key with the same hand. It&#8217;s disruptive to your
typing&#8230; But then again - you should probably do most of your typing
will a full sized keyboard :-)</p>

<h3>Software Development</h3>

<p>OSX doesn&#8217;t nurture software development as much as Linux does, but it
comes pretty close in second place. All the tools you know and love
are available, but their installation &amp; setup is a little bit more
involved on OSX. There is a reason why the screenshots in most
programming books show OSX.</p>

<h3>System administration</h3>

<p>Definitely a step back from Linux. Programs like <code>launchctl</code> (for instance) are not
exactly fun to work with, but they do get the job done. I&#8217;d never use
an OSX box for anything more than a desktop workstation. Setting up a
sensible <code>$PATH</code> is not as trivial as it was on Linux either
(<code>/etc/paths</code> and some plist I forgotten come to mind).</p>

<h2>The things I hate</h2>

<h3>The special keys</h3>

<p>Not exactly an OSX feature, but still&#8230;</p>

<p>One year and I still hate <code>Command</code> and <code>Option</code> - option is basically <code>Alt</code>
on a strange location and Command is totally useless IMHO. I&#8217;d
probably wouldn&#8217;t have hated them as much if there were room left on
the Apple keyboards (expect of course the old wired Apple keyboard) for an addition control key. Luckily for me I use an
external
<a href="http://batsov.com/articles/2008/06/16/das-keyboard/">Das Keyboard Ultimate</a>
most of the time&#8230;</p>

<p>Command and Option do have some value, I&#8217;d probably would have
appreciated it if they didn&#8217;t come at the cost of my beloved right
control (which I guess only Emacs users are missing anyways).</p>

<h3>No standard all mighty package manager</h3>

<p>On Linux I had <code>aptitude</code>, <code>yum</code>, <code>portage</code> and <code>pacman</code> - all amazing at what
they do. On OSX - <code>homebrew</code> is a decent option, but it&#8217;s a far cry from
the might and magic of the Linux package managers. Still, <code>homebrew</code>
is better than it&#8217;s alternative, so beware!</p>

<h3>Ugly XML config files</h3>

<p>Here and there in OSX you have to write some appalling <a href="http://en.wikipedia.org/wiki/Property_list">XML config
files</a>. I thought I&#8217;d never see the likes of those again after I put
Java development behind me :-)</p>

<h3>XCode</h3>

<p>You need to install a giant lame IDE just to get a bunch of command
line development tools? That&#8217;s one of the most annoying things I&#8217;ve
encountered up-to-date in OSX.</p>

<p>Yep, I know about the tools being available
<a href="http://kennethreitz.com/xcode-gcc-and-homebrew.html">separately</a> for
couple of months now, but requesting an Apple developer registration
just to get them seems a bit to much to me.</p>

<h2>Epilogue</h2>

<p>Am I happier now without Linux? Definitely! Is OSX a better OS than
Linux? Absolutely not! It does have a <strong>much</strong> better desktop
experience and since I spend most of the time on a computer
interacting with the desktop - that&#8217;s a big win for me. Of course I
wouldn&#8217;t mind seeing Linux achieve this level of desktop maturity and
stability.</p>

<p>Should you dump Linux and join me in <strong>darkness</strong>? How the hell should
I know? :-) I&#8217;m just sharing my two cents - if you&#8217;re happy using
Linux you should <strong>definitely</strong> stick with it. Obviously I wasn&#8217;t and
there weren&#8217;t that many alternatives lying around.</p>

<p>Not having to deal with hardware problems and immature desktop apps is
like a breath of fresh air and it more than compensates for the few
shortcomings of OSX. Nothing compensates the lack of that right
control key on most keyboards, but after all that&#8217;s not an OS problem
;-)</p>

<p>There is great vibrant hacker community gathered around OSX and it&#8217;s
one of the main driving forces of the OS. There is unfortunately a lot
of corporate pressure from Apple as well, but as you already know by
now - there are never perfect things, there are always
compromises. I&#8217;d rather use a proprietary OS that stays out of my way,
than a free OS into which I bump at every turn.</p>

<p>Soon I&#8217;ll blog a little bit more about the practical aspects and
implication of the migration. Cheers, mates!</p>

<p><strong>P.S. I&#8217;ve updated the original post a bit to reflect some of the
initial feedback I received.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[guru-mode]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/guru-mode/"/>
    <updated>2012-09-09T21:17:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/guru-mode</id>
    <content type="html"><![CDATA[<p>Getting started with Emacs is hard. That&#8217;s a fact of life and you
shouldn&#8217;t believe anyone telling you otherwise.</p>

<p>One of the harder parts of the journey to Emacs mastery is remembering
all those keybindings at the beginning (<code>C-h t</code>), which can be really
overwhelming. To make matters worse for many common commands there are
two sets of keybindings - the Emacs ones (that are touch typing
friendly) and the popular ones (that typically involve the use of the
arrow keys). Most people never get to use the <em>proper</em> keybindings and
forever make use of the arrow keys.</p>

<p>To help Emacs newcomers get used to the proper Emacs keybindings I&#8217;ve
created <a href="http://github.com/bbatsov/guru-mode">guru-mode</a> - a simple
minor mode that will show you a (helpful) message in the minibuffer
every time you try to use a <em>non Emacs way</em> keybinding.</p>

<p><img src="http://bbatsov.github.com/images/articles/guru-mode.png"></p>

<p>It will probably annoy you <strong>a lot</strong> in the beginning, but trust me -
it&#8217;ll be worth it in the long run.</p>

<p><code>guru-mode</code> comes bundled with
<a href="http://github.com/bbatsov/prelude">Emacs Prelude</a> and is available
for installation from <a href="http://marmalade-repo.org">Marmalade</a> and <a href="http://melpa.milkbox.net">MELPA</a>.</p>

<p>P.S. True Emacs mastery cannot be achieved if you do not practice
touch typing; if you&#8217;re doing hunt-and-peck typing you&#8217;d better fire up the
venerable <code>gtypist</code> before looking at <code>guru-mode</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Support for the Slim Template Language]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/emacs-support-for-the-slim-template-language/"/>
    <updated>2012-09-09T20:16:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/emacs-support-for-the-slim-template-language</id>
    <content type="html"><![CDATA[<p>I&#8217;m mostly a Ruby on Rails developer these days and as such I&#8217;m pretty
fond of the <a href="http://slim-lang.com">Slim template language</a>. I&#8217;ve
always hated HTML + ERB, since that evil duo encourages all sorts of
ever practices and recently I&#8217;ve adopted Slim as a replacement for
my long time favourite ERB alternative - <a href="http://haml-lang.com">Haml</a>.</p>

<p>I won&#8217;t discuss here the shortcomings of Haml vs Slim, but I&#8217;ll share
with you the big advantage Haml has over Slim (for Emacs users at
least) - it has a pretty nice major editing mode for Emacs. Slim&#8217;s
Emacs support on the other hand is rather iffy and is presently mostly
based on <code>haml-mode</code>. That will hopefully change soon, since recently
I&#8217;ve become a co-maintainer of
<a href="http://github.com/minad/emacs-slim">slim-mode</a> and I plan to improve
it as much as I can (currently I&#8217;m mostly working on precise
font-locking). Any help from interested parties is, naturally, most
welcome. I very much doubt that me and
<a href="https://github.com/minad">Daniel Mendler</a> are the only two people
dreaming of great Slim experience in Emacs. :-)</p>

<p><img src="http://bbatsov.github.com/images/articles/slim-mode.png"></p>

<p>Let us together eliminate that big Haml advantage. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Long Time, No See]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/09/long-time-no-see/"/>
    <updated>2012-09-09T19:50:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/09/long-time-no-see</id>
    <content type="html"><![CDATA[<p>It&#8217;s been quite a while since my last blog post. And there hasn&#8217;t been that
much action on the open-source projects I happen to maintain
either. The reason for this is quite simple - recently I&#8217;ve joined the
ranks of the social trading start-up <a href="http://tradeo.com">Tradeo</a> and
things have been crazy at work ever since.</p>

<p>While this is without a doubt my coolest job to date, it&#8217;s also the
most demanding. Anyways - just wanted to let you know I&#8217;m doing OK and
I plan to resume my usual blogging and open-source coding duties soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A True Emacs Knight]]></title>
    <link href="http://bbatsov.github.com/articles/2012/05/28/a-true-emacs-knight/"/>
    <updated>2012-05-28T15:39:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/05/28/a-true-emacs-knight</id>
    <content type="html"><![CDATA[<p>Here&#8217;s one true Emacs Knight (courtesy of my friend Gergana
Stancheva). Feel free to use it wherever you see fit.</p>

<p><img src="http://bbatsov.github.com/images/articles/emacs_knight.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changelog vs API diff]]></title>
    <link href="http://bbatsov.github.com/articles/2012/04/07/changelog-vs-api-diff/"/>
    <updated>2012-04-07T12:22:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/04/07/changelog-vs-api-diff</id>
    <content type="html"><![CDATA[<p><em>This is a guest post from my friend <a href="http://about.me/atodorov">Alexander Todorov</a>
who is a QA guru, software engineer and cloud enthusiast!</em></p>

<p><strong>Software changes fast! Open source software even faster!</strong></p>

<p>And once you start to update dependencies, libraries and frameworks it never ends&#8230;
After all the testing and validation you may have done there is no
guarantee that the software will keep working afterwards.
This is no big deal for small and medium sized projects but becomes a full-time
job for larger projects with longer life span which require constant maintenance
and enhancements. I&#8217;ve seen this time and time again during my work on various projects.
Even a simple <em>Drupal</em> based website pops up an update every couple of weeks.</p>

<p>OTOH back porting fixes and keeping stable APIs can be a big business. This is what
<em>Red Hat</em> is doing for their <em>Red Hat Enterprise Linux</em> distribution. Nearly all changes
are backwards compatible and and the software stack remains stable compared
to upstream <em>Fedora</em> or the more upstream projects which comprise it.</p>

<p>Let me say that I don&#8217;t like to upgrade. Long ago I was using <em>Debian</em> <strong>stable</strong>
on my computer. Now I use <em>RHEL</em>. No fancy features, no bells and
whistles and more important predictable behavior wrt updates and APIs.
The same approach I take when developing software. I stay away from the latest and
greatest technology simply because it changes too often. I prefer mature frameworks and
packages which produce new versions every six months or less frequent.
This approach allows me to concentrate on writing code and getting the project done
instead of plumbing bugs introduced by the latest <em>package foo</em> version.</p>

<p>All this said I have a very careful approach to upgrades, especially if I&#8217;m
using an upstream package. I will first look at the changelog if any. Luckily
many of the mature projects provide comprehensive changelog records. This is
especially true for Perl packages. I&#8217;m looking for notices about backward
incompatible changes, API breakage, security notices, major bug fixes,
changes in behavior and the like.
When changelog is not available there&#8217;s the commit log. I admit this is
not something I usually look at but it happens once in a while. I do this for projects
I&#8217;m particularly interested in or otherwise following.
Doing a content diff is another possibility which usually helps you
spot (if you look carefully) some API changes as well. I resort to this if I&#8217;m not able to find the upstream
source repository or when it is hosted on something ancient like CVS.</p>

<p>Based on all of this I decide to upgrade or not. With careful planning
of updates (which version, which moment of time) and testing I manage to
minimize the hassle of breaking my projects and spending days fixing
bugs afterwards. Instead I use the time to write some code that kicks ass
(or at least I hope so).</p>

<p>I&#8217;m curious to know what sort of information folks do prefer to have
when considering an update? Changelog vs. API diff or seething else?
I personally prefer well written Changelog and full list of fixed bugs.
Please cast your vote in the comments or visit the
<a href="http://www.surveymonkey.com/s/T7YW2MJ">survey</a>! Thank you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MELPA - homebrew (Emacs Edition)]]></title>
    <link href="http://bbatsov.github.com/articles/2012/04/06/melpa-homebrew-emacs-edition/"/>
    <updated>2012-04-06T18:04:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/04/06/melpa-homebrew-emacs-edition</id>
    <content type="html"><![CDATA[<p>A few weeks ago I wrote an
<a href="http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/">article about the state of package management in Emacs</a>. In
that article I pointed out that on the side of <a href="http://wikemacs.org/wiki/Package.el">package.el</a> too much
was riding on the poorly maintained Marmalade repo. Today
Marmalade went dark (again) and many people are wondering what to do
now. The answer is simple - start using <a href="http://melpa.milkbox.net/">MELPA</a> instead.</p>

<p>I was thinking of starting a project similar to Marmalade to alleviate
its problems, but then the MELPA project was brought to my
attention. This project follows the Homebrew (unofficial OSX package
manager) model of using simple GitHub collaboration to maintain and
grow a bunch of build recipes. In the case of MELPA, those recipes
show how to bundle upstream source packages into package.el-compliant
packages. The recipes can be tested locally by package authors, and
they are run hourly on the MELPA server to create an HTTP package
archive that Emacs users can simply add to their <code>'package-archives</code>
list. As <a href="http://technomancy.us">Phil Hagelberg</a> said - there&#8217;s no reason to drag in
complicated dependencies like Node for something that&#8217;s essentially a
pile of static files. MELPA on the other hand is written mostly in
Emacs Lisp and is thus much more comprehensible to casual Emacs hackers.</p>

<p>Most packages currently contained in MELPA are development snapshots,
but the project maintainer
<a href="https://github.com/milkypostman">Donald Curtis</a> and
<a href="http://www.sanityinc.com/">Steve Purcell</a> (aka <code>sanityinc</code>) are
working on extending the MELPA build scripts to support stable
packages, using upstream version tags.</p>

<p>Adding a new package to MELPA is as simple as adding a few lines of
code to the <code>pkglist</code> file in MELPA&#8217;s source code repo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">name</span> <span class="ss">:url</span> <span class="s">&quot;&lt;repo url&gt;&quot;</span>
</span><span class='line'> <span class="ss">:fetcher</span> <span class="nv">[git|svn|darcs</span><span class="err">|</span><span class="nv">wiki]</span>
</span><span class='line'> <span class="nv">[:files</span> <span class="p">(</span><span class="s">&quot;&lt;file1&gt;&quot;</span><span class="o">,</span> <span class="o">...</span><span class="p">)</span><span class="nv">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You simply have to fork the <a href="https://github.com/milkypostman/melpa">official repo</a>, modify <code>pkglist</code>, send a pull
request and <code>package.el</code> compatible packages will be built
automatically for you on MELPA&#8217;s server (you can also build the
packages locally to test if everything is OK with your recipes). Sure it&#8217;s not as easy as
submitting a package via a web UI, but it&#8217;s a much more robust
approach. It also eliminates a common problem in Marmalade - there
only the original uploader (+ people selected by him) can update a
package. Often the original uploaders are very hard to find&#8230;</p>

<p>To use MELPA with Emacs 24 (or a recent version of <code>package.el</code>) just
add this to your <code>.emacs</code> (or equivalent):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;package-archives</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;melpa&quot;</span> <span class="o">.</span> <span class="s">&quot;http://melpa.milkbox.net/packages/&quot;</span><span class="p">)</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s a lot more info regarding MELPA on its official website and
I&#8217;d rather not duplicate it here.</p>

<p>I would encourage package authors and users to investigate and
contribute to MELPA. I&#8217;ve already submitted a bunch of packages
there and rebased <a href="http://batsov.com/prelude">Emacs Prelude</a> to
use MELPA instead of Marmalade.</p>

<p>Together we can turn MELPA into the most extensive and robust community-supported
<code>package.el</code> repo! Emacs users deserve one of those :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WikEmacs - The Other Emacs Wiki]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki/"/>
    <updated>2012-03-26T11:23:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki</id>
    <content type="html"><![CDATA[<p>I&#8217;d like to apologize to everyone insulted by my previous
posts. Contrary to popular belief I acknowledge EmacsWiki&#8217;s
contribution to the Emacs community. Obviously many people are too
fond of its current format so I doubt that it will ever change
(considerably). I didn&#8217;t mean to insult anyone, I just wanted to catch
your attention (which unfortunately requires harsher words from time to
time) and point it in the direction of the existing problems.</p>

<p>For the people that weren&#8217;t happy with EmacsWiki - the ones that felt
my pain and were looking for a change I present
<a href="http://wikemacs.org">WikEmacs</a> (pronounced wikimacs). It&#8217;s a
MediaWiki powered Emacs wiki, that will try to bring to the community
cleaner, leaner and more up-to-date documentation.</p>

<p>There are only a few guidelines for the contributors there:</p>

<ul>
<li>articles should be geared only towards the current and future
versions of Emacs (currently 23 and 24) for maintainability&#8217;s sake.</li>
<li>articles should not copy Emacs&#8217;s or extension&#8217;s official
documentation - they should refer to it instead. An overview, some
nice pointers, tips and links - that seems like a good article,
doesn&#8217;t it?</li>
<li>comments and questions should go to an article&#8217;s discussion page</li>
</ul>


<p>File uploads are disabled on WikEmacs (but image file uploads will
probably be allowed soon) - it will never host Emacs extensions of any
sort.</p>

<p>There is a Google discussion group
<a href="https://groups.google.com/forum/?fromgroups#!forum/wikemacs">here</a>
for more general questions regarding the wiki.</p>

<p>Our goal is not to copy over the 8500 articles available at
EmacsWiki. It&#8217;s to provide a good road map for new users coming to
Emacs and enough helpful hints and tips for experienced users. Everyone
is welcome to join our efforts.</p>

<p>As far as short term goals go - have a look at the outlined structure
of the wiki (on its home page), pick a section that interests you and
create/extend/improve it. Our content is licensed with GNU&#8217;s Free
Documentation License (which is compatible with Wikipedia&#8217;s and
probably EmacsWiki&#8217;s GPL2). Some nice blog articles about Emacs might
be converted to wiki articles with permission from their authors. You
might find <a href="http://johnmacfarlane.net/pandoc/try">pandoc</a> useful to
automatically convert articles from other formats to MediaWiki markup
and <a href="https://launchpad.net/mediawiki-el">mediawiki.el</a> to edit
articles on wiki from the comfort of your beloved editor.</p>

<p>Thanks to the people that brought us the original EmacsWiki. Thanks to
everyone who supported the idea for the new wiki. Thanks in advance to
all future contributors.</p>

<p>Some people will undoubtedly see the birth of WikEmacs as a separatist move to fraction
the Emacs community. To them I&#8217;d like to say that few things in life
are as productive as competition. Obviously a lot of people willing to
contribute to a new wiki are unwilling to do so for EmacsWiki and vice
versa. This is not a contest and there will be no winner. I wish the
best of luck to EmacsWiki and its supporters. What I wish for is to give
our community the best source of documentation available and the
option to choose.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Hands on Deck! (or the Action Plan for a new Emacs community wiki)]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/21/all-hands-on-deck-or-the-action-plan-for-a-new-emacs-community-wiki/"/>
    <updated>2012-03-21T11:11:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/21/all-hands-on-deck-or-the-action-plan-for-a-new-emacs-community-wiki</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>Yesterday I wrote a highly
<a href="http://batsov.com/articles/2012/03/20/die-emacswiki/">controversial article about the state of the EmacsWiki</a>
and suggested a few things we can do to make things better. I got the
usual batch of hate mail and some remarks on the poor quality of my
English and writing style (which generally amuse me a lot). But I
got much more encouraging feedback from <strong>a lot</strong> of Emacs community
members. So here our story continues&#8230;</p>

<!--more -->


<h2>On The Essence of Things</h2>

<p>Some people accused me that I don&#8217;t even know what I wiki is. To them
I&#8217;d like to say that a thing is not its dictionary/encyclopedia
definition. A thing is what it&#8217;s perceived to be. People expect wiki
entries to look and behave like those found in MediaWiki or Confluence
and not like some mixture of a wiki, forum and irc conversation&#8230;</p>

<h2>A Word from Our Sponsor</h2>

<p>Alex wrote a
<a href="http://www.emacswiki.org/emacs/2012-03-20">public response on the EmacsWiki</a>
yesterday, that I&#8217;d first like to share (since probably more people
will see it here, than there). I publish it here with no alternations:</p>

<blockquote><p>Bozhidar Batsov is apparently very frustrated with Emacs Wiki. He<br/>seems to think that we should start over – use new software, add<br/>moderators, guidelines, and sorts of fancy stuff. My answer is the<br/>same as it was back in 2008 (http://www.emacswiki.org/emacs/MissionRant).</p><p>One of his ideas I actually agree with. &#8220;Submit documentation only to<br/>the official project pages.&#8221; Absolutely. :)</p><p>Some ideas I am luke warm about: &#8220;package something on Marmalade…&#8221;<br/>Sure, why not? I have never used Marmalade, but I encourage you to<br/>improve the tools you use. There&#8217;s also &#8220;don&#8217;t respond to any bug<br/>requests regarding modified copies of your sources distributed via<br/>EmacsWiki.&#8221; I also don&#8217;t want to encourage bug reports on the<br/>wiki. Use the facilities built into Emacs to report bugs. But almost<br/>all of you know that.</p><p>But other ideas?</p><p>&#8220;Drop the current format of the wiki - use something standard like<br/>MediaWiki instead of OddMuse.&#8221; How is reformatting the pages going to<br/>improve them?</p><p>&#8220;Drop all the articles about Emacs extensions.&#8221; Just delete them? Are<br/>you at least going to rewrite them and move them to the appropriate<br/>project pages out there? Or are you just going to delete them? Taking<br/>away and not giving back?</p><p>&#8220;Drop all the extensions hosted there.&#8221; Some of the old code has no<br/>other home. Some of the old code is here for the poor sods stuck with<br/>Emacs 20. Are you going to package them for ELPA or Marmalade or<br/>whatever you are going to suggest instead?</p><p>Some of you – like Drew Adams – keep their packages on the wiki. For<br/>those packages, I don&#8217;t see any alternative. Are you going to maintain<br/>his software? Fix his bugs? Develop his features? Unless you are, I<br/>guess you can try and fork his stuff and keep it on whatever other<br/>system you want. But please don&#8217;t suggest taking something away<br/>without giving something in return.</p><p>&#8220;Assemble a team of moderators.&#8221; Indeed. Moderators! Where have you<br/>been hiding for the last ten years! Are you volunteering? I&#8217;m a bit<br/>wary regarding your deletionist tendencies. But perhaps you’d like to<br/>start with a new Table of Contents and new top-down menus where only<br/>the pages you personally vetted and checked are listed. That would be<br/>an awesome thing to do! Of course, there’s no need to delete anything<br/>in order for you to do this. Just arrange the stuff you like and do<br/>it.</p><p>In fact, in order to do it, just do it.</p><p>&#8220;Accept only articles about general Emacs usage and Emacs Lisp<br/>programming.&#8221; How is that going to work – more deleting? I don&#8217;t<br/>know&#8230; I don&#8217;t think you understand where the value of Emacs Wiki<br/>comes from. Perhaps you should write a book about Emacs? Collect a<br/>team of authors and editors and deletionists, take a copy of the wiki,<br/>and just do it right.</p><p>Also, less hyperbole when posting&#8230; :P</p><footer><strong>Alex Schroeder</strong> <cite>Creator and Maintainer of EmacsWiki.org</cite></footer></blockquote>


<p>Here&#8217;s my two cents on the letter:</p>

<ul>
<li><p>The markup format hardly matters. A new wiki engine would give us
better structure of the wiki as whole (like separate discussion pages
for one).</p></li>
<li><p>Dropping it from the wiki doesn&#8217;t mean we&#8217;ll delete the code
forever. What I meant was - dump all the extensions to some archive
for the interested parties and remove them from the wiki. You&#8217;re
basically putting words in my mouth.</p></li>
<li><p>We should care for the bad choices some people made (like Drew - all
my respect to his work). With so many free project hosting services I
don&#8217;t feel we&#8217;ll be taking something away and not giving an alternative.</p></li>
<li><p>No, I don&#8217;t volunteer. Not for this format of the wiki. But I do
volunteer for an alternative matching the outline I&#8217;ve suggested.</p></li>
<li><p>Mocking me is not right response, you know. The problem exists, you
fail to acknowledge it, but I don&#8217;t care that much.</p></li>
<li><p>Alex calls it hyperbole, I call it the simple truth (and many others
would second me).</p></li>
</ul>


<h2>The Plan</h2>

<p>Many people commented that my post is not worth a damn if I&#8217;m not
willing to back it with action. I&#8217;m sad to disappoint my critics - but
I&#8217;ll willing to go the whole nine yards on this one. Here&#8217;s the
outline of my proposal for a new wiki:</p>

<ol>
<li><p>Use <a href="http://moinmo.in/">MoinMoin</a> as the wiki engine. It&#8217;s written in Python and
it&#8217;s GPL software. It doesn&#8217;t use a database, it&#8217;s featureful and
mature. It&#8217;s successfully used by Debian and Ubuntu (and many other
respectable software organizations). I&#8217;m against using a Git backed
systems since it will increase the entry bar for user
participation. I&#8217;m even more against the use of a custom platform
developed specially to serve as the EmacsWiki.</p></li>
<li><p>I&#8217;ll pay for the hosting and the new domain and set up the wiki
initially. I&#8217;d suggest that the new project begins with the domain
emacswiki.net or emacswiki.info and eventually we&#8217;ll assume the old
emacswiki.org domain as well (should the new wiki be successful
enough). Suggestions for another name are welcome in the comments
section.</p></li>
<li><p>I and anyone willing to lend a hand will pick the articles worth
saving from the EmacsWiki and migrate them to the new one. I and
anyone willing to serve as moderator will monitor new contributions
afterwards.</p></li>
<li><p>Wiki entries will have a more or less standard structure and will
adhere and community established guidelines.</p></li>
<li><p>The old EmacsWiki will eventually be retired to another domain such
as old.emacswiki.org (or similar) for historic purposes and benefit of
users of old Emacs versions.</p></li>
</ol>


<p>It this good enough for you to call it an action plan? Comments on it
are most welcome!</p>

<h2>Epilogue</h2>

<p>I&#8217;m sorry that I&#8217;m the guy that has to break the terrible news to all of
the delusional EmacsWiki supporters out there - <em>It&#8217;s not
special. It&#8217;s not a beautiful or unique snowflake. It&#8217;s the same
decaying wiki matter like some many else.</em> I&#8217;m sorry for my terrible
English and my lack of good manners. I&#8217;m sorry I&#8217;m willing do to
something while so many of you are just whining and ignoring the
existing problems.</p>

<p>I think as a member of the Emacs community I&#8217;ve shown my worth so far
and I&#8217;ll willing to do even more. But I cannot carry out such a
massive undertaking on my own. I encourage everyone serious about
helping out to comment the article (here, not on reddit or hacker
news) or send me a personal email.</p>

<p><strong>Update</strong></p>

<p>The new wiki is now available at
<a href="http://wikemacs.org">http://wikemacs.org</a>. It&#8217;s using MediaWiki (it
turned out it had several nice advantages over MoinMoin).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Die EmacsWiki, Die!]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/20/die-emacswiki/"/>
    <updated>2012-03-20T14:49:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/20/die-emacswiki</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>Emacs is slowly, but firmly moving in the right direction with
<a href="http://batsov.com/articles/2011/08/19/a-peek-at-emacs24/">Emacs 24</a>. A
lot of new important features are coming, the release date is nearing,
but there is something worrisome on the otherwise bright Emacs
horizon. It&#8217;s a remnant from the <strong>Dark Emacs Days</strong> and it&#8217;s called
<a href="http://emacswiki.org">EmacsWiki</a>.</p>

<p>Shortly put - <em>EmacsWiki is a blight</em>.</p>

<!--more-->


<h2>A Little Bit of Background</h2>

<p>Here&#8217;s the longer story. EmacsWiki was created by
<a href="http://www.emacswiki.org/alex/">Alex Schroeder</a> (aka <strong>kensanata</strong>)
way back (in 2001) with the goal to become the home of all the Emacs
information one would ever need (both about Emacs in general and its
extensions). I have to admit that this was a noble goal and I know that
Alex had all the right intentions, but unfortunately right intentions
rarely are enough for things to always move in the right
direction.</p>

<p>The software behind the wiki is called
<a href="http://www.oddmuse.org/cgi-bin/oddmuse">OddMuse</a> and it&#8217;s authored by
Alex himself. It&#8217;s pretty basic Perl script and doesn&#8217;t feature db
support. Its motto is <em>No MySQL; no PostgreSQL; no worries.</em> - wish it
were true&#8230;</p>

<h2>The Problems</h2>

<p>The EmacsWiki has several epic problems. Here we go:</p>

<h3>Odd Choice for a Wiki</h3>

<p>Even if in the beginning OddMuse might have been a good choice (Alex
authored it and MediaWiki didn&#8217;t exist back then), it hasn&#8217;t been a
good choice for quite a while. There are much better solutions in
terms of markup support (Markdown anyone?), usability and
performance. Some of the features of the wiki are simply abhorring -
like the lack of user access control; anyone can enter any user name and
edit the wiki&#8230; Yep, this is not a joke&#8230;</p>

<h3>Moderators, Where Art Though?</h3>

<p>I&#8217;ve never seen so much junk in a wiki in my entire life (and I&#8217;ve
seen the wikis of 15-year enterprise systems). When I was
an Emacs beginner I often consulted the wiki for advice - even then I
noticed that there were some suspicious practices being suggested
there. Now I can say with certainly that much of the content there is
total bullshit - it&#8217;s mostly written by people with very little
knowledge of Emacs (not to mention good Emacs practices). The articles
are littered with crappy advice confusing beginners, have little
structure and are filled with ridiculous questions (questions in an
wiki???). All of this would have been avoided had the EmacsWiki had a
team of moderators to keep shitty contributions at bay. Alas, such a
team does not exist (or does a very crappy job of it).</p>

<h3>Software Distribution Medium</h3>

<p>As crazy as it seems a lot of people are using the wiki as a software
distribution mechanism. Instead of hosting their projects in version
control (say <a href="http://github.com">GitHub</a>) they develop stuff locally,
upload them to the wiki and say that this is the canonical way to
obtain their software. Needless to say - this is a horrible, horrible
practice. I&#8217;ve often encountered on the wiki source files authored by
someone, then edited by 10 different guys, that have a tendency to add
their names to the copyrights sections instead of thinking how their
poor users will understand what exactly was changed in these
files. Sometimes the authors themselves are to blame (for being
fucking lazy), but often someone just copies a snapshot of a project
from version control and uploads it to the wiki, creating problems of
epic proportions for the maintainers, who start receiving bugs about
stuff they never developed in the first place.</p>

<p>For the love of God - take your project(s) to GitHub and develop them
there with pleasure, under the scrutiny of an active and passionate
developer community. Wikis should be used for documentation only!</p>

<p>Tools like audo-install (an extension that supports installing
software from EmacsWiki) should never have existed. el-get should not
have added support for the installation of stuff from the wiki. As
long as such practices are tolerated they will not stop.</p>

<p>Need I remind you that we&#8217;re now living in the era of
<a href="http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/">package.el</a>
and distributed version control (Git, Mercurial, Bazaar)? Act accordingly!</p>

<h3>Jack of All Trades</h3>

<p>Documenting each and every Emacs project is an impossible task. And it
should not be centralized. Each project should be responsible for
producing its own up-to-date easy-to-follow crystal-clear
documentation. By putting everything in one place you&#8217;re just making
sure you&#8217;ll end up with a pile of out-of-date confusing unstructured
ramblings (the EmacsWiki proves my point).</p>

<p>An EmacsWiki shouldn&#8217;t list tips on the use of external projects -
such tips should be in the project&#8217;s wiki. An EmacsWiki should
document the core Emacs experience and customizations only.</p>

<h2>The Solution</h2>

<p>Kill the EmacsWiki! (may it be reborn from its ashes)</p>

<h3>Action Plan for The Maintainers</h3>

<p>Drop the current format of the wiki - use something standard like
MediaWiki instead of OddMuse. Drop all the articles about Emacs
extensions. Drop all the extensions hosted there. Assemble
a team of moderators. Accept only articles about general Emacs usage
and Emacs Lisp programming.</p>

<h3>Action Plan for Emacs Extensions Authors</h3>

<p>If you&#8217;ve got a normal project hosted on GitHub (or a similar service)
- delete everything about your project on the wiki and don&#8217;t respond
to any bug requests regarding modified copies of your sources
distributed via EmacsWiki.</p>

<p>If you&#8217;ve got a project hosted on the EmacsWiki - there is still
a chance for you to redeem yourself. Migrate your project(s) to GitHub
(you&#8217;ll thank me later for that). Use their version control, their
issue tracker, their wiki system. Start distributing your project via
Marmalade or MELPA (<code>package.el</code> repos). Your life will become much nicer and
the visibility of your project and the possibility to attract new
developers will be significantly boosted. GitHub is a project hosting
solution, the EmacsWiki is not.</p>

<h3>The Regular Users</h3>

<p>Boycott the wiki (unless the maintainers take actions)! Submit
documentation only to the official project pages. Ignore projects
hosted on the EmacsWiki. (or migrate them to GitHub if they seem
orphaned and try to rekindle them)</p>

<h2>Epilogue</h2>

<p>Do we need an EmacsWiki? Certainly we do! But we need a <strong>real</strong>
EmacsWiki and not this abomination that is currently a detriment to
new Emacs users, instead of help. The wiki needs restructuring, but
first it needs to die. I hope you&#8217;ll see the truth in my words and
take action instead of commenting how outrageous my claims are. Do
something meaningful for a change - save a project from the EmacsWiki,
contribute documentation to an official project&#8217;s wiki, package
something on Marmalade&#8230;</p>

<p>Die, Die EmacsWiki! I&#8217;ll be seeing you in hell&#8230;</p>

<p><strong>Update</strong></p>

<p>This post stirred a huge discussion online and as a result there is
now another Emacs wiki out there. The new wiki is available at
<a href="http://wikemacs.org">http://wikemacs.org</a>. It&#8217;s using MediaWiki (it
turned out it had several nice advantages over MoinMoin).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #5: Save Buffers Automatically on Buffer or Window Switch]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/"/>
    <updated>2012-03-08T15:58:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch</id>
    <content type="html"><![CDATA[<p>When I program in Java I usually leave the comfort of Emacs and use
IntelliJ IDEA instead (for various reasons that are irrelevant to this
post). IDEA has one particularly nice feature - &#8220;auto-save on focus
lost&#8221;. Basically you never have to hit <code>C-s</code> there explicitly, because
any time your current editor window loses focus its contents get
flushed to the disk automatically. Implementing something exactly the
same in Emacs is impossible (at least in Emacs Lisp), but we can
create a solution that is similar in spirit at least - we can
auto-save buffers when we switch the Emacs window or the current
buffer (which are more or less the most popular ways to change editing
focus in Emacs). This is easy to achieve in Emacs Lisp:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;; use shift + arrow keys to switch between visible buffers</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;windmove</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">windmove-default-keybindings</span> <span class="ss">&#39;super</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; automatically save buffers associated with files on buffer switch</span>
</span><span class='line'><span class="c1">;; and on windows switch</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">switch-to-buffer</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">save-buffer-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">other-window</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-up</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-down</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-left</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">windmove-right</span> <span class="p">(</span><span class="nv">before</span> <span class="nv">other-window-now</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="nv">buffer-file-name</span> <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously this code could have been written in a more compact manner
with the use of a macro, but I&#8217;ve decided to use this more verbose
variant for the sake of simplicity. We assume that you want to
auto-save your current work (buffer) when you switch to a new buffer
or to a new window (with either <code>C-x o</code> (<code>other-window</code>) or a
<code>windmove</code> command).</p>

<p>XEmacs has a hook called <code>deselect-frame-hook</code> that can take the
concept even further, but it&#8217;s absent from GNU Emacs.</p>

<p>So, that&#8217;s all for this tip, folks! I hope you&#8217;ve enjoyed it!
Personally I find it much more useful that the standard auto-save
mechanism in Emacs. And one more thing -
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> naturally
enables this functionality by default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Tip #2: Get a List of All Rake Tasks]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/08/ruby-tip-number-2-get-a-list-of-all-rake-tasks/"/>
    <updated>2012-03-08T15:28:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/08/ruby-tip-number-2-get-a-list-of-all-rake-tasks</id>
    <content type="html"><![CDATA[<p>Many people are having trouble remembering all the rake tasks defined
in a particular project&#8217;s <code>Rakefile</code> (especially if they hadn&#8217;t
authored it). This is quite normal given the fact that Rails&#8217;s
Rakefile, for instance, defines 39 tasks (as of version
3.2.2). Personally I never memorize anything, but the most basic rake
tasks - for everything else there is the <code>rake -T</code> (or <code>rake --tasks</code>)
command. Here&#8217;s the command in action for Octopress&#8217;s Rakefile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake -T
</span><span class='line'>rake clean                 <span class="c"># Clean out caches: .pygments-cache, .gist-cache, .sass-cache</span>
</span><span class='line'>rake copydot<span class="o">[</span><span class="nb">source</span>,dest<span class="o">]</span>  <span class="c"># copy dot files for deployment</span>
</span><span class='line'>rake deploy                <span class="c"># Default deploy task</span>
</span><span class='line'>rake gen_deploy            <span class="c"># Generate website and deploy</span>
</span><span class='line'>rake generate              <span class="c"># Generate jekyll site</span>
</span><span class='line'>rake install<span class="o">[</span>theme<span class="o">]</span>        <span class="c"># Initial setup for Octopress: copies the default theme into the path of Jekyll&#39;s generator.</span>
</span><span class='line'>rake integrate             <span class="c"># Move all stashed posts back into the posts directory, ready for site generation.</span>
</span><span class='line'>rake isolate<span class="o">[</span>filename<span class="o">]</span>     <span class="c"># Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much quicker.</span>
</span><span class='line'>rake list                  <span class="c"># list tasks</span>
</span><span class='line'>rake new_page<span class="o">[</span>filename<span class="o">]</span>    <span class="c"># Create a new page in source/(filename)/index.markdown</span>
</span><span class='line'>rake new_post<span class="o">[</span>title<span class="o">]</span>       <span class="c"># Begin a new post in source/_posts</span>
</span><span class='line'>rake preview               <span class="c"># preview the site in a web browser</span>
</span><span class='line'>rake push                  <span class="c"># deploy public directory to github pages</span>
</span><span class='line'>rake rsync                 <span class="c"># Deploy website via rsync</span>
</span><span class='line'>rake set_root_dir<span class="o">[</span>dir<span class="o">]</span>     <span class="c"># Update configurations to support publishing to root or sub directory</span>
</span><span class='line'>rake setup_github_pages    <span class="c"># Set up _deploy folder and deploy branch for Github Pages deployment</span>
</span><span class='line'>rake update_source<span class="o">[</span>theme<span class="o">]</span>  <span class="c"># Move source to source.old, install source theme updates, replace source/_includes/navigation.html with source.old&#39;s navigation</span>
</span><span class='line'>rake update_style<span class="o">[</span>theme<span class="o">]</span>   <span class="c"># Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom</span>
</span><span class='line'>rake watch                 <span class="c"># Watch the site and regenerate when it</span>
</span><span class='line'>changes
</span></code></pre></td></tr></table></div></figure>


<p>Not only did you get a list of all the tasks, but nice descriptions of
the tasks as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #4: Repeat Last Command]]></title>
    <link href="http://bbatsov.github.com/articles/2012/03/08/emacs-tip-number-4-repeat-last-command/"/>
    <updated>2012-03-08T15:09:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/03/08/emacs-tip-number-4-repeat-last-command</id>
    <content type="html"><![CDATA[<p>Some times you&#8217;d want to quickly repeat an Emacs command several times and
most of the time it won&#8217;t have a convenient keybinding you can use to
do this. Enter <code>C-x z</code> (<code>repeat</code>) - it simply repeats the most
recently executed command. And the best part? After you&#8217;ve pressed
<code>C-x z</code> once you can continue repeating the last command simply by
pressing <code>z</code>. Vi(m) users will probably note that this is quite similar
to the <code>.</code> command there.</p>

<p>For instance - if you want to execute the <code>er/expand-region</code> command
(part of the
<a href="https://github.com/magnars/expand-region.el">expand-region package</a>)
a few times you can do it like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>M-x er/expand-region
</span><span class='line'>C-x z
</span><span class='line'>z
</span><span class='line'>z
</span><span class='line'>z</span></code></pre></td></tr></table></div></figure>


<p>Neat, ah?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Package Management in Emacs: The Good, the Bad and the Ugly]]></title>
    <link href="http://bbatsov.github.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/"/>
    <updated>2012-02-19T12:18:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>Let&#8217;s face it - although a vanilla Emacs installation is quite
powerful almost nobody is using Emacs without a pile of add-ons. And
managing those add-ons is quite frankly a pain in the ass. Traditional
options included installing Emacs add-ons via the operating system&#8217;s
package manager (if available), downloading <code>.el</code> files from various
locations (everybody hates packages distributed only on Emacs Wiki
with no canonical version control repo) and simply sticking them on
the <code>load-path</code>, etc. It&#8217;s more than obvious that such solutions are
less than ideal.</p>

<p>For instance if you&#8217;re installing Emacs add-ons via a package manager
and you have to change OSes (or machines) you&#8217;re mostly fucked. On the
other hand piling files manually in <code>.emacs.d</code> is equal to hell in the
version and dependency tracking department. There has to be a better
way, right? Wouldn&#8217;t it be nice if Emacs had its own package manager
similar to the likes of <code>homebrew</code>, <code>apt</code> or <code>yum</code>?</p>

<p><a href="http://batsov.com/articles/2011/08/19/a-peek-at-emacs24/">Emacs 24</a>
finally introduces such a tool - its name is <code>package.el</code> (very
original, right?) and it&#8217;s promise is to make you&#8217;re lives a bit
easier. Does it manage to deliver on that promise? We&#8217;ll see that in a bit&#8230;</p>

<!--more-->


<h2>Package management with package.el</h2>

<p><code>package.el</code> is bundled with Emacs 24, but it&#8217;s not bound to Emacs
24. Before it became part of Emacs it was an external package, known
as ELPA (I guess that stood for Emacs Lisp Package Manager or
something similar). So even if you&#8217;re an Emacs 23 user you can copy
the latest version of <code>package.el</code> from
<a href="http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el">here</a>
and enjoy it. At this point you&#8217;ll have to do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;package</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">package-initialize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Put this snippet of code near the beginning of your Emacs config,
since you&#8217;ll definitely want packages installed via <code>package.el</code> to be
initalized <em>before</em> you start tweaking them.</p>

<p>What <code>package.el</code> basically does is that it connects to a list of
package repositories, retrieves the list of the packages there,
presents it to you in a interactive fashion and lets you install the
packages you like (of course you can also remove the once you don&#8217;t
like). <code>package.el</code> understands the dependencies between packages and
if one package requires others to run they will be installed
automatically (which is really neat).</p>

<p>The magic starts with the command <code>M-x package-list-packages</code>. At this
point you should see something in the lines of this.</p>

<p><img src="http://bbatsov.github.com/images/articles/packages-list.png"></p>

<p>You can navigate the list of packages, mark the ones you want to
install with the &#8220;i&#8221; key or the ones you want removed with the &#8220;d&#8221; key
and when you&#8217;re done you can press the &#8220;x&#8221; key to execute the
scheduled actions.</p>

<p>Initially <code>package.el</code> didn&#8217;t provide the option to update a package,
but that should be fixed in recent Emacs builds. According to this
<a href="http://lists.gnu.org/archive/html/emacs-devel/2011-09/msg00371.html">thread</a>
you can even update all of the installed packages by using the &#8220;U&#8221; key
in the packages list view (I guess that a small &#8220;u&#8221; would update only
one package). Unfortunately my build is lacking those capabilities so
I cannot comment of their usability.</p>

<p>You&#8217;d probably notice that your list of available packages is not
particularly long. That&#8217;s because the official Emacs 24 package
repository has a strict licensing (and source code) requirements to
include a package there. Luckily there are a number of
community-maintained <code>package.el</code> repos around with much more relaxed
requirements. Probably the most popular of them is
<a href="http://marmalade-repo.org/">Marmalade</a>, created by
<a href="http://nex-3.com/">Nathan Weizenbaum</a> of Sass and Haml fame. You can
include it in your <code>package-archives</code> list like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;package-archives</span>
</span><span class='line'>             <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;marmalade&quot;</span> <span class="o">.</span> <span class="s">&quot;http://marmalade-repo.org/packages/&quot;</span><span class="p">)</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Marmalade provides a web based UI for package upload and search (both
quite buggy unfortunately) and the ability to share the maintenance of
a package between several people, who&#8217;ll be able to upload new version
of the package. There&#8217;s also a Emacs Lisp Marmalade tool, that allows
you to submit packages directly from Emacs.</p>

<p>Using the <code>package.el</code> UI is ok if you&#8217;re a casual Emacs user, but
what if you have a custom Emacs configuration, stored under version
control, that you&#8217;d like to instantly deploy on any OS/machine (like
Emacs Prelude). Here in play comes <code>package.el</code>&#8217;s programmer
interface. In
<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a> I use the
following code to install a list of required packages automatically on Emacs
startup (if necessary):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="nv">prelude-packages</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nv">ack-and-a-half</span> <span class="nv">auctex</span> <span class="nv">clojure-mode</span> <span class="nv">coffee-mode</span> <span class="nv">deft</span> <span class="nv">expand-region</span>
</span><span class='line'>                   <span class="nv">gist</span> <span class="nv">groovy-mode</span> <span class="nv">haml-mode</span> <span class="nv">haskell-mode</span> <span class="nv">inf-ruby</span>
</span><span class='line'>                   <span class="nv">magit</span> <span class="nv">magithub</span> <span class="nv">markdown-mode</span> <span class="nv">paredit</span> <span class="nv">projectile</span> <span class="nv">python</span>
</span><span class='line'>                   <span class="nv">sass-mode</span> <span class="nv">rainbow-mode</span> <span class="nv">scss-mode</span> <span class="nv">solarized-theme</span>
</span><span class='line'>                   <span class="nv">volatile-highlights</span> <span class="nv">yaml-mode</span> <span class="nv">yari</span> <span class="nv">zenburn-theme</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;A list of packages to ensure are installed at launch.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">prelude-packages-installed-p</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">p</span> <span class="nv">in</span> <span class="nv">prelude-packages</span>
</span><span class='line'>        <span class="nb">when</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">package-installed-p</span> <span class="nv">p</span><span class="p">))</span> <span class="nb">do</span> <span class="p">(</span><span class="nb">return</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="no">t</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">prelude-packages-installed-p</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;; check for new packages (package versions)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;%s&quot;</span> <span class="s">&quot;Emacs Prelude is now refreshing its package database...&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">package-refresh-contents</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;%s&quot;</span> <span class="s">&quot; done.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;; install the missing packages</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">dolist</span> <span class="p">(</span><span class="nv">p</span> <span class="nv">prelude-packages</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">package-installed-p</span> <span class="nv">p</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">package-install</span> <span class="nv">p</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">provide</span> <span class="ss">&#39;prelude-packages</span><span class="p">)</span>
</span><span class='line'><span class="c1">;;; prelude-packages.el ends here</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code check if all of the packages in the list are installed and
if any of them are not installed if refreshes the local package
database (in the case a required package for recently added to the remote
repo) and installs them.</p>

<p>To be able to publish a package to Marmalade (or another repo) it
should comform a standardized structure. A single-file package might look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;;; sass-mode.el --- Sass major mode</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Copyright 2007-2010 Nathan Weizenbaum</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Author: Nathan Weizenbaum &lt;nex342@gmail.com&gt;</span>
</span><span class='line'><span class="c1">;; URL: http://github.com/nex3/sass-mode</span>
</span><span class='line'><span class="c1">;; Version: 3.0.20</span>
</span><span class='line'><span class="c1">;; Package-Requires: ((haml-mode &quot;3.0.20&quot;))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Code goes here</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; sass-mode.el ends here</span>
</span></code></pre></td></tr></table></div></figure>


<p>A multi-file package should have an additional file named
<code>&lt;name&gt;-pkg.el</code> that should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">define-package</span> <span class="s">&quot;sass-mode&quot;</span> <span class="s">&quot;3.0.20&quot;</span>
</span><span class='line'>                <span class="s">&quot;Sass major mode&quot;</span>
</span><span class='line'>                <span class="o">&#39;</span><span class="p">((</span><span class="nv">haml-mode</span> <span class="s">&quot;3.0.20&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Bad and the Ugly</h2>

<p>While <code>package.el</code> is great on paper, for it to really take off some
problems need to be resolved.</p>

<h4>Updating should be easy</h4>

<p>One of the best features of OS package managers is that they make it
really easy to update all of the installed packages to their latest
versions. Currently <code>package.el</code> doesn&#8217;t support that (at least to my
knowledge), with the exception of the &#8220;U&#8221; key in the list packages
view. This seems to me like a pretty basic feature and I (and everyone
I&#8217;ve talked with) would really like to see it in Emacs 24 final.</p>

<h4>Too much is riding on Marmalade</h4>

<p>Marmalade has become extremely important in the recent months and the
list of packages there is growing every day. This would have normally
filled me with great joy, if it weren&#8217;t for a few problems.</p>

<p>It seems that the project isn&#8217;t getting much attention from its maintainer
(which is understandable, given the fact that he&#8217;s maintaining several
high profile projects + the fact he&#8217;s a full time Google
employee). As a result Marmalade is quite buggy (especially in the UI
department) and is missing key features, like the ability to contact a
package maintainer. At some point it was even lacking the ability to
delete a package. Uploads don&#8217;t work reliably there, package refresh
sometimes yields http errors that require manual <code>M-x
package-refresh-contents</code> and from time to time there is even downtime
of the service.</p>

<p>The fact that its backend is written in Node.js (great technology, but
not widely understood for now) and hosted on Google
Code, doesn&#8217;t improve the situation a lot. A Ruby or Python based
solution hosted on GitHub would certainly gain much more traction in
the community (and I&#8217;m planning to start work on one soon).</p>

<h4>Scarce documentation</h4>

<p><code>package.el</code> is light on the documentation and you&#8217;ll have to explore
its source code if you want to implement its required interface
(which luckily is very simple). I hope this will change by the release
of Emacs 24.</p>

<h4>Too few package authors care about package.el</h4>

<p>Package authors rarely tag versions that could be uploaded to a
<code>package.el</code> compatible repo and from time to time don&#8217;t follow the
basic structure required. I always contact package authors to let them
know of such shortcomings in their packages and so should you.</p>

<h2>Alternatives</h2>

<p><a href="https://github.com/dimitri/el-get">el-get</a> is another popular Emacs
add-ons management solution that has recently become popular.</p>

<p>el-get allows you to install and manage elisp code for Emacs. It
supports lots of differents types of sources (git, svn, apt, elpa,
etc) and is able to install them, update them and remove them, but
more importantly it will init them for you.</p>

<p>That means it will require the features you need, load the necessary
files, set the Info paths so that <code>C-h i</code> shows the new documentation
you now depend on, and finally call your own <code>:post-init</code> function for
you to setup the extension. Or call it a package.</p>

<p>el-get is inherently troublesome piece of software on Windows machines
and was originally designed to make it simple to obtain the latest
versions of packages from git - a practice which I profoundly
dislike. Master package branches are often buggy (but there are also
authors that never tag versions and rely on the rolling release model)
and I&#8217;m generally supportive of the stable version releases. While
some view it as a nice addition to <code>package.el</code> I feel that el-get is
too low level tool (in its approach to the problem) and should be
avoided.</p>

<p><strong>Update</strong></p>

<p>A few hours after I posted this article it got a nice lengthy comment
by el-get&#8217;s author. Since I believe, that the comment is quite
interesting I&#8217;m adding it here without any alterations.</p>

<blockquote><p>As the author of el-get, good article!  The Emacs extension situation<br/>is far from ideal and needs hard critics so that work is done to<br/>improve it.</p><p>I now want to share with you some of the features that are currently<br/>only available in the development branch of el-get (soon to be<br/>released as 4.1): you can now easily checkout a stable branch from a<br/>git repository (thanks to the :checkout property) and you can even<br/>setup which checksum you want installed.So when using git, the<br/>checksum is in fact a revision, when using emacswiki you have to<br/>compute the checksum (doing M-x el-get-checksum) and register it in<br/>your el-get-sources setup, then if the file change on emacswiki el-get<br/>will refuse loading it (hopefully until you&#8217;ve done your review then<br/>updated the checksum).So while I perfectly understand your reserve<br/>toward depending on el-get, I believe that your concerns are being<br/>solved now.I would like to believe that authors of emacs lisp scripts<br/>would take the time to consider formatting their sources for<br/>package.el. Today it&#8217;s far from granted, so by choosing ELPA you miss<br/>a lot of things. And for the situation to change you need to have the<br/>authors willing to package their extensions, or you have to fork their<br/>work. With el-get you have access to 536 packages from the get-go, and<br/>all of emacswiki (that&#8217;s currently more than 1700 packages) after<br/>you&#8217;ve done M-x el-get-emacswiki-refresh. As of writing this comment,<br/>my M-x el-get-package-list contains 2106 packages ready to install,<br/>almost all with descriptions.el-get is about social packaging where<br/>it&#8217;s easy to prepare a recipe for a package, whatever distribution<br/>means its author picked. Then you can share that recipe very easily,<br/>for example with el-get on github where we&#8217;ll be happy to add your<br/>work and have it installed by default when users either install el-get<br/>or do M-x el-get-self-update.As for windows support, it all depends on<br/>the packages you want to install. Most of them just work out of the<br/>box, being a single emacs lisp file (.el). Some of them require to<br/>have extra tools installed, from git or svn or mercurial to make and<br/>autoconf. That&#8217;s only how the authors are shipping their extensions<br/>though, el-get is only providing for an integrated way to get at it.<br/>We have accepted several improvements so that the windows experience<br/>matches the others OS, and we consider windows a first class citizen<br/>here.</p><footer><strong>Dimitri Fontaine</strong> <cite>Author of El-get</cite></footer></blockquote>


<h2>Epilogue</h2>

<p><code>package.el</code> is the future of Emacs add-on management - of that I&#8217;m
quite certain. It&#8217;s far from perfect, but even in its present flawed
form it has already simplified the life of many Emacs users
immensely. I urge all of you to stop distributing Emacs packages via
sources such as the Emacs Wiki and to put a heavy emphasis on
<code>package.el</code>. Make your packages compatible with it, upload them to a
community maintained repo (or the official if possible) and keep them
up-to-date. Your users will love you for that!</p>

<p>I&#8217;d like to see a replacement to Marmalade in the future as well. A
more robust and polished solution, maintained by a team of several
people. Hopefully that moment is not that far in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color Theming in Emacs: Reloaded]]></title>
    <link href="http://bbatsov.github.com/articles/2012/02/19/color-theming-in-emacs-reloaded/"/>
    <updated>2012-02-19T12:17:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/02/19/color-theming-in-emacs-reloaded</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>If there is something that people love as much as tweaking their
editing configurations it&#8217;s probably the selection of color themes. A
good color theme can make your work much more pleasant and a bad one
that literally impair your vision. It&#8217;s a fact of life that I&#8217;m a firm
supporter of low-contrast color themes with dark backgrounds - I find
them easy on the eyes and I feel that they don&#8217;t strain the eyes as
much as most themes. I&#8217;ve even ported a couple of popular themes to
Emacs - <a href="https://github.com/bbatsov/zenburn-emacs">Zenburn</a> and
<a href="https://github.com/bbatsov/solarized-emacs">Solarized</a>.</p>

<p>In this short article we&#8217;ll see how color theming has changed in Emacs
24 and I&#8217;ll share with you a few tips on theme creation and
distribution.</p>

<!--more-->


<h2>Color Theming in Emacs 24</h2>

<p>Prior to Emacs 24 the most popular way to incorporate custom color
themes into Emacs was the
<a href="http://www.emacswiki.org/emacs/ColorTheme">color-theme package</a>. While
it usually got the job done it had some problems that I won&#8217;t be
discussing here and more importantly - it&#8217;s a third-party package,
that&#8217;s not part of Emacs proper.</p>

<p><a href="http://batsov.com/articles/2011/08/19/a-peek-at-emacs24/">Emacs 24</a>
finally introduced a new standard way of dealing with color themes
(based on Emacs&#8217;s built-in customize facility). While it doesn&#8217;t have
a proper name (as far as I know) it&#8217;s commonly referred to as the
<code>deftheme</code> facility, since <code>deftheme</code> is the name of the macro you&#8217;d
use to create such a theme. ( <code>deftheme</code> has actually been around
since Emacs 23, but it was heavily improved in Emacs 24 )</p>

<p>Emacs 24 comes with a selection of built-in themes that you can choose
from, so you&#8217;re no longer bound to the default theme (which I find
quite ugly). To choose a new theme just do a <code>M-x load-theme</code> (tab
completion is available for the names of the available themes). At
this point you can give the command a try with the <code>tango</code> theme. If you
like a theme so much that you&#8217;d want to use it all the time you can
put in your Emacs configuration (<code>.emacs</code> or <code>init.el</code> for instance) like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">load-theme</span> <span class="ss">&#39;theme-name</span> <span class="no">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;d like to return to the default-theme just do a <code>M-x disable-theme</code>.</p>

<p>How do you create a <code>deftheme</code> theme? Quite simply actually - just do
a &#8220;M-x customize-create-theme&#8221;. You&#8217;ll be presented with an UI
prompting you for a theme name, description and faces. After you save
the theme a file called <code>name-theme.el</code> will be written on your
filesystem. Here&#8217;s its skeleton:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">deftheme</span> <span class="nv">demo</span>
</span><span class='line'>  <span class="s">&quot;Demo theme&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">custom-theme-set-faces</span>
</span><span class='line'> <span class="ss">&#39;demo</span>
</span><span class='line'> <span class="c1">;;; list of custom faces</span>
</span><span class='line'> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">provide-theme</span> <span class="ss">&#39;demo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There was also an online theme generator
<a href="http://elpa.gnu.org/themes/">here</a>, but it seems to be down at the
moment.</p>

<p>Personally I dislike customize a lot, so when I needed to create a
Emacs 24 theme for the first time I&#8217;ve just opened the source code of
the built-in tango theme and used it as a reference.</p>

<p>Once you&#8217;ve created the new theme you&#8217;ll have to drop it in a folder
that&#8217;s on the <code>custom-theme-load-path</code>. I&#8217;d suggest the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;custom-theme-load-path</span> <span class="s">&quot;~/.emacs.d/themes&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&#8217;re an <a href="https://github.com/bbatsov/prelude">Emacs Prelude</a>
user you&#8217;re already covered. This folder exists and is automatically
added to <code>custom-theme-load-path</code> by Prelude, so all you have to do is
drop there the themes you&#8217;d want to try out.</p>

<p>You may find the
<a href="http://julien.danjou.info/software/rainbow-mode">rainbow-mode</a> useful
when developing color themes. If fontifies strings that represent
color codes according to those colors. The mode is known to be a great
addition to css-mode, but I find it very helpful with color theme
development as well. It&#8217;s also included (and enabled) in Prelude by
default. Here you can see it in action.</p>

<p><img src="http://bbatsov.github.com/images/articles/rainbow-mode.png"></p>

<p>The Emacs package manager <code>package.el</code> (formerly known as ELPA) is
gaining a lot of popularity lately and the community
<a href="http://marmalade-repo.org/">Marmalade</a> repository already houses a few
Emacs 24 themes that you can install from there. If you&#8217;re developing
a theme that you&#8217;d like to submit to Marmalade it&#8217;s imperative that
the theme modifies the <code>custom-theme-load-path</code> in an <code>autoload</code> -
otherwise it won&#8217;t be of much use. Add the following snippet (or
something similar) before the <code>provide-theme</code> line if your custom
theme:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="c1">;;;###autoload</span>
</span><span class='line'><span class="p">(</span><span class="nb">when</span> <span class="nv">load-file-name</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">add-to-list</span> <span class="ss">&#39;custom-theme-load-path</span>
</span><span class='line'>               <span class="p">(</span><span class="nv">file-name-as-directory</span> <span class="p">(</span><span class="nv">file-name-directory</span> <span class="nv">load-file-name</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;d also advise you follow the proper naming convention
<code>name-theme.el</code> so that it&#8217;s apparent that your theme is <code>deftheme</code>
compatible.</p>

<p>Oh, and one more thing - porting themes from color-theme to deftheme is
really simple (just have a look at the old and the new version of
Zenburn in its repo), so you should really consider porting all the
themes you maintain to <code>deftheme</code>.</p>

<h1>Epilogue</h1>

<p>Color theming in Emacs has never been easier. It&#8217;s time to kill
<code>color-theme</code> once and for all. If you&#8217;ve ever developed a color theme
for it I urge you to convert it to the <code>deftheme</code> format and upload it
to Marmalade.</p>

<p>And if you&#8217;ve never developed a color theme for Emacs because you were
afraid it was too hard - now is the time to do it.</p>
]]></content>
  </entry>
  
</feed>
