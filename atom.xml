<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[(think)]]></title>
  <link href="http://bbatsov.github.com/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2013-07-04T16:33:30+03:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #6: Attributes Redux]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/04/the-elements-of-style-in-ruby-number-6-attributes-redux/"/>
    <updated>2013-07-04T15:36:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/04/the-elements-of-style-in-ruby-number-6-attributes-redux</id>
    <content type="html"><![CDATA[<p>Today we&#8217;ll talk about attributes in Ruby.</p>

<p>Let&#8217;s start with the following rule from the
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Use the <code>attr</code> family of functions to define trivial accessors or mutators.</p></blockquote>

<p>Everyone who&#8217;s coded a bit of Ruby knows it&#8217;s preferable to generate
trivial reader and writer methods via some metaprogramming magic
instead of writing them by hand. The methods from <code>Module</code> <code>attr</code>,
<code>attr_reader</code>, <code>attr_writer</code> and <code>attr_accessor</code> do exactly that kind
of magic. Here&#8217;s an example using <code>attr_reader</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first_name</span>
</span><span class='line'>    <span class="vi">@first_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_name</span>
</span><span class='line'>    <span class="vi">@last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s <code>attr_writer</code> in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_writer</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>attr_accessor</code> combines the two:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="vi">@name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty sure none of you has learned anything new at this point. Now we start with the fun part&#8230;</p>

<p>How many of you know how <code>attr</code> behaves? Are you totally sure? Let&#8217;s
see what the style guide says about it:</p>

<blockquote><p>Avoid the use of <code>attr</code>. Use <code>attr_reader</code> and <code>attr_accessor</code> instead.</p></blockquote>

<p><code>attr</code>&#8217;s behavior changed between Ruby 1.8 and 1.9. In Ruby 1.8 <code>attr</code>
created a single <em>reader</em> method. With an optional second boolean argument it
created both a <em>reader</em> and a <em>writer</em> method (a la <code>attr_accessor</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.8</span>
</span><span class='line'><span class="c1"># same as attr_reader :something</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:something</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># creates a single attribute accessor (deprecated in 1.9) - same as attr_accessor :something</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:something</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># can&#39;t do this</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:one</span><span class="p">,</span> <span class="ss">:two</span><span class="p">,</span> <span class="ss">:three</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you cannot pass multiple attribute names to <code>attr</code> in Ruby 1.8.</p>

<p>In Ruby 1.9 calling <code>attr</code> with an attribute name and a boolean is
deprecated and it now behaves a lot more like <code>attr_reader</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.9</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:one</span><span class="p">,</span> <span class="ss">:two</span><span class="p">,</span> <span class="ss">:three</span> <span class="c1"># behaves as attr_reader</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given all this facts it&#8217;s not a surprise that so many people think
it&#8217;s a bad idea to use <code>attr</code>. I guess if the design of that portion
of the API were up to me I&#8217;d have made <code>attr</code> behave like
<code>attr_accessor</code> from day 1. The name of <code>attr_accessor</code> is a bit of a
misnomer since <code>accessor</code> is hardly a synonym for <strong>reader and
writer</strong>. Anyways, this is not of particular importance. Off to the
next item on our agenda for today.</p>

<p>Is this something that should have been defined with <code>attr_reader</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'>  <span class="vi">@something_else</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically it call comes down to whether this is a trivial reader method or not.
Some people would argue that because the name of the instance variable
and the name of the method are not the same - it&#8217;s not. I&#8217;d argue the
opposite case - it is! The name of the method does not change the
semantics. In essence you&#8217;re simply in need of an alias for the
<em>default</em> attribute reader method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:something_else</span>
</span><span class='line'><span class="n">alias_method</span> <span class="ss">:something</span><span class="p">,</span> <span class="ss">:something_else</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boolean attributes are a bit special, since generally we&#8217;d like to
have a <code>?</code> at the end of predicate method names, but this cannot be done with
<code>attr_reader/attr_accessor</code>. Some people would simple hand-code such
methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something?</span>
</span><span class='line'>  <span class="vi">@something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;d employ <code>alias_method</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:something</span>
</span><span class='line'><span class="n">alias_method</span> <span class="ss">:something?</span><span class="p">,</span> <span class="ss">:something</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wouldn&#8217;t call one style necessary good or bad - it&#8217;s more of a personal preference.</p>

<p>One final note - you should use <code>attr_</code> only for trivial reader and writer methods (trivial means that
they do not need any defensive copying or pre-update checks).</p>

<p>Consider this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># attr_reader generates code like this</span>
</span><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'>  <span class="vi">@something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would expose <code>@something</code> to external modifications if it&#8217;s a
mutable object. To shield yourself from this you can use defensive
copying (or freezing when applicable):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># defensive copying in action</span>
</span><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'>  <span class="vi">@something</span><span class="o">.</span><span class="n">dup</span> <span class="c1"># return a copy of @something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same goes for attributes writers. If you have an <code>age</code> attribute and you
want to enforce that it should be a positive number you&#8217;d generally roll your
own writer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">age</span><span class="o">=</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">fail</span> <span class="s1">&#39;Age should be a positive number!&#39;</span> <span class="k">unless</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This post has become way too long, so I&#8217;ll be wrapping it up. I hope
you&#8217;ve found my musing on the subject of attributes useful.</p>

<p>As usual I&#8217;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>

<p><strong>P.S.</strong> Happy 4th of July to all my American readers! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #5: Readability of long numeric literals]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/02/the-elements-of-style-in-ruby-number-5-readability-of-long-numeric-literals/"/>
    <updated>2013-07-02T15:01:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/02/the-elements-of-style-in-ruby-number-5-readability-of-long-numeric-literals</id>
    <content type="html"><![CDATA[<p>Today&#8217;s topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Add underscores to large numeric literals to improve their readability.</p></blockquote>

<p>Most of the programs we write feature a substantial number of numeric
literals(e.g. <code>10</code>, <code>0.34</code>, <code>0b1010</code>, <code>0123</code>, <code>0xCAFE</code>). There is nothing
strange or unusual about that. From time to time, however, those literals are pretty long:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAX_SIZE = 10000000000
</span><span class='line'>DEVIATION = 0.2343434343
</span><span class='line'>BIT_MASK = 0b100101010101</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;m pretty sure most of you would have pretty hard time to quickly
digest a number written in this way - lots of digits and no separators
between them to help us discern the number&#8217;s <code>structure</code>. At this
point <code>_</code> makes a dramatic appearance and comes to the rescue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAX_SIZE = 10_000_000_000
</span><span class='line'>DEVIATION = 0.2_343_434_343
</span><span class='line'>BIT_MASK = 0b1001_0101_0101</span></code></pre></td></tr></table></div></figure>


<p>The addition of a few <code>_</code> improves the readability of those huge literals a ton!</p>

<p>The underscores we add to numeric literals are ignored by <code>Ruby</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">100_000</span>
</span><span class='line'><span class="c1"># =&gt; 100000</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the preceding example nothing&#8217;s lost or changed -
we&#8217;ve only gained readability and eased the parsing burden on our
brains.</p>

<p>Obviously we should not overdo <code>_</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># short literals are pretty readable on their own</span>
</span><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="mi">1_00</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, when dealing with decimal literals, I tend to use <code>_</code> for
numbers with at 5 least digits(e.g. <code>11_948</code>). The number of digits to separate with
<code>_</code> depends on the numeric base - in decimal it makes sense to group
digits by 3(<code>1_000_000</code>), in binary by 4(<code>0b1111_1010_1110</code>), etc.</p>

<p>That&#8217;s all for today folks! Hope I managed to convince at least a few
of you of the benefits of using underscores in your long numeric literals.</p>

<p>As usual I&#8217;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuboCop 0.9 is now patrolling the streets!]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/01/rubocop-0-dot-9-is-now-patrolling-the-streets/"/>
    <updated>2013-07-01T17:06:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/01/rubocop-0-dot-9-is-now-patrolling-the-streets</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/rubocop">RuboCop</a> 0.9 is finally out! This
was one of our most ambitious releases - over a month of work, ~250
commits, lots of new cops and features and a lot less bugs (OK, I&#8217;m
not sure about this, but I sincerely hope it&#8217;s true). Here&#8217;s the
highlights.</p>

<h2>Portable Linting</h2>

<p>This is a big deal! Prior to 0.9, RuboCop piggybacked on MRI&#8217;s <code>ruby
-wc</code> to find syntax errors and lint warnings. Obviously apart from
being unportable - this wasn&#8217;t particularly fast (spawning processes
never is) either.</p>

<p>That&#8217;s no longer the case - errors are now reported directly by
<a href="https://github.com/whitequark/parser">Parser</a> and we&#8217;ve reimplemented
MRI&#8217;s linting in pure Ruby into RuboCop itself. Now you&#8217;ll get the
same errors and warnings on MRI, JRuby and Rubinius. And to top it
off - we&#8217;ve added much nicer warning messages and we report even
column information for those (MRI doesn&#8217;t). This brings me to the next
point.</p>

<h2>Column information</h2>

<p>All RuboCop diagnostics now feature column information as well. Now
you&#8217;ll be able to jump to a problem in your code even faster. But that&#8217;s not all&#8230;</p>

<h2>Formatter Support</h2>

<p>We&#8217;ve introduced the concept of formatters (similar the to RSpec
formatter concept) and we&#8217;ve bundled a few formatters. We&#8217;ve also
changed the default output format - it now pretty similar to <code>clang</code>&#8217;s
and features extra context information:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec/models/authentication_spec.rb:12:44: W: `-' interpreted as argument prefix
</span><span class='line'>    }.to change(Authentication, :count).by -1
</span><span class='line'>                                           ^</span></code></pre></td></tr></table></div></figure>


<p>Pretty sure most of you will love this :-)</p>

<h2>Auto-correction Support</h2>

<p>Running <code>rubocop -a</code> will now correct certain problems automatically. This
feature is alpha quality and just a few cops have support for it right
now. It goes without saying that you shouldn&#8217;t use it on projects not under
version control (who doesn&#8217;t use version control?) and without
an excellent test suite (that you undoubtedly have).</p>

<h2>Rails Support</h2>

<p><code>rubocop -R</code> will run additional Rails specific code checks. This
feature is also alpha at this point (meaning there&#8217;s just one Rails
specific check at this point).</p>

<h2>The Road to 1.0</h2>

<p>We plan 1.0 to be the next RuboCop major release. No new features are in
the pipeline for 1.0 - we already have so many features that require extra
work and polish anyways. If all goes well expect 1.0 by summer&#8217;s end with:</p>

<ul>
<li>performance optimizations</li>
<li>refined formatters</li>
<li>enhanced auto-correction support</li>
<li>lots of Rails specific checks</li>
</ul>


<p>I hope you&#8217;ll enjoy RuboCop 0.9. For the gory details, please take a
look at the epic
<a href="https://github.com/bbatsov/rubocop/blob/master/CHANGELOG.md">Changelog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #4: Array#join vs Array#*]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/01/the-elements-of-style-in-ruby-number-4-array-number-join-vs-array-number-star/"/>
    <updated>2013-07-01T16:28:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/01/the-elements-of-style-in-ruby-number-4-array-number-join-vs-array-number-star</id>
    <content type="html"><![CDATA[<p>Today&#8217;s topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Favor the use of <code>Array#join</code> over the fairly cryptic <code>Array#*</code> with
a string argument.</p></blockquote>

<p><code>Array#join</code> and <code>Array#*</code> (with a string argument) behave exactly the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w(Bruce Wayne)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Bruce Wayne&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w(Bruce Wayne)</span> <span class="o">*</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Bruce Wayne&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, considering they both do the same thing why should you opt to use
<code>join</code> instead of <code>*</code>? Here&#8217;s a few reasons:</p>

<ul>
<li><code>*</code> behaves totally differently when passed an integer argument:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span><span class="o">]</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="c1"># =&gt; [1 2 1 2 1 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, I&#8217;d expect this to be only behavior of such an operator
method and find the alternative one (with a string argument) to be
pretty much counter-intuitive.</p>

<ul>
<li>It&#8217;s not always clear what <code>*</code> means without additional
context. Take a look at this short snippet:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># a and b are variables</span>
</span><span class='line'><span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without some knowledge of <code>a</code> and <code>b</code> we cannot be certain what this
code is going to do. It&#8217;s hard even to speculate what the code is
going to do. Obviously better variable names would certainly help, but
the point still stands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While we still cannot be absolutely certain, it&#8217;s highly likely that <code>a</code> is
an <code>Array</code> and <code>b</code> is a <code>String</code>.</p>

<ul>
<li><code>*</code> does not carry much of a semantic value in it.</li>
</ul>


<p>Unlike <code>String#%</code>, <code>Array#*</code> with a string argument carries pretty
much no meaning. It&#8217;s absolutely beyond me how this came into
existence. On the other hand the behavior of <code>Array#*</code> with an integer
argument is pretty reasonable. Here we see a classic example of the
notion that too much operator overloading can be a bad thing, leading
to some pretty unreadable code. An operator should be employed only
when it&#8217;s use would add clarity to the code, not take clarity away.</p>

<p><code>Array#*</code> has one thing going for it, however - the fact that few
people know about its use as a substitute for <code>Array#join</code>. I hope
they realize that some unknown features are unknown for a reason -
because it&#8217;s bad idea to make use of them.</p>

<p>As usual I&#8217;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #3: Make sure something is an array]]></title>
    <link href="http://bbatsov.github.com/articles/2013/06/28/the-elements-of-style-in-ruby-number-3-make-sure-something-is-an-array/"/>
    <updated>2013-06-28T15:39:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/06/28/the-elements-of-style-in-ruby-number-3-make-sure-something-is-an-array</id>
    <content type="html"><![CDATA[<p>The subject of today&#8217;s post is the following rule from the
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Use <code>[*var]</code> or <code>Array()</code> instead of an explicit <code>Array</code> check, when dealing with a </br>
variable you want to treat as an Array, but you&#8217;re not certain it&#8217;s </br>
an array.</p></blockquote>

<p>Countless times I&#8217;ve seen code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">paths</span> <span class="o">=</span> <span class="o">[</span><span class="n">paths</span><span class="o">]</span> <span class="k">unless</span> <span class="n">paths</span><span class="o">.</span><span class="n">is_a?</span> <span class="nb">Array</span>
</span><span class='line'><span class="n">paths</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="n">do_something</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It seems that <code>paths</code> could be either an <code>Array</code> object or an object
of some other class. The author of the code needed to make sure
<code>paths</code> would be an array so he creates a single element array in the
case <code>paths</code> is not already an array.</p>

<p>While the above code works it&#8217;s not something an experienced Rubyist
would write. The most popular alternative is the use of the mighty splat
operator(<code>*</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[*</span><span class="n">paths</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="n">do_something</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It case you&#8217;re puzzled by the preceding snippet consider the following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">elems</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">[*</span><span class="n">elems</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; [1]</span>
</span><span class='line'>
</span><span class='line'><span class="n">elems</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="o">[*</span><span class="n">elems</span><span class="o">]</span>
</span><span class='line'><span class="c1"># = [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope that makes clear what&#8217;s going on.</p>

<p>While I&#8217;m extremely fond of this particular usage of <code>*</code> I tend to
avoid it, since there is another equally powerful, but more readable
alternative to it - <code>Kernel#Array</code>. Here&#8217;s it in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">Array</span><span class="p">(</span><span class="n">paths</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">path</span><span class="o">|</span> <span class="n">do_something</span><span class="p">(</span><span class="n">path</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Array</code> looks like the name of class, but it&#8217;s not. It&#8217;s a totally
normal method defined in the <code>Kernel</code> module. There is a whole family
of conversion methods similar to <code>Array</code> there - <code>Array</code>, <code>Complex</code>,
<code>Float</code>, <code>Hash</code>, <code>Integer</code>, <code>Rational</code> and <code>String</code>. They are all used
for often in practice and we&#8217;ll probably revisit them in a separate
post somewhere down the road.</p>

<p>The <code>Array</code> method operates exactly like <code>*</code> - it takes a single argument and
converts it to an <code>Array</code> object if necessary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">Array</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [1]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Array</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [1, 2, 3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use <code>*</code> and <code>Array</code> to convert to array other data
composite data structures (like hashes and sets), but that&#8217;s
irrelevant to today&#8217;s discussion.</p>

<p>That&#8217;s all I have for you today, mates. As usual I&#8217;m looking forward
to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #2: Favor sprintf(format) over String#%]]></title>
    <link href="http://bbatsov.github.com/articles/2013/06/27/the-elements-of-style-in-ruby-number-2-favor-sprintf-format-over-string-number-percent/"/>
    <updated>2013-06-27T13:15:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/06/27/the-elements-of-style-in-ruby-number-2-favor-sprintf-format-over-string-number-percent</id>
    <content type="html"><![CDATA[<p>Today&#8217;s topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Favor the use of <code>sprintf</code> and its alias <code>format</code> over the fairly </br>
cryptic <code>String#%</code> method.</p></blockquote>

<p><code>Kernel#sprintf</code> and <code>String#%</code> basically do the same thing - the main
difference is that <code>sprintf</code> is generally used as a command(it does
not operate on its receiver) and <code>String#%</code> is obviously an instance
method of the class <code>String</code>. Here&#8217;s the two of them in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;%d %d&#39;</span> <span class="o">%</span> <span class="o">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; &#39;20 10&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;%d %d&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &#39;20 10&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, considering they both do the same thing why should you opt to use
<code>sprintf</code> instead of <code>%</code>? Here&#8217;s a few reasons:</p>

<ul>
<li><code>%</code> takes either a single element or an array of elements as its
sole argument; <code>sprintf</code> consistently takes a variable number of
arguments.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;%d&#39;</span> <span class="o">%</span> <span class="mi">20</span>
</span><span class='line'><span class="c1"># =&gt; &#39;20&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;%d %d&#39;</span> <span class="o">%</span> <span class="o">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span>
</span><span class='line'><span class="c1"># =&gt; &#39;20 10&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;%d %d&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &#39;20&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;%d %d&#39;</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &#39;20 10&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, I dislike such inconsistencies a lot.</p>

<ul>
<li>It&#8217;s not always clear what <code>%</code> means without additional
context. Take a look at this short snippet:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># a and b are variables</span>
</span><span class='line'><span class="n">a</span> <span class="o">%</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without some knowledge of <code>a</code> and <code>b</code> we cannot know if we&#8217;re dealing
with a modulo operation (if <code>a</code> and <code>b</code> are fixnums), <code>String#%</code> or if
<code>a</code> is an instance of some other class which has implemented the <code>%</code>
method.</p>

<p>With <code>sprintf</code> it&#8217;s always crystal-clear what&#8217;s going on.</p>

<ul>
<li><code>%</code> does not carry much of a semantic value in it.</li>
</ul>


<p>Sure, it was named so because of the <code>%</code> placeholders in the target
string, but people not familiar with that operator will probably be
confused by such odd-looking syntax. <code>sprintf</code> on the other hand is
old as time (so people reading your code have probably encountered it
somewhere before) and beside that it&#8217;s fairly easy to remember that it
stands for <code>string print formatted</code> (or something similar). On a
related note - the use of <code>Kernel%sprintf</code>&#8217;s alias <code>format</code> yields
even better readability, since <code>format</code> is obviously less cryptic name
than <code>sprintf</code> and the same name is employed in many programming
languages (most notably <code>Java</code> and many Lisp dialects).</p>

<p>There&#8217;s one thing about <code>sprintf/format</code> that I dislike, though. It
doesn&#8217;t make that much sense to have such an operation as command in a
OO language like Ruby. Alas, those things are not up to me - I guess
the authors had something in mind when they made that particular
decision about the standard library.</p>

<p>In an ideal world the standard library would have included a
<code>String#format</code> method, that took variable number of arguments. For
some reason (unknown to me) - that has not happened (and maybe never
will). For now the use of <code>Kernel#sprintf</code> (and <code>Kernel#format</code>)
yields the best results when it comes down to code clarity and
consistency. I encourage you to use them (<code>format</code> in particular)!</p>

<p>As usual I&#8217;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #1: Maximum line length]]></title>
    <link href="http://bbatsov.github.com/articles/2013/06/26/the-elements-of-style-in-ruby-number-1-maximum-line-length/"/>
    <updated>2013-06-26T16:57:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/06/26/the-elements-of-style-in-ruby-number-1-maximum-line-length</id>
    <content type="html"><![CDATA[<p>Welcome to the first installment of <strong>The Elements of Style in Ruby</strong>.</p>

<p>We&#8217;ll start off with something pretty generic, that&#8217;s not specific to
Ruby at all - the maximum line length that&#8217;s acceptable in our code.</p>

<p>The guide currently states:</p>

<blockquote><p>Limit lines to 80 characters.</p></blockquote>

<p>How did we get here?</p>

<p>Due to limitations of the old 80-column computer screens for many
years 80 (or 79 depending on your preferences) columns has been the
gold standard for maximum line length in most languages. That was the
bulk of the reasoning behind the rule. There was also fact that Ruby&#8217;s
main competitor Python upholds the same line length limit.</p>

<p>Many would argue that such a restriction does not make sense with the
advances in computer displays in recent years - after all a full hd
computer display would give you much more columns to play with. Why
not go with no limit what-so-ever? That would be simple, right?</p>

<p>Wrong! We should definitely have a limit - that&#8217;s beyond any
doubt. It&#8217;s common knowledge that humans read much faster vertically,
than horizontally. Try to read the source code of something with
200-character lines and you&#8217;ll come to acknowledge that. On the other
hand the problem with aggressive line length limits is that they often
come at the expense of code readability - programmers start using less
descriptive variable and method names, span long expressions over
multiple lines, etc. A balance has to struck somewhere.</p>

<p>Ruby has generally favored succinctness (not to be confused with
terseness) and 80 columns are generally not some attainable goal as
many of you probably already know (Java developers on the other hand
can barely fit something meaningful in less that 100 or even 120
characters per line). Short, but descriptive names, proper
abstractions, judicious nesting and heredocs certainly help to keep
the lines short in Ruby.</p>

<p>And what of the benefit for our efforts? Apart from enabling faster
scanning though the code, shorter lines allow you to keep two or more
files opened side by side in your IDE or text editor, which is often
pretty handy. On a <code>1366*768</code> screen (somewhat unfortunately - the
most popular today) - you won&#8217;t be able to achieve this with
normal-sized fonts and lines longer than 80-90 characters.</p>

<p>That said, maybe 80 columns is a bit too restrictive and a 100 columns
limit strikes a better balance between reading speed, code readability
and practical considerations like have two files opened side-by-side.</p>

<p>I&#8217;d love to hear your thoughts! Feel free to leave a comment here or
ping me on <a href="http://twitter.com/bbatsov">Twitter</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby: An Essay in N parts]]></title>
    <link href="http://bbatsov.github.com/articles/2013/06/26/the-elements-of-style-in-ruby-an-essay-in-n-parts/"/>
    <updated>2013-06-26T16:30:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/06/26/the-elements-of-style-in-ruby-an-essay-in-n-parts</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide</a> is
nearing its second birthday. The project has gained more attention and
more traction than I could have imagined. For the millionth time I was
amazed by the fantastic Ruby developers around the world.</p>

<p>The project has also steadily evolved:</p>

<ul>
<li>it covers more and more aspects of programming in Ruby</li>
<li>it features many more code examples</li>
<li>it is now translated in several languages</li>
<li>it gave birth to the automated static code analyzer <a href="https://github.com/bbatsov/rubocop">RuboCop</a></li>
<li>it has become the basis for hundreds of slightly modified internal project or company style guides</li>
</ul>


<p>One common criticism for the Ruby style guide is that it doesn&#8217;t
feature extensive rationale about most of the rules in it. That&#8217;s
deliberate - even now the document is pretty intimidating. If we were
to delve into the reasoning behind each and every rule, the guide&#8217;s
size might come close to that of a small book.</p>

<p>I do, however, feel that the rationale behind some of the rules is
important. That&#8217;s why I&#8217;ll be starting a series of <em>N</em> posts devoted
to the topic. I&#8217;ll try to cover as many of the rules as I can - from
the more straightforward ones like <em>maximum line length</em>, to the most
controversial ones like <em>the use of single-quoted strings when
possible</em>. The articles will be published in no particular order and
on no particular schedule.</p>

<p>Keep an eye out for the installments in the series here and on
<a href="http://twitter.com/bbatsov">Twitter</a>. I&#8217;m looking forward to many
interesting discussions with you!</p>

<p>Feel free to take a look at the
<a href="http://bbatsov.github.com/articles/2013/06/26/the-elements-of-style-in-ruby-number-1-maximum-line-length/">first article in the series, dedicated to the maximum line length we should aim for</a>.</p>

<h2>Articles in the Series</h2>

<ol>
<li><a href="http://bbatsov.github.com/articles/2013/06/26/the-elements-of-style-in-ruby-number-1-maximum-line-length/">Maximum Line Length</a></li>
<li><a href="http://bbatsov.github.com/articles/2013/06/27/the-elements-of-style-in-ruby-number-2-favor-sprintf-format-over-string-number-percent/">Favor sprintf(format) Over String#%</a></li>
<li><a href="http://bbatsov.github.com/articles/2013/06/28/the-elements-of-style-in-ruby-number-3-make-sure-something-is-an-array/">Make Sure Something Is an Array</a></li>
<li><a href="http://bbatsov.github.com/articles/2013/07/01/the-elements-of-style-in-ruby-number-4-array-number-join-vs-array-number-star/">Array#join vs Array#*</a></li>
<li><a href="http://bbatsov.github.com/articles/2013/07/02/the-elements-of-style-in-ruby-number-5-readability-of-long-numeric-literals">Readability of Long Numeric Literals</a></li>
<li><a href="http://bbatsov.github.com/articles/2013/07/04/the-elements-of-style-in-ruby-number-6-attributes-redux">Attributes Redux</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuboCop 0.8.0 is out, support for JRuby and Rubinius is in!]]></title>
    <link href="http://bbatsov.github.com/articles/2013/05/28/rubocop-0-dot-8-0-is-out/"/>
    <updated>2013-05-28T12:11:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/05/28/rubocop-0-dot-8-0-is-out</id>
    <content type="html"><![CDATA[<p><a href="http://github.com/bbatsov/rubocop">RuboCop</a> 0.8.0 is out!</p>

<p>While the version bump is minor, this release represents an almost
total rewrite of the code. We&#8217;ve moved away from MRI&#8217;s <code>Ripper</code> parser
and ported RuboCop to <a href="https://github.com/whitequark">Peter Zotov</a>&#8217;s
fantastic <a href="https://github.com/whitequark/parser">Parser</a>.</p>

<p>What does this mean for users of RuboCop? It means that now both
Rubinius and JRuby are supported (in 1.9 and 2.0 modes). I&#8217;d say this
is kind of a big deal! The support for the them should be considered
beta at this point, since they have not yet received extensive field
testing.</p>

<p>And what does the change mean for developers? It&#8217;s now a lot easier to
comprehend RuboCop&#8217;s source code, lowering the bar for contributions
immensely.</p>

<p>What&#8217;s coming down the road for 0.9.0? We have two big changes
planned - providing an auto-fix functionality(meaning RuboCop will be
able to fix on its own some of the problems detected) and providing
more precise diagnostic messages(a-la <code>clang</code>).</p>

<p>The changelog for 0.8.0 is available <a href="https://github.com/bbatsov/rubocop/blob/master/CHANGELOG.md">here</a>.</p>

<p>Stay tuned for more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WikEmacs lives on under new stewardship]]></title>
    <link href="http://bbatsov.github.com/articles/2013/04/24/wikemacs-lives-on-under-new-stewardship/"/>
    <updated>2013-04-24T11:36:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/04/24/wikemacs-lives-on-under-new-stewardship</id>
    <content type="html"><![CDATA[<p>Several months passed since I stated my intent
<a href="articles/2013/01/27/the-wikemacs-experiment-is-over-long-live-emacswiki/">to shutdown WikEmacs</a>. While
I still consider the project a failed experiment and stand by
everything I wrote in that post, I have received since lots of messages from
people who were sad to see WikEmacs go. One person in particular,
<a href="https://twitter.com/holocronweaver">Jesse Johnson</a>, was committed to
seeing the project move forward and offered to take over its stewardship.</p>

<p>In the end I&#8217;ve decided that in spirit of the FOSS ideals I don&#8217;t have
the right to take away something people like and want to use(especially
given the fact that they contributed most of the content there) and
handed over the domain and the data to Jesse.</p>

<p><a href="http://wikemacs.org/index.php/Main_Page">WikEmacs</a> has been running
for a couple of weeks now under his management and will continue to
exist for a long time. If you liked the project I guess this is a good
moment to show you love and spread the word.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuboCop 0.6.0 released]]></title>
    <link href="http://bbatsov.github.com/articles/2013/04/23/rubocop-0-dot-6-0-released/"/>
    <updated>2013-04-23T14:46:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/04/23/rubocop-0-dot-6-0-released</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/rubocop">RuboCop</a> 0.6.0 was just released!
It&#8217;s RuboCop&#8217;s biggest and most ambitious release yet.  Here&#8217;s the
highlights:</p>

<ul>
<li>15 new cops(checks)</li>
<li>Support for disabling cops locally in a file with <code>rubocop:disable</code> comments</li>
<li>Half a dozen bugs squashed</li>
<li>Small improvements across the board</li>
</ul>


<p>I guess the support for disabling cops locally deserves a bit of special treatment.</p>

<p>So here&#8217;s the basics - you&#8217;re now allowed to enable/disable certain cops
(checks) and to alter their behavior if they accept any parameters.</p>

<p>One or more individual cops can be disabled locally in a section of a
file by adding a comment such as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rubocop:disable LineLength, StringLiterals</span>
</span><span class='line'><span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'><span class="c1"># rubocop:enable LineLength, StringLiterals</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also disable <em>all</em> cops with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># rubocop:disable all</span>
</span><span class='line'><span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'><span class="c1"># rubocop:enable all</span>
</span></code></pre></td></tr></table></div></figure>


<p>One or more cops can be disabled on a single line with an end-of-line
comment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">19</span><span class="p">)</span> <span class="c1"># rubocop:disable AvoidFor</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see all the gory details in the
<a href="https://github.com/bbatsov/rubocop/blob/master/CHANGELOG.md">changelog</a>. I hope you&#8217;ll enjoy RuboCop 0.6.0!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuboCop]]></title>
    <link href="http://bbatsov.github.com/articles/2013/04/15/rubocop/"/>
    <updated>2013-04-15T17:22:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/04/15/rubocop</id>
    <content type="html"><![CDATA[<p>After I launched the
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a> I
often received requests to create a tool enforcing the rules in the guide
automatically.</p>

<p>Today this tool is a reality - meet
<a href="https://github.com/bbatsov/rubocop">RuboCop</a>. RuboCop already covers
a significant portion of the Guide, supports both MRI 1.9 and MRI 2.0
and has pretty neat Emacs integration(via
<a href="https://github.com/bbatsov/rubocop-emacs">rubocop.el</a> and
<a href="https://github.com/lunaryorn/flycheck">flycheck</a>).</p>

<p>I&#8217;d love to see more Ruby hackers check out RuboCop!</p>

<p>I&#8217;d love to thank all the great people who contributed code, issue
reports and ideas to RuboCop&#8217;s development and I sincerely hope many
Ruby hackers will find it useful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Redux]]></title>
    <link href="http://bbatsov.github.com/articles/2013/04/15/emacs-redux/"/>
    <updated>2013-04-15T17:10:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/04/15/emacs-redux</id>
    <content type="html"><![CDATA[<p>I&#8217;ve recently launched a new blog dedicated to Emacs -
<a href="http://emacsredux.com/">Emacs Redux</a>.</p>

<p>There I’ll be sharing with you (hopefully) useful tips and tricks to
make your experience with Emacs more productive and more enjoyable.</p>

<p>I hope you&#8217;ll like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The WikEmacs Experiment is over! Long Live EmacsWiki!]]></title>
    <link href="http://bbatsov.github.com/articles/2013/01/27/the-wikemacs-experiment-is-over-long-live-emacswiki/"/>
    <updated>2013-01-27T09:23:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2013/01/27/the-wikemacs-experiment-is-over-long-live-emacswiki</id>
    <content type="html"><![CDATA[<p>Less than an year ago
<a href="http://batsov.com/articles/2012/03/20/die-emacswiki/">amid a lot of turmoil</a>
I&#8217;ve started
<a href="http://batsov.com/articles/2012/03/26/wikemacs-the-other-emacs-wiki/">an alternative to EmacsWiki</a>. The
project took off to a great start, but quickly lost traction and now
it&#8217;s time to face the truth - I had an assumption, it turned out it(I)
was wrong and I should come to terms with that.</p>

<p>It&#8217;s more than apparent at this point that the majority of the Emacs
community is happy with EmacsWiki and that&#8217;s fine by me. I&#8217;ll be
closing down WikEmacs after 2-3 months and I suggest that everyone who&#8217;s
contributed significant chunks of content to it migrate them to
EmacsWiki (I&#8217;ll personally move everything good I find). I don&#8217;t want
the work people have done to just disappear.</p>

<p>Given the small interest in WikEmacs I doubt that many will miss it. I
thank all the contributors and the supporters of the idea. In the long
term it would be better for us to have a single repository of Emacs
knowledge, that&#8217;s why I decided to terminate WikEmacs sooner rather than later.</p>

<p>I want to extend a big public apology to Alex Schroeder for my harsh
criticism of EmacsWiki.  One year later I see that stewarding
documentation projects and nurturing a healthy community around them
is much harder than writing software. I&#8217;m but a humble software
engineer and you&#8217;ll have to forgive me for my misguided actions.</p>

<p>I hope that something good has(will) come up from all this drama. At
the very least I urge everyone who cares for EmacsWiki to try and
clean up, extend and improve at least a couple of articles on subjects
that are of importance to him. I know that&#8217;s something I&#8217;ll be doing
from now on.</p>

<p>See you on EmacsWiki!</p>

<p>WikEmacs is dead! Long live the one true EmacsWiki!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Just juxt it!]]></title>
    <link href="http://bbatsov.github.com/articles/2013/01/20/just-juxt-it/"/>
    <updated>2013-01-20T18:16:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2013/01/20/just-juxt-it</id>
    <content type="html"><![CDATA[<p><code>juxt</code> is one remarkably useful core Clojure function, that doesn&#8217;t
seem to be widely used (or understood for that matter), but is part of
the arsenal of every experienced Clojure hacker.</p>

<p>Looking at the official docs you&#8217;ll see that <code>juxt</code> takes a set of
functions and returns a function that is the juxtaposition of those
functions. The returned function takes a variable number of
arguments, and returns a vector containing the result of applying each
function to the arguments (from left to right). Basically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">((</span><span class="nf">juxt</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">[(</span><span class="nf">a</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">b</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">c</span> <span class="nv">x</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glace that probably doesn&#8217;t seem particularly useful. Let&#8217;s
see some practical applications of <code>juxt</code>. What if we wanted to split
a sequence into two sequences - one with the values that satisfy some
predicate and one with the values that don&#8217;t. While there are many
ways to do so, <code>juxt</code> offers one particularly elegant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; illustration of the general idea</span>
</span><span class='line'><span class="p">((</span><span class="nf">juxt</span> <span class="nb">filter </span><span class="nv">remove</span><span class="p">)</span> <span class="nv">pred</span> <span class="nv">coll</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; separate the even from the odd numbers</span>
</span><span class='line'><span class="p">((</span><span class="nf">juxt</span> <span class="nb">filter </span><span class="nv">remove</span><span class="p">)</span> <span class="nv">even?</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; =&gt; [(2 4 6 8) (1 3 5 7 9)]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>juxt</code> is also quite helpful when dealing with multiple map keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; extract the values of a couple of maps keys</span>
</span><span class='line'><span class="p">((</span><span class="nf">juxt</span> <span class="ss">:alias</span> <span class="ss">:name</span><span class="p">)</span> <span class="p">{</span><span class="ss">:alias</span> <span class="s">&quot;Batman&quot;</span> <span class="ss">:name</span> <span class="s">&quot;Bruce Wayne&quot;</span><span class="p">})</span>
</span><span class='line'><span class="c1">;; =&gt; [&quot;Batman&quot; &quot;Bruce Wayne&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; sort a vector of maps by a composite criteria</span>
</span><span class='line'><span class="p">(</span><span class="nb">sort-by </span><span class="p">(</span><span class="nf">juxt</span> <span class="ss">:alias</span> <span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>         <span class="p">[{</span><span class="ss">:alias</span> <span class="s">&quot;Batman&quot;</span> <span class="ss">:name</span> <span class="s">&quot;Bruce Wayne&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:alias</span> <span class="s">&quot;Robin&quot;</span> <span class="ss">:name</span> <span class="s">&quot;Jason Todd&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:alias</span> <span class="s">&quot;Robin&quot;</span> <span class="ss">:name</span> <span class="s">&quot;Tim Drake&quot;</span><span class="p">}</span>
</span><span class='line'>          <span class="p">{</span><span class="ss">:alias</span> <span class="s">&quot;Robin&quot;</span> <span class="ss">:name</span> <span class="s">&quot;Dick Grayson&quot;</span><span class="p">}])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; =&gt; ({:name &quot;Bruce Wayne&quot;, :alias &quot;Batman&quot;} {:name &quot;Dick Grayson&quot;, :alias &quot;Robin&quot;} {:name &quot;Jason Todd&quot;, :alias &quot;Robin&quot;} {:name &quot;Tim Drake&quot;, :alias &quot;Robin&quot;})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully this short article has whetted your appetite and you&#8217;ll find
even more elegant uses for <code>juxt</code> in your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[drop-nth in Clojure]]></title>
    <link href="http://bbatsov.github.com/articles/2013/01/20/drop-nth-in-clojure/"/>
    <updated>2013-01-20T15:31:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2013/01/20/drop-nth-in-clojure</id>
    <content type="html"><![CDATA[<p>For some reason the standard Clojure library doesn&#8217;t have a <code>drop-nth</code>
function (although it has <code>take-nth</code>). Luckily implementing it is trivial:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">drop-nth</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">n</span> <span class="nv">coll</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">coll</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map vector </span><span class="p">(</span><span class="nb">iterate inc </span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">remove </span><span class="o">#</span><span class="p">(</span><span class="nb">zero? </span><span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="nb">first </span><span class="nv">%</span><span class="p">)</span> <span class="nv">n</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="nv">second</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s try it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">drop-nth</span> <span class="mi">3</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; =&gt; (1 2 4 5 7 8)</span>
</span><span class='line'><span class="p">(</span><span class="nf">drop-nth</span> <span class="mi">5</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; =&gt; (1 2 3 4 6 7 8 9)</span>
</span><span class='line'><span class="p">(</span><span class="nf">drop-nth</span> <span class="mi">5</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">20</span><span class="p">))</span>
</span><span class='line'><span class="c1">;; =&gt; (1 2 3 4 6 7 8 9 11 12 13 14 16 17 18 19)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looks good to me. Hopefully it will be of some use to someone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #8: Manipulating Word Case]]></title>
    <link href="http://bbatsov.github.com/articles/2012/12/16/emacs-tip-number-8-manipulating-word-case/"/>
    <updated>2012-12-16T17:57:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/12/16/emacs-tip-number-8-manipulating-word-case</id>
    <content type="html"><![CDATA[<p>One operation that we have to do fairly often when editing text is
manipulating the case of words. The most popular case manipulations
are probably <strong>capitalize</strong>, <strong>convert to lowercase</strong> and <strong>convert to
uppercase</strong>. Emacs naturally has built-in commands for all of those.</p>

<p>Pressing <code>M-c</code> runs the command <code>capitalize-word</code>, which will
capitalize the next word and move the cursor after it. Pressing <code>M--
M-c</code> will capitalize the previous word without moving the cursor.</p>

<p>Pressing <code>M-l</code> runs the command <code>downcase-word</code>, which will lowercase
the next word and move the cursor after it. Pressing <code>M-- M-l</code> will
lowercase the previous word without moving the cursor.</p>

<p>Pressing <code>M-u</code> runs the command <code>upcase-word</code>, which will uppercase the
next word and move the cursor after it. Pressing <code>M-- M-u</code> will uppercase
the previous word without moving the cursor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deleting Remote Git Branches]]></title>
    <link href="http://bbatsov.github.com/articles/2012/12/16/deleting-remote-git-branches/"/>
    <updated>2012-12-16T10:10:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/12/16/deleting-remote-git-branches</id>
    <content type="html"><![CDATA[<p>This post is mostly a note to myself, since I constantly forget how to
delete remote Git branches.</p>

<p>The classic way to do so (introduced in Git 1.5) would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push origin :branch-to-delete
</span></code></pre></td></tr></table></div></figure>


<p>So, if I were migrating an application from MySQL to PostgreSQL I might want to delete
the <code>postgres</code> branch when I&#8217;m done:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push origin :postgres
</span></code></pre></td></tr></table></div></figure>


<p>You have to agree this syntax is hardly something one can easily
remember(and I&#8217;m extra certain nobody would have guessed it on their
own). Fortunately in Git 1.7 a nicer alternative to the above command
was introduced:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push origin --delete branch-to-delete
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all from me for today. Now go ahead and delete those unneeded Git branches.</p>

<p>P.S. GitHub users might also want to take a look at this
<a href="https://github.com/blog/1335-tidying-up-after-pull-requests">article</a>
describing recently added functionality to clean up after pull
requests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 24.3 introduces native OSX full-screen support]]></title>
    <link href="http://bbatsov.github.com/articles/2012/12/09/emacs-24-dot-3-introduces-native-osx-full-screen-support/"/>
    <updated>2012-12-09T13:34:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/12/09/emacs-24-dot-3-introduces-native-osx-full-screen-support</id>
    <content type="html"><![CDATA[<p>One of the most requested Emacs features - native OSX Lion style
full-screen support has finally landed in Emacs 24.3 (due to be
released in a few months). If you&#8217;re eager to try it out right now
homebrew is a good option:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install emacs --cocoa --use-git-head --HEAD
</span></code></pre></td></tr></table></div></figure>


<p>Homebrew&#8217;s devs have even backported the full-screen patch to Emacs
24.2, so if you&#8217;re not very adventurous you can just do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install emacs --cocoa
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively you can install the
<a href="http://emacsformacosx.com/emacs-builds/Emacs-pretest-24.2.91-universal-10.6.8.dmg">Emacs 24.2.91 pretest</a>
(or a newer pretest/nightly build) from
<a href="http://emacsformacosx.com/">Emacs for Mac OSX</a>. Personally I
recommend this option, since cloning the Emacs git mirror (as homebrew
does) takes like forever.</p>

<p>Here&#8217;s the beast in action:</p>

<p><img src="http://bbatsov.github.com/images/articles/emacs-full-screen.png"></p>

<p>This was a short article, but I do hope you&#8217;ll find it useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Linux to OSX: Meet Your New Apps]]></title>
    <link href="http://bbatsov.github.com/articles/2012/12/09/from-linux-to-osx-meet-your-new-apps/"/>
    <updated>2012-12-09T11:41:00+02:00</updated>
    <id>http://bbatsov.github.com/articles/2012/12/09/from-linux-to-osx-meet-your-new-apps</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>It&#8217;s time I resume what I started in
<a href="http://batsov.com/articles/2012/09/09/from-linux-to-osx-1-year-later/">my previous article documenting my first year as an OSX user</a>
a few months ago.</p>

<p>In this article I&#8217;ll focus primarily on the applications I&#8217;ve adopted
during my short time being a Mac OSX user, after being a GNU/Linux
user for quite some time before that. The focus of the article will be
mostly desktop applications, since the command-line tools are more or
less the same in both operating system. I will mention a couple of OSX
specific command-line tools near the end of the article though.</p>

<!--more-->


<h2>Productivity</h2>

<h3>Office Suite</h3>

<p>On Linux I was mostly using LibreOffice (chiefly its Impress
module) and while it did get the job done I wasn&#8217;t particularly
fond of it. At some point I was so frustrated with LibreOffice, that I
started running Microsoft Office with
<a href="http://www.codeweavers.com/products/">CodeWeavers CrossOver for Linux</a>. If
you like LibreOffice - it&#8217;s available on OSX as well. If you don&#8217;t
like it - you have some solid alternative available.</p>

<p>First, there is a native port of Microsoft Office for OSX. It&#8217;s a far
cry from the Windows version of the app, but it does have a few
advantages over LibreOffice. If you&#8217;re doing a lot of document
authoring and editing it might be a good option for you.</p>

<p>The other office suite you might want to explore is Apple&#8217;s own
<strong>iWorks</strong>. It has a few distinct advantages over Microsoft Office -
you can buy only the apps you need (as opposed to the whole suite), it
integrates great with the OS (but that&#8217;s hardly a suprise) and it&#8217;s
much cheaper. I only bought <strong>Pages</strong> (Apple&#8217;s <strong>Word</strong> alternative)
and <strong>Keynote</strong> (<strong>PowerPoint</strong> alternative). Pages is a so-so
application, but Keynote is simply fantastic. I write a lot of
presentations and for the first I actually enjoy the process.</p>

<h3>Instant Messaging</h3>

<h4>Skype</h4>

<p>Skype has a native client for OSX, that&#8217;s much more stable and
featureful than the Linux one.</p>

<h4>Pidgin/Kopete</h4>

<p>OSX Mountain Lion ships with an app similar to Pidgin and Kopete
called <strong>Messages</strong> (and iMessage in older OSX versions). It supports
a plethora of chat protocols, but it kept constantly disconnecting and
crashing for me, so I started looking for an
alternative. <a href="http://adium.im/">Adium</a> is a great free IM app that
supports many protocols and works flawlessly (at least for me), so I&#8217;d
recommend it to everyone.</p>

<h4>IRC</h4>

<p>If you&#8217;re in the market for an XChat replacement look no further than
<a href="http://colloquy.info/">Colloquy</a>. Personally I used Emacs&#8217;s ERC under
Linux and continue to use it under OSX as well.</p>

<h4>Twitter</h4>

<p>Twitter has an official desktop app for OSX, that&#8217;s available for free
in the Mac App store. It has one notable shortcoming - no retina
support. Rumour has it Twitter will kill the app in the future, but it
gets the job done for the time being and there are plenty of
alternatives lying around.</p>

<h3>Browser</h3>

<p>The default OSX browser Safari is great and has some fairly unique
features like pinch to zoom gesture support (smartphone users will
appreciate those). Unfortunately it has a pretty small selection of
plugins and might not be well suited for power users. I recommend the
use of Google Chrome on OSX, since Firefox really seems to lag in terms
of features there (the upcoming Firefox 18 will be the first with
Retina support).</p>

<h3>Email</h3>

<p>OSX&#8217;s default application <strong>Mail</strong> is decent, but nothing
more. Thunderbird is available for OSX, but I personally think it&#8217;s no
better than Mail. My desktop email client of choice is the delightful
<a href="http://www.sparrowmailapp.com/mac.php">Sparrow</a>. It&#8217;s the first
desktop email client I ever liked (I used to check my email with
terminal clients and Emacs afterwards) and has great integration with
GMail (it even supports GMail&#8217;s keyboard shortcuts), Dropbox,
Facebook, etc. While it&#8217;s a doomed product since
<a href="http://www.sparrowmailapp.com/">Google acquired Sparrow</a> I plan to
continue using it in the foreseeable future.</p>

<h3>Keyboard remapping</h3>

<p>By default you cannot remap that many things in OSX. The small utility
<a href="http://pqrs.org/macosx/keyremap4macbook/">KeyRemap4MacBook</a> allows
you to do much crazier remappings and despite its name the tool works
on all recent Macs.</p>

<h3>Virtualization Software</h3>

<p>The go-to desktop virtualization solution favoured by most Linux users
is VirtualBox and it&#8217;s available for OSX as well. VirtualBox gets the
job done, but doesn&#8217;t even come close to
<a href="http://www.parallels.com/">Parallels</a> in terms of performance,
stability and integration with OSX. Parallels support for Windows
guests is particularly good.</p>

<h2>Software Development</h2>

<h3>Text Editing</h3>

<p>Every major text editor has a port for OSX, so things are pretty
much the same here. On OSX you&#8217;ll also get access to
<a href="http://macromates.com/">TextMate</a>. My affection for Emacs is widely
known though. Excellent Emacs builds are available
<a href="http://emacsformacosx.com/">here</a> and the upcoming Emacs 24.3 will
finally feature OSX Lion style full-screen support. If the mention of
Emacs and vim scares you I&#8217;d recommend trying out
<a href="http://www.sublimetext.com/2">Sublime Text 2</a>.</p>

<h3>IDEs</h3>

<p>Eclipse, NetBeans and IntelliJ are available (no suprise since they
are all Java apps) and look and perform great on OSX. There&#8217;s also
Apple&#8217;s own XCode, which I found unwieldy.</p>

<h3>Terminal Emulator</h3>

<p>OSX comes with a pretty barebone terminal emulator called
<strong>Terminal</strong>. I wouldn&#8217;t advice anyone to spent much time with it.</p>

<p>Install <a href="http://www.iterm2.com/#/section/home">iTerm2</a>. It redefines
the meaning of insanely great.</p>

<h3>Shells</h3>

<p>OSX comes with Bash enabled by default, but Zsh is also preinstalled
and you can easily enable it by typing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>chsh -s /bin/zsh
</span></code></pre></td></tr></table></div></figure>


<h2>Media</h2>

<h3>Video player</h3>

<p>As in Linux <a href="http://www.videolan.org/vlc/index.html">VLC</a> is the king.</p>

<h3>Audio player</h3>

<p>iTunes fits the bill for a basic music player. I still haven&#8217;t found an
OSX app which I like as much as Linux&#8217;s Amarok and Exaile.</p>

<h3>UPnP server</h3>

<p>Under Linux I used to use MediaTomb and it performed great. It&#8217;s
available for OSX as well, but was causing a lot of problems for me,
so I finally decided to go with a commercial solution. I heartily
recommend <a href="http://www.yazsoft.com/products/playback/">Playback</a>. Of
course if your media player supports NFS you should go with it instead
of UPnP.</p>

<h2>File Transfer</h2>

<h3>FTP</h3>

<p><a href="http://filezilla-project.org/download.php?type=client">Filezilla</a> is
extremely popular under Linux and has a native OSX version as
well. <a href="http://cyberduck.ch/">Cyberduck</a> seems to be the top choice of
OSX users.</p>

<h3>Bittorrent</h3>

<p>There are plenty of great Bittorrent clients on Linux - Deluge,
KTorrent, Transmission, etc. Transmission is the only with an OSX port
and it seems that it&#8217;s also the only popular OSX torrent client.</p>

<h2>Package Management</h2>

<p>OSX has no official package managent tool but it has plenty of
unofficial ones. Currently
<a href="http://mxcl.github.com/homebrew/">homebrew</a> seems to be the most
popular option. Its package selection is quite vast and I&#8217;ve rarely
experienced problems with it. While regular users are unlikely to use
anything from outside the Mac App store, developers and power users
should definitely check homebrew out.</p>

<h2>Command Line</h2>

<p>Most of the command line applications that you know and love from
Linux are available in OSX (by default or installable via homebrew) as
well (but might be slightly different since Linux ships with GNU&#8217;s
version of many tools and OSX with BSD&#8217;s). Here&#8217;s a few notable OSX
specific commands:</p>

<ul>
<li><code>open</code> - opens a file or directory in the appropriate desktop application</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>open doc.pdf
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p><code>pbcopy</code> and <code>pbpaste</code> allow you to interact with OSX&#8217;s clipboard</p></li>
<li><p><code>launchctl</code> is a rough equivalent to the <code>service</code> and <code>chkconfig</code> commands on some Linux distros</p></li>
<li><p><code>fs_usage</code> allows you to monitor your filesystem usage statistics</p></li>
<li><p><code>system_profiler</code> gives you information about your hardware configuration (kind of like <code>lshw</code>)</p></li>
</ul>


<h2>Epilogue</h2>

<p>This was a whirlwind tour of so many apps. I hope that my superficial
treatment of many of them won&#8217;t stop you from trying them out. It
seems to me that the app selection catalogue on OSX is not as vast as
the one on Linux, but there&#8217;s also a tendency that established OSX
apps are much more polished and reliable.</p>
]]></content>
  </entry>
  
</feed>
