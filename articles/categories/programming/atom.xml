<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | (think)]]></title>
  <link href="http://bbatsov.github.com/articles/categories/programming/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2012-09-09T23:52:00+03:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby or Python? Well, it depends...]]></title>
    <link href="http://bbatsov.github.com/articles/2011/05/03/ruby-or-python/"/>
    <updated>2011-05-03T00:00:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2011/05/03/ruby-or-python</id>
    <content type="html"><![CDATA[<p><strong>Disclaimer</strong></p>

<p><em>If you're looking for a flame post - this is not one of them. I love
both languages and I'll simply compare some of their features and
possible uses.</em></p>

<h2>Prelude</h2>

<p>Ruby or Python? This is the Question! Well it might not be the
Question, but it's a common question for many developers looking to
break free from the statically typed language they know and learn a
dynamic language. I personally know them both(though I know a bit more
Ruby, than Python) and in this article I'll share my personal opinion
on their strengths and weaknesses. You'd probably do good to learn
them both, but my arguments here may lead you to pick only one of the
languages depending on you preferences.</p>

<h2>Installation</h2>

<p><strong>Linux/Unix installation</strong></p>

<p>If you're using a Linux distribution or some other Unix derivative
such as *BSD or Solaris you'll probably be able to install Ruby and
Python through the operating system's software management system. For
instance on Debian Linux systems(Ubuntu is a popular Debian
derivative) you can use apt to install them. Run the following
commands as root or with sudo:</p>

<p><code>bash
$ apt-get install ruby
$ apt-get install python
</code></p>

<p>On Red Hat based distros like Fedora, CentOS, etc you can use yum
instead:</p>

<p><code>bash
$ yum install ruby
$ yum install python
</code></p>

<p>You should keep in mind the fact that both Ruby and Python have two
version that are commonly used at the moment. Ruby's current version
is <em>1.9.2</em> and Python's is <em>3.2</em>. For various reasons(like backward
compatibility for instance), however, the current versions are not
widely deployed yet(especially Python 3). In most Linux distributions
the package ruby will actually be Ruby 1.8.x and the package python
will be Python 2.7.x. If your distribution is one of those - look for
packages named ruby19(or similar) and python3:</p>

<p><code>bash
$ apt-get install ruby19
$ apt-get install python3
</code></p>

<p>or on a Red Hat system:</p>

<p><code>bash
$ yum install ruby19
$ yum install python3
</code></p>

<p>Using the distribution package management system is a simple solution,
but in the case of Ruby it might not be best one. Most Ruby hackers
favour a powerful bash script called RVM(Ruby Version Manager) that
allows you to install several different version(or flavours of Ruby)
and switch easily between them. Please refer to the official
<a href="https://rvm.beginrescueend.com/">RVM documentation</a> for installation
and usage instructions.</p>

<p><strong>Windows installation</strong></p>

<p>Installing Ruby on Windows used to be a pretty hard task, but this is
no longer the case now thanks to
<a href="http://rubyinstaller.org/">the RubyInstaller for Windows</a>. This is a
self-contained Windows-based installer that includes the Ruby
language, an execution environment, important documentation, and
more. It has two editions one for the older 1.8.x Ruby branch and one
for the current 1.9.x.</p>

<p>Python has several installation options for Windows - the most obvious
being the
<a href="http://python.org/ftp/python/3.2/python-3.2.msi">official Python installer for Windows</a>. <a href="http://www.activestate.com/activepython">ActiveState's ActivePython</a>
is another popular option packed with more features, but you should
keep in mind that although the Community Edition is free ActivePython
is not an open-source project. Personally I prefer ActivePython. Other
prebuilt Python binaries for Windows are also available, but are not
commonly used.</p>

<p><strong>OS X installation</strong></p>

<p>Ruby is generally preinstalled on OSX, but OSX users can also install
it via <a href="http://mxcl.github.com/homebrew/">homebrew</a> or RVM(as mentioned in the Linux section).</p>

<p>The is an official <a href="http://python.org/ftp/python/3.2/python-3.2-macosx10.6.dmg">Python package for OSX</a> available. Most users
will probably prefer using homebrew, however.</p>

<h2>Syntax &amp; code structure</h2>

<p>Ruby makes heavy use of braces and keywords(like do/then/end) to
delimit blocks of code. Python relies simply on indentation.</p>

<p>``` python
def fact(n):</p>

<pre><code>return reduce(lambda x, y: x * y, range(1, n + 1))
</code></pre>

<p>```</p>

<p>Same thing in Ruby:</p>

<p><code>ruby
def fact(n)
  (1..n).reduce(:*)
end
</code></p>

<p>I personally prefer the Python approach since it enforces the code
semantics based on the code structure alone without imposing special
syntax.</p>

<p>As a side node you might take under consideration that the Ruby method
definition doesn't have an explicit return value. The value of the
last expression in the method's body becomes automatically the
method's return value. Lisp developers will find this familiar. Java
and C# developers will probably find it a bit confusing. There is a
<code>return</code> in Ruby, though, it's just rarely used.</p>

<p>Both languages have support for nested function definitions.</p>

<p>Both languages have support for "top-level" functions - that live(or
seem to live) outside classes and modules(something not possible in
Java for instance). This makes them good for general purpose
scripting. While I would still prefer to do my system administration
with shell and Perl scripts - Ruby and Python offer a solid
alternative. Python has a richer system administration library so I'd
prefer it over Ruby for such tasks.</p>

<p>Ruby has a lot of crust("heritage") from Perl - like a myriad of
special variables that are now more or less deprecated. It also has
much syntactic sugar - for instance do/end is commonly replaced by {}
for blocks that are only one line long, there is special syntax for
hashtables, whose keys are symbols, etc.</p>

<p>Since special symbols(non alphanumeric) are allowed in Ruby
identifiers Ruby uses them to impose some naming conventions to make
the source code a bit more readable in certain scenarios - for
instance predicate methods(those that return true or false) have names
that end with ?(usually) like even?, odd?, prime?, etc. Methods that
mutate the object on which they were invoked generally have the !
suffix - sort!, map!, etc. I find this a nice decision. In Ruby you
generally have many ways to achieve the same result:</p>

<p><code>irb
ruby-1.9.2-p0 &gt; 1.even?
 =&gt; false
ruby-1.9.2-p0 &gt; arr = [1, 2, 3]
 =&gt; [1, 2, 3]
ruby-1.9.2-p0 &gt; arr.map { |x| x * 2 }
 =&gt; [2, 4, 6]
ruby-1.9.2-p0 &gt; arr
 =&gt; [1, 2, 3]
ruby-1.9.2-p0 &gt; arr.map! { |x| x * 2 }
 =&gt; [2, 4, 6]
ruby-1.9.2-p0 &gt; arr
 =&gt; [2, 4, 6]
ruby-1.9.2-p0 &gt; (1..5).reduce(:*)
 =&gt; 120
ruby-1.9.2-p0 &gt; (1..5).reduce { |x, y| x * y }
 =&gt; 120
ruby-1.9.2-p0 &gt; (1..5).reduce do |x, y|
ruby-1.9.2-p0 &gt;     x * y
ruby-1.9.2-p0 ?&gt;  end
 =&gt; 120
</code></p>

<p>No such things in Python, however. Python's philosophy is one of
simplicity - no excessive syntax sugar, one true way of doing things.</p>

<p>Both languages have powerful features for organising code in
libraries. I would not go into any details on the subject here, but
I'll share with you the fact that I like Python's more.</p>

<p>Both languages come with a REPL in which you can do some exploratory
programming. Ruby's REPL(irb)  allows you
to do TAB smart completion(amongst other things) by default. To get
TAB completion in the Python REPL you'd have to execute this bit of
code first:</p>

<p>``` pycon</p>

<blockquote><blockquote><blockquote><p>import readline, rlcompleter
readline.parse_and_bind("tab: complete")
```</p></blockquote></blockquote></blockquote>

<p>Alternative you can just stick this code snippet in the
<strong>~/.pythonrc.py</strong> file(create it if it doesn't exist). If you are using
Windows adjust accordingly(you will have to figure out where
pythonrc.py is located there).</p>

<p>Ruby does not have statements - only expressions. This
basically means that everything(objects, method calls) evaluate to
some value(though the value might not be helpful always).</p>

<p>In Python there are some statements such as assignment and <em>if</em>. One
thing I dislike about the Python REPL is that it doesn't print None
values. Compare this bit of Python code:</p>

<p>``` pycon</p>

<blockquote><blockquote><blockquote><p>print("this is a test")
this is a test
```</p></blockquote></blockquote></blockquote>

<p>to this Ruby snippet:</p>

<p><code>irb
ruby-1.9.2-p0 &gt; puts "this is a test"
this is a test
 =&gt; nil
</code></p>

<p>In the Python version we see only the side-effect(the printing), but
not the return value.</p>

<p>Python also ships with a minimalistic IDE called IDLE. If you don't
have it by default after a python installation on Linux probably
you're vendor decided to package IDLE as a separate package. IDLE
offers basic features like syntax highlighting, code completion and
integration with a debugger. It's a good tool for exploratory
programming, but I advise you to pick another tool for serious development.</p>

<h2>Naming conventions</h2>

<p>The naming conventions for both Ruby and Python are mostly the same
which is good if you're using them both on a daily basis - less room
for confusion.</p>

<ul>
<li>variable and method names consisting of more then one word are
written in lowercase with underscores separating the individual
words like_this.</li>
<li>Class names start with capital letter and follow the camel case
naming convention LikeThis. Some of Python's core classes, however,
violate this convention.</li>
<li>Constants are generally written in all caps with underscores
separating the individual words LIKE_THIS.</li>
</ul>


<p>As I mentioned earlier it's customary to add ? as a suffix to
predicate methods and ! to mutator methods in Ruby. This convention is
not always followed unfortunately, even in Ruby's standard library.</p>

<h2>OOP support</h2>

<p>Both Ruby and Python are famous members of the family of object
oriented languages. Unlike languages such as Java and C#, however,
Ruby and Python are pure OOP languages. There is no distinction
between primitive types(such as numbers, characters and booleans) and
reference types(classes). Everything in them is an object and in that
sense it's an instance of some class:</p>

<p>``` pycon</p>

<blockquote><blockquote><blockquote><p>type(1)
<type 'int'>
type("string")
<type 'str'>
type(20.07)
<type 'float'>
type([1, 2, 3])
<type 'list'>
type((1, 2, 3))
<type 'tuple'>
```</p></blockquote></blockquote></blockquote>

<p>And in Ruby:</p>

<p><code>irb
ruby-1.9.2-p0 &gt; 10.class
 =&gt; Fixnum
ruby-1.9.2-p0 &gt; "string".class
 =&gt; String
ruby-1.9.2-p0 &gt; [].class
 =&gt; Array
</code></p>

<p>As you can see core Ruby classes tend to have a bit more standard and
descriptive names than their Python counterparts. You can also notice
that in Python for some task we use built-in functions like type,
instead of method calls. The built-in function will eventually result
in a method invocation(like "string".<strong>class</strong> in the case of
type("string")), but I find this irregularity in the syntax a bit
irritating.</p>

<p>Method invocation is more flexible in Ruby - you can omit braces in
some scenarios. This is handy when you're designing a DSL or you're
trying to implement the uniform access patterns(data should be
accessed through fields and methods in the same manner(read this as
with no braces in method invocations)). On the other hand Python's
uniform syntax makes it easier to spot method invocations.</p>

<p>Both languages don't have operators - just methods. Ruby's OO support
seems to be a bit more mature and polished(at least to me), but
Python's has some touches as well. I particularly like the explicit
self references that are required when you try to access class
members. I'm not too found of the use of special sigils in Ruby to
mark instance(@) and class members(@@). Though they make them visually
distinctive I think we could have lived without them - I'm generally
not a fan of non-uniform syntax rules(and you guessed it - my
favourite language is Lisp).</p>

<p>Ruby's metaprogramming model arguably gives it an edge in the OOP
department, but I won't be discussing the metaprogramming issues here
since they are quite lengthy.</p>

<h2>Functional programming support</h2>

<p>Functional programming has been on the rise lately and it's useful to
examine what kind of support both languages provide for it. Both have
support for lambda functions and respectively - higher-order
functions(functions that accept functions as parameters). Ruby has
code blocks, Python has list comprehensions(generally favoured over
higher-order functions). Both languages lack in their standard libs
the immutable data structures that generally are the code of most
functional programming languages. Here's a few example related to
filtering a sequence based on some predicate:</p>

<p>``` pycon</p>

<blockquote><blockquote><blockquote><p>filter(lambda x: x % 2 == 0, range(1, 11))
[2, 4, 6, 8, 10]
[x for x in range(1, 11) if x % 2 == 0]
[2, 4, 6, 8, 10]
```</p></blockquote></blockquote></blockquote>

<p>Ruby:</p>

<p><code>irb
ruby-1.9.2-p0 &gt; (1..10).select { |x| x.even? }
 =&gt; [2, 4, 6, 8, 10]
ruby-1.9.2-p0 &gt; (1..10).select &amp;:even?
 =&gt; [2, 4, 6, 8, 10]
</code></p>

<p>Ruby's functional programming support seems to be better to me, but
this is of course subjective.</p>

<h2>GUI programming</h2>

<p>Python has tkinker by default - a wrapper around the Tk library(which
sucks in my humble opinion). Ruby doesn't have even this much. Both
have binding for the popular GUI toolkits such wxwidgets, GTK,
QT. From my experimentation with them I can tell you that you'll be
much better off with Python in that department. It's not wonder that
many GTK+ applications these days are implemented in Python. Most Ruby
bindings projects seem to be in a state of disarray, abandonment - I
guess we have to thank Rails for that. Most people think of Rails as
the only use of Ruby which is sad...</p>

<p>Ruby devs shouldn't despair however. JRuby(Ruby's port to the JVM) has
an excellent support for the superb Swing GUI framework and MacRuby
has great support for building Cocoa Apps for OS X. I personally think
that JRuby is the best Ruby distribution out there, but that's the
point of another post entirely.</p>

<h2>3rd party library availability and installation</h2>

<p>It's not secret that part of Python's philosophy is that it comes with
batteries included - meaning that it's standard library is vast and
covers a lot of common tasks. In case you can't find what you're
looking for in it you're left with an number of third party libraries
for Python whose number can only be described by the word epic and
that cover every task conceivable. <a href="http://pypi.python.org/pypi">PyPi</a>
maintains an up-to-date list of Python packages.</p>

<p>You have several options in the department of python package
management. If you're using ActivePython you can use the excellent
<a href="http://code.activestate.com/pypm/">PyPM</a> tool, which provides quick
installation of thousands of packages for many Python versions and
platforms for ActivePython distributions.</p>

<p><a href="http://peak.telecommunity.com/DevCenter/EasyInstall">EasyInstall</a> is another popular solution that works with the standard
Python distribution. Like PyPM it allows you easily search for and
install Python packages from the PyPI that are bundled in Python's
standard egg format(Jave developers might think of eggs as
jars). EasyInstall has splendid documentation so I won't go into any
details here.</p>

<p><a href="http://www.pip-installer.org/en/latest/index.html">pip</a> is a
replacement for easy_install. It uses mostly the same techniques for
finding packages, so packages that were made easy_installable should
be pip-installable as well.</p>

<p>pip is meant to improve on EasyInstall. Some of the improvements:</p>

<ul>
<li>All packages are downloaded before installation. Partially-completed installation doesn’t occur as a result.</li>
<li>Care is taken to present useful output on the console.</li>
<li>The reasons for actions are kept track of. For instance, if a package is being installed, pip keeps track of why that package was required.</li>
<li>Error messages should be useful.</li>
<li>The code is relatively concise and cohesive, making it easier to use programmatically.</li>
<li>Packages don’t have to be installed as egg archives, they can be installed flat (while keeping the egg metadata).</li>
<li>Native support for other version control systems (Git, Mercurial and Bazaar)</li>
<li>Uninstallation of packages.</li>
<li>Simple to define fixed sets of requirements and reliably reproduce a set of packages.</li>
</ul>


<p>pip doesn’t do everything that easy_install does. Specifically:</p>

<ul>
<li>It cannot install from eggs. It only installs from source. (In the future it would be good if it could install binaries from Windows .exe or .msi – binary install on other platforms is not a priority.)</li>
<li>It doesn’t understand Setuptools extras (like package[test]). This should be added eventually.</li>
<li>It is incompatible with some packages that extensively customize distutils or setuptools in their setup.py files.</li>
</ul>


<p>Linux users will also find a great selection of Python libraries
prepackaged for use with the distribution's package manager.</p>

<p>Ruby has an application that is more or less equivalent to EasyInstall
called <a href="http://rubygems.org/">RubyGems</a>(gems are the standard way to distribute Ruby
libraries). Linux users can of course install Ruby libraries with the
distribution's package manager as well.</p>

<p>RubyGems has the following features:</p>

<ul>
<li>Easy Installation and removal of RubyGems packages and their dependents.</li>
<li>Management and control of local packages</li>
<li>Package dependency management</li>
<li>Query, search and list local and remote packages</li>
<li>Multiple version support for installed packages</li>
<li>Web-based interface to view the documentation for your installed gems</li>
<li>Easy to use interface for building gem packages</li>
<li>Simple server for distributing your own gem packages</li>
<li>Easy to use building and publishing of gem packages</li>
</ul>


<p>Using RubyGems, you can:</p>

<ul>
<li>download and install Ruby libraries easily</li>
<li>not worry about libraries A and B depending on different versions of library C</li>
<li>easily remove libraries you no longer use</li>
<li>have power and control over your Ruby platform!</li>
</ul>


<p>A reader pointed out that about 23000 packages are available for
installation through RubyGems and 15000 through PyPI. This, however,
cannot be considered as a certain sign that there are more libraries
available for Ruby than for Python.</p>

<p>Although tools like EasyInstall and RubyGems are easy to use and quite
handy, I as a long-time Linux users dislike them a bit, since they
circumvent the distributions native package handling. Unfortunately
package maintainers cannot find the time to package every Python and
Ruby library available so I guess EasyInstall and RubyGems won't be
going anywhere soon and of course we have to consider Windows users
for whom such applications are of great value given the lack of
unified package management on Windows.</p>

<p>One thing to keep in mind about installing eggs and gems is that some
of them are implemented in C(usually for performance reasons) and are
locally built prior to their installation - an operation bound to fail
if you don't have a C compiler installed.</p>

<h2>Misc</h2>

<p>In terms of performance of the default interpreters CPython and MRI
Ruby Python is the clear winner. One should note, however, is that there
are many how quality implementation of Ruby and Python for different
platforms where the performance situation differs wildly. For instance
Jython is much slower that JRuby. With the addition of invoke_dynamic
in JDK7(basically bytecode level support for dynamic method dispatch)
the performance of JRuby and Jython could potentially be improved
greatly.</p>

<p>In terms of overall usage, market share, job offers and sheer size of
the community and available libraries Python is ahead of Ruby as
well. One of the main supporters of Python is after all none other
than the mighty Google. Ruby has also the unfortunate luck to be
living in the shadow of a single application written in Ruby - Ruby on
Rails, that is arguably more popular than the language itself.</p>

<p>Tooling for dynamic languages is currently not as advance as the one
for static languages. People often joke that Python(Ruby) > Java(C#),
but Python + any python IDE &lt; Java + IntelliJ
IDEA(Eclipse/NetBeans). Python and Ruby IDEs seem to be mostly on par
currently. I do all of my Ruby and Python coding in Emacs, but I do
like RubyMine and PyCharm.</p>

<p>Since they are often used for the creation of webapps one should
consider the deployment issue. Most web hosting companies provide
cheap Python hosting, but very few companies provide Ruby hosting.</p>

<h2>The Python 3 problem</h2>

<p>Python 3 was a great undertaking that improved on a lot of aspects of
the language(for example Unicode support) and the standard library. To
do this it dropped backward compatibility, an act that slowed it's
adoption immensely. Three years have passed since it's release and
still most hosting providers, Linux distros and Python projects hold
on to the older 2.7.x Python branch.</p>

<p>This is a bit of tragedy since Python 3 is truly a great improvement
over Python 2. I mention this because most recent books are written
with Python 3 in mind, but if you land a Python jobs somewhere chances
are you'll have to use Python 2.x.x for the foreseeable future.</p>

<h2>Epilogue</h2>

<p>Ruby and Python are two beautifully engineered languages capable of
just about everything. If you don't know any of them you'll do well to
learn at least one. If you know only one it might not be a terrible
idea to learn the other.</p>

<p>I haven't touched on many language features(like Python generators and
Ruby mixins), but to be honest I'm just tired of typing. One good
place to start your journey to Python is
<a href="http://diveintopython3.org/">"Dive into Python 3"</a>. For Ruby
beginners I'd recommend a copy of
<a href="http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177">"The Ruby Programming Language"</a>.</p>

<p><em>P.S. If you like exploring different programming languages and you're
currently shopping for ideas on the subject of which language to learn
next you might find my recent article
<a href="/blog/2011/04/27/programming-languages-worth-learning/">"Programming languages worth learning"</a>
interesting as well.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parsing numbers from string in Common Lisp]]></title>
    <link href="http://bbatsov.github.com/articles/2011/04/30/parsing-numbers-from-string-in-lisp/"/>
    <updated>2011-04-30T00:00:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2011/04/30/parsing-numbers-from-string-in-lisp</id>
    <content type="html"><![CDATA[<p>One task that often recurs in programming is the need to parse a
string representation a number(or several numbers) and convert it to
its numeric value. Parsing integer value in Common Lisp is fairly
straightforward process - we have the built-in function <strong>PARSE-INTEGER</strong>:</p>

<p><code>cl
(parse-integer "100") ;; =&gt; 100
(parse-integer "100" :radix 2) ;; =&gt; 4
</code></p>

<p>As you can see the function allows you to parse a string
representation of a number in an arbitrary base system(the default is
the <em>decimal</em>). With the keyword argument <strong>:radix</strong> you can specify a
base in the interval 2-36. The function has a few other fancy
capabilities as well - like the ability to process only a part of the
string that has been passed to it and to ignore junk in the input
string. For all the gory details refer to the
<a href="http://www.lispworks.com/documentation/HyperSpec/Body/f_parse_.htm">Lisp HyperSpec</a>.</p>

<p>The problem that most Lisper face soon after is that there is no
matching function PARSE-FLOAT or PARSE-DOUBLE. I'm not sure what
technical reason is hidden beneath this design decision, but I know of
simple way to parse floating point numbers non-the-less. It's built
around the <strong>READ</strong>(The R in REPL) function that allows you read any
S-expression from a string form. The READ function then returns a Lisp
object corresponding to the S-expression read. With that knowledge and
the fact that READ accepts as an optional argument an input stream
from which to read that S-expression(the default is the the standard
input) we can write the following bit of parsing code:</p>

<p><code>cl
(with-input-from-string (in "3.14")
  (read in))
</code></p>

<p>Here we created an input stream that's bound to the string "3.14" and
read one S-expression from it - the floating point object 3.14.</p>

<p>We can even build a more general solution that parses several numbers
in a string, regardless of their actual type(integer or floating
point):</p>

<p><code>cl
(with-input-from-string (in "3.14 5.646 4 9.6")
  (loop for x = (read in nil nil) while x collect x))
;; =&gt; (3.14 5.646 4 9.6)
</code></p>

<p>Hopefully this short article has been helpful. You've also witnessed
one of the practical benefits of having the code in Lisp represented
as data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming languages worth learning]]></title>
    <link href="http://bbatsov.github.com/articles/2011/04/27/programming-languages-worth-learning/"/>
    <updated>2011-04-27T00:00:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2011/04/27/programming-languages-worth-learning</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>Programming languages have always been a passion of mine and through
the years I've learnt quite a few of them. The first one was Pascal,
some 13 years ago, and the last was Scala, just a couple of months ago.</p>

<p>Although the authors of many languages claim that the language they
created is the greatest thing after hot water, this is rarely the
case. Most of the "unique" features are not quite unique, and the truly
unique stuff is often just useless. I don't believe that there is a
single greatest and unparallelled language, but I do believe that some
languages are more valuable them others in term of both theory(the
concepts around which they revolve) and practice(the chances of you
landing a job with them or simply getting a task done).</p>

<p>In this blog post I'll review the ten or so languages that I've found to
be most enlightening/helpful for me over the years. I think that every
professional software engineer should have at least a passing
knowledge of them.</p>

<h2>C</h2>

<p>The C programming language has been around for about forty
years now (it appeared in 1973). While it's often viewed as a higher
level assembly language today in the era of Java, .Net and Python, C
remains the sole choice for doing serious system programming - writing
drivers, all kinds of servers and virtual machines.</p>

<p>Learning C also give you an insight to the inner working of the
computer, like memory management and native data types (based on a CPU's
registries).</p>

<p>The best way to get started with C
hasn't changed in the past 20+ years - just pick a copy of <a href="http://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628">"The C
Programming Language"</a> by K&amp;R.</p>

<h2>Lisp</h2>

<p><blockquote><p>Lisp is worth learning for the profound enlightenment<br/>experience you will have when you finally get it; that experience will<br/>make you a better programmer for the rest of your days, even if you<br/>never actually use Lisp itself a lot.</p><footer><strong>Eric S. Raymond</strong> <cite>How to Become a Hacker</cite></footer></blockquote></p>

<p>One of the oldest programming languages around - created in 1958 and
still relevant today. Important for its unique code is data approach,
advanced code generation facilities (macros) and the ability to develop
software in incremental and interactive fashion.</p>

<p>Although many of the features that originally made it truly
unique (like garbage collection, if expression, function objects) are
now found in many modern languages, Lisp still offers some compelling
alternatives for those interested to explore it.</p>

<p>These days Common Lisp is considered the canonical Lisp dialect - a
multi-paradigm language with excellent support for imperative,
functional and object-oriented programming. Another popular dialect is
Scheme which is a simpler language focused mainly on functional
programming and until recently was a popular choice for teaching
introductory programming classes in many major US
universities (recently it's being displaced by Python).</p>

<p>You cannot start with a better introduction to Common Lisp than Peter
Seibel's
<a href="http://www.gigamonkeys.com/book/">"Practical Common Lisp"</a>. If you
fancy Scheme more take a look at the classic text
<a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">"Structure and Interpretation of Computer Programs"</a>. A
good source of exercises for aspiring Lisp programmers are the
<a href="/Misc/Common%20Lisp/2011/05/04/lisp-problems.html">"Lisp Problems"</a>(a work in progress based on the original "Prolog Problems").</p>

<h2>Java</h2>

<p>Let's face it - if you're in the market for jobs a third of them are
about Java EE or Android development (the other two thirds are probably
related to PHP and .NET). The language is not quite
elegant, but the platform is truly magnificent. Although there are
many other languages targeting the JVM (Scala, Groovy, Clojure, JRuby,
Jython - just to name a few) Java is still predominant by a wide
margin and this is unlikely to change soon. It's actually <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">the most
popular programming language in the world</a>.</p>

<p>I've taught a couple of introductory Java programming courses (in
Bulgarian), but I'd recommend the
<a href="http://www.amazon.com/Core-Java-TM-I--Fundamentals-8th/dp/0132354764/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1303901341&amp;sr=1-1">"Core Java"</a>
book over my lectures any day of
the week. :-)</p>

<h2>Haskell</h2>

<p>Functional programming has been gaining popularity in recent years
with the rise of parallel computers, and of the pure functional
programming languages Haskell is probably the closest to the
mainstream. It features great ideas like type inference, lazy
evaluation, monads, pattern matching. As with Lisp many of the
features of Haskell can be found in more impure packages(like Scala
and Clojure), but Haskell is still the top pure functional language in
my humble opinion.</p>

<p>There are great free Haskell learning resources
on-line like <a href="http://learnyouahaskell.com/">"Learn you a Haskell for great good"</a> and <a href="http://book.realworldhaskell.org/read/">"Real world
Haskell"</a></p>

<h2>Perl</h2>

<p>Once the undisputed king of the Internet Perl has recently fallen down
from grace in its battle with the newer generation of dynamic
languages like PHP, Ruby and Python. While I wouldn't advise anyone to
start writing Web or Enterprise apps with Perl it's still the best language for
writing administration and helper scripts with minimum fuss and maximum
developer throughput. It features the greatest support for text
processing ever and an extremely flexible (albeit a bit of confusing)
syntax.</p>

<p>Perl <a href="http://www.cpan.org/">CPAN</a> is probably the largest collection of third party
libraries for a single language ever assembled.</p>

<p>Pick up a copy of <a href="http://oreilly.com/catalog/9780596520113">"Learning Perl"</a> or just browse the excellent
<em>perldoc</em> and start coding in Perl right away.</p>

<h2>Clojure</h2>

<p>Clojure is a Lisp dialect with an unique support for parallel and
concurrent programming and runs on top of the venerable JVM. If you're
looking to do some serious parallel programming look no further. Other
than that you'll find in Clojure a superb collection of functional
data structures, pervasive use of laziness, higher order functions and
tail-call optimizations,
and some rather novel ideas on the topics of state and
identity. Clojure also cleans up a bit the traditional Lisp
syntax (read this as Clojure has fewer parentheses than say Common Lisp).</p>

<p>To get started I recommend you to watch the free Clojure screencasts
on <a href="http://clojure.blip.tv/">blip.tv</a>.</p>

<h2>Prolog</h2>

<p>The most famous language from the logic programming family. Solving a
problem like a sudoku puzzle in Prolog will be an eye opening
experience for any developer. While it's unlikely that you'll ever use
it practice the ideas found in it, Prolog will truly expand your thinking
horizons.</p>

<p>A good starting point in your journey to Prolog will be
<a href="http://www.learnprolognow.org/">"Learn Prolog Now"</a>. You may do a
follow up with the collection of programming puzzles <a href="http://sites.google.com/site/prologsite/prolog-problems/">"Prolog problems"</a>.</p>

<h2>Ruby</h2>

<p>A pure object oriented dynamic scripting language with a very nice support for
metaprogramming. It has versions written in Java (JRuby) and
.Net (IronRuby) which makes it easy to integrate it with any software
for those popular platforms. The language became popular with the rise of the Ruby
on Rails web framework, but it has many potential applications that don't
involve RoR or web development.</p>

<p><a href="http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1303901367&amp;sr=1-1">"Programming Ruby"</a> and <a href="http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177/ref=sr_1_3?s=books&amp;ie=UTF8&amp;qid=1303901367&amp;sr=1-3">"The Ruby Programming Language"</a> are two of the
best introductory Ruby books around.</p>

<h2>Python</h2>

<p>A pure object oriented dynamic scripting language with a focus on
simplicity, readability and maintainability. Popular for development
of web applications, GUI applications and system administration
utilities. Driven by the motto "There is only one way to do it" and
the philosophy "It comes with battery included". Python is Google's
darling and is widely used by the IT giant.</p>

<p>A nice free on-line book about Python is <a href="http://diveintopython3.org/">"Dive into Python 3"</a>.</p>

<h2>C</h2>

<p>The flagman language of the .NET platform. Similar in many aspects to
Java C# is never-the-less ahead then Java in the innovations
department - first to introduce concepts like Generics and Attributes
to the mainstream programmers. It features some nice improvements over
Java like properties, flexible namespaces and limited type inference.</p>

<p>The primary reason it's included in this list, however, is simply
the sheer amount of job openings for C## developers. In my home
country (Bulgaria) about a third of all programming positions are C##
related.</p>

<p>My favourite C# book happens to be
<a href="http://www.amazon.com/C-Depth-Second-Jon-Skeet/dp/1935182471/ref=sr_1_3?ie=UTF8&amp;qid=1304516334&amp;sr=8-3">"C# in Depth"</a>. You
might happen to enjoy it as well.</p>

<h2>Scala</h2>

<p>An interesting blend of pure object orientation and functional
programming with some concurrency support baked in (actors). Of the
current crop of JVM languages, next to Clojure, Scala looks most
promising. It features an advanced static type system (more advanced
than Haskell's), state of the art Java integration, support for
pattern matching, extractors and other functional goodness. If any
language has a chance of displacing the Java programming language it
must be Scala... Even the father of Java James Gosling acknowledged
that if he decided to replace Java with another language it would be Scala.</p>

<p>Start your journey to Scala mastery with
<a href="http://www.artima.com/pins1ed/">"Programming in Scala"</a>.</p>

<h2>JavaScript</h2>

<p>We cannot conclude this whirlwind tour of notable programming
languages without mentioning the King of the Web, the language that
drove the Web 2.0 revolution - JavaScript. Although it has a terrible
name (JavaScript shares nothing with Java), a questionable programming
model built around mutating global variables, and prototype instead of
class inheritance, it is supported virtually everywhere (most web
browsers have built-in JavaScript interpreters) and any web
developer will do well to learn some JavaScript.</p>

<h2>Epilogue</h2>

<p>We cannot be experts in ten or twenty programming languages - I'm
certain of that. I do,
however, believe that all the ideas and techniques that we discover in
different programming languages will generally enrich our thinking and
make us better software engineers in principle.</p>

<p><em>P.S. If you're wondering why a certain "great" language X is not on
the list keep in mind that this is my personal(and highly subjective)
point of view on the subject. Who knows, in some dark and twisted
place there may very well be people who consider BASIC a programming
language masterpiece... :-)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Incremental development with Scala and JRebel]]></title>
    <link href="http://bbatsov.github.com/articles/2011/04/26/jrebel-with-scala/"/>
    <updated>2011-04-26T00:00:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2011/04/26/jrebel-with-scala</id>
    <content type="html"><![CDATA[<p>One of the things I love most about Lisp development is the ability to
develop applications in an incremental interactive manner - you write
one function, compile it, load into your current REPL session, make
some adjustments and repeat this process until you get satisfactory
results. You never stop to compile your project, you never have to
restart your application server. Without those distractions it's
easier to maintain your concentration and to remain in the <em>flow</em>.</p>

<p>With languages like Scala and Java, however, you cannot do this - at
least without a bit of external help. This help comes in the form of an
application called <a href="http://www.zeroturnaround.com/jrebel/">JRebel</a>, which basically reloads the classes in your
program as you make changes to them and recompile them. JRebel is a commercial
application and generally you have to pay to use it... unless you want
to you use it for Scala development, that is. ZeroTurnaround(the
company that makes JRebel) offers
<a href="http://sales.zeroturnaround.com/wp-content/themes/zeroturnaround4.0/modals/applyForLicense.php">free licences to Scala developers</a>
and if you're one of them you should definitely get one.</p>

<p>Installing JRebel is trivial - generally you have to only extract a
zip file(or use an installer) somewhere and drop in the JRebel folder
the licence file that they have e-mail you. Afterwards you simply have
to integrate JRebel with your build system. JRebel can also be
integrated with IDEs, but I want cover this here. I use mostly
<a href="http://maven.apache.org">Maven 3</a> and
<a href="http://code.google.com/p/simple-build-tool/">SBT</a> so I'll show you
what to do for them. With Maven you have to add the following to the
<em>$MAVEN_OPTS</em> environmental variable:</p>

<p><code>bash
export MAVEN_OPTS=-noverify -javaagent:/home/bozhidar/work/jrebel/jrebel.jar
</code></p>

<p>Since most people use JRebel for web development to avoid the need to
restart their application containers and Scala's most prominent
framework is <a href="http://liftweb.net">Lift</a> you'd probably want to enable
the JRebel Lift plug-in as well:</p>

<p><code>bash
export MAVEN_OPTS=-noverify -javaagent:/home/bozhidar/work/jrebel/jrebel.jar
 -Drebel.lift_plugin=true
</code></p>

<p>Stick this in your shell's init file and source it to make it
available in the shell.</p>

<p>Now when you start your web app with</p>

<p><code>bash
mvn jetty:run
</code></p>

<p>And the continuous Scala compilation with</p>

<p><code>bash
mvn scala:cc
</code></p>

<p>The compiler with pickup the changes you made and JRebel will reload
the changed classes behind the scenes. The development process this
way starts to feel a bit like using a scripting language such as Ruby
or PHP.</p>

<p>If you're using SBT you should modify the sbt startup script to
include the same options that I mentioned in the section about Maven
configuration. Mine sbt script looks like this:</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>java -noverify -javaagent:/home/bozhidar/work/jrebel/jrebel.jar
 -Drebel.lift_plugin=true -XX:+CMSClassUnloadingEnabled
 -XX:MaxPermSize=512m -Xmx512M -Xss2M -jar <code>dirname $0</code>/sbt-launch.jar
 "$@"
```</p>

<p>Another use for JRebel is the Scala REPL itself. When you start the
REPL from inside SBT for instance with the command:</p>

<p><code>bash
sbt console
</code></p>

<p>changes to the imported classes will be reflected automatically
without the need to do a <em>:replay</em> or restart the REPL - something
reminiscent of the interactive Lisp programming I mentioned earlier.</p>

<p>So what are you waiting for? Go grab JRebel and speed up your Scala
development process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs Dev Kit]]></title>
    <link href="http://bbatsov.github.com/articles/2011/04/24/emacs-dev-kit/"/>
    <updated>2011-04-24T00:00:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2011/04/24/emacs-dev-kit</id>
    <content type="html"><![CDATA[<p>During the past few months I've been working on a project to convert
my vast Emacs configuration into something generally useful and
self-contained that could help the general software engineer. Thus the
<a href="https://github.com/bbatsov/emacs-dev-kit">Emacs Dev Kit</a> was
born. Conceptually it's similar to the older
<a href="https://github.com/technomancy/emacs-starter-kit">Emacs Starter Kit</a>
and it even shares a bit of code with it. The Emacs Dev Kit, however,
target more programming languages and features more
customizations/enhancements.</p>

<p>EDT relies on ELPA for packages that are available there and packages
everything else locally. At some point I've played with the idea of
using el-get instead, but I had a lot of problems with it and thought
that using only ELPA would be better since it would be part of
Emacs 24. Everything is tested only on the latest version of GNU
Emacs(currently 23.2). I've tried to do everything in the most
efficient and modern way - for instance SLIME is supposed to be
installed via Quicklisp so it could be easily updated without waiting
for a new version of the EDK.</p>

<p>EDK currently offers enhanced(well, I know that this is subjective,
but it feels enhanced at least to me) support for the following
languages:</p>

<ul>
<li>C/C++</li>
<li>Clojure</li>
<li>Common Lisp</li>
<li>Emacs Lisp</li>
<li>Haskell</li>
<li>Java</li>
<li>LaTeX</li>
<li>Perl</li>
<li>Prolog</li>
<li>Python</li>
<li>Ruby</li>
<li>Scala</li>
<li>Scheme</li>
<li>XML</li>
</ul>


<p>It also offers an advanced ERC configuration(so that you can ask your
questions on #freenode), extended keybindings and lots of general
purpose utility functions.</p>

<p>EDT goes a step further and even includes a different color-theme by
default - zenburn. You can turn it off easily of course, but I have
the feeling that many programmers will appreciate its eye strain
reducing qualities.</p>

<p>The project is still very young and mostly untested. I'd be thankful
for feedback, bug reports and suggestions.</p>
]]></content>
  </entry>
  
</feed>
