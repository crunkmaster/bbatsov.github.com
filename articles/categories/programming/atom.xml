<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | (think)]]></title>
  <link href="http://bbatsov.github.com/articles/categories/programming/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2013-07-01T16:55:37+03:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Tip #3: Matching on an Object's Class in a Case Expression]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/ruby-tip-number-3-matching-on-an-objects-class-in-a-case-expression/"/>
    <updated>2012-10-14T15:23:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/ruby-tip-number-3-matching-on-an-objects-class-in-a-case-expression</id>
    <content type="html"><![CDATA[<p>From time to time you might want to take different actions depending
on an object's class. One handy way to do so is with a <code>case</code>
expression:</p>

<p><code>ruby
case object
when Fixnum then puts 'Object is an integer number'
when String then puts 'Object is a string'
when Hash then puts 'Object is a hash'
end
</code></p>

<p>Behind the scenes this is transformed to:</p>

<p><code>ruby
if Fixnum === object
  puts 'Object is an integer number'
elsif String === object
  puts 'Object is a string'
elsif Hash === object
  puts 'Object is a hash'
end
</code></p>

<p>A lot of people seem to make the following mistake, so beware:</p>

<p>``` ruby</p>

<h1>WRONG - Class === Class will return false</h1>

<p>case object.class
when Fixnum then puts 'Object is an integer number'
when String then puts 'Object is a string'
when Hash then puts 'Object is a hash'
end
```</p>

<p>Hopefully you'll find this small tip useful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up fallback locale(s) in Rails 3]]></title>
    <link href="http://bbatsov.github.com/articles/2012/09/12/setting-up-fallback-locale-s-in-rails-3/"/>
    <updated>2012-09-12T14:56:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/09/12/setting-up-fallback-locale-s-in-rails-3</id>
    <content type="html"><![CDATA[<p>I18n(internationalization) and l10n(localization) are topics that are
covered superbly by the
<a href="http://guides.rubyonrails.org/i18n.html">Rails Guides</a>. The one thing
that's left out is the setup of fallback locales in case something is
missing in the currently selected locale (and mark my words -
something probably is). Therefore I'm writing this
post.</p>

<p>Ideally we'd have i18n-ed and localized everything perfectly, but
that's rarely the case. I'd rather have the users see things from
another locale than error messages. So how do we do that in Rails 3?
It's pretty simple actually. There are three fallback options we can
select and they all require small changes to the <code>application.rb</code> file.</p>

<ul>
<li>fallback to the default locale</li>
</ul>


<p>``` ruby</p>

<h1>fallback to what's specified in config.i18n.default_locale</h1>

<p>config.i18n.fallbacks = true
```</p>

<ul>
<li>fallback to a specified locale</li>
</ul>


<p>``` ruby</p>

<h1>fallback to en, regardless of what's in config.i18n.default_locale</h1>

<p>config.i18n.fallbacks = [:en]
```</p>

<ul>
<li>specify a fallback map (different fallback locales for different
locales)</li>
</ul>


<p>``` ruby</p>

<h1>missing translations of es and fr languages will fallback to english</h1>

<h1>missing translations in german will fallback to french</h1>

<p>config.i18n.fallbacks = {'es' => 'en', 'fr' => 'en', 'de' => 'fr'}
```</p>

<p>Well, that's the gist of it. Happy coding!</p>
]]></content>
  </entry>
  
</feed>
