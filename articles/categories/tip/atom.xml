<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tip | (think)]]></title>
  <link href="http://bbatsov.github.com/articles/categories/tip/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2012-10-20T20:46:52+03:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs Tip #6: Remove variable &amp; function definitions]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions/"/>
    <updated>2012-10-20T20:29:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/20/emacs-tip-number-6-remove-variable-and-function-definitions</id>
    <content type="html"><![CDATA[<p>From time to time you might want to void (unbind) a variable or a
function definition in Emacs. Most often you'll probably be dealing
with variables created with <code>defvar</code> whose values you'll want to
update.  The magic functions you need are the following:</p>

<p><code>cl
;; this will make the symbol my-nasty-variable's value void
(makunbound 'my-nasty-variable)
;; this will make the symbol my-nasty-function's
;; function definition void
(fmakunbound 'my-nasty-function)
</code></p>

<p>The names aren't exactly intuitive and even I happen to forget them from time to
time. Now at least I'll now where to look for them if that happens
again. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Tip #1: Use Pry Instead of irb for the Rails Console]]></title>
    <link href="http://bbatsov.github.com/articles/2012/10/14/rails-tip-number-1-use-pry-instead-of-irb-for-the-rails-console/"/>
    <updated>2012-10-14T18:06:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2012/10/14/rails-tip-number-1-use-pry-instead-of-irb-for-the-rails-console</id>
    <content type="html"><![CDATA[<p>This tip is going to be a really short one. Hopefully by now you've
heard about <a href="http://pryrepl.org/">pry</a> - a fantastic <code>irb</code>
replacement, that somewhat reminds me of the mighty Lisp REPLs. What
you might not know is how to hook it into Rails so that the <code>rails
console</code> (a.k.a. <code>rails c</code>) command would fire a pry shell instead of
an irb one. There are several ways to do so, but I find one
particularly straightforward - the awesome little gem
<a href="https://github.com/rweng/pry-rails">pry-rails</a>.</p>

<p>So what are you waiting for? Go ahead, install the little sucker and
enjoy your new pry-powered Rails console.</p>
]]></content>
  </entry>
  
</feed>
