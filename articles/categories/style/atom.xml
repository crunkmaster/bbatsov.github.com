<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Style | (think)]]></title>
  <link href="http://bbatsov.github.com/articles/categories/style/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2013-06-27T14:23:09+03:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #2: Favor sprintf(format) over String#%]]></title>
    <link href="http://bbatsov.github.com/articles/2013/06/27/the-elements-of-style-in-ruby-number-2-favor-sprintf-format-over-string-number-percent/"/>
    <updated>2013-06-27T13:15:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/06/27/the-elements-of-style-in-ruby-number-2-favor-sprintf-format-over-string-number-percent</id>
    <content type="html"><![CDATA[<p>Today's topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Favor the use of <code>sprintf</code> and its alias <code>format</code> over the fairly </br>
cryptic <code>String#%</code> method.</p></blockquote>

<p><code>Kernel#sprintf</code> and <code>String#%</code> basically do the same thing - the main
difference is that <code>sprintf</code> is generally used as a command(it does
not operate on its receiver) and <code>String#%</code> is obviously an instance
method of the class <code>String</code>. Here's the two of them in action:</p>

<p>``` ruby
'%d %d' % [20, 10]</p>

<h1>=> '20 10'</h1>

<p>sprintf('%d %d', 20, 10)</p>

<h1>=> '20 10'</h1>

<p>```</p>

<p>So, considering they both do the same thing why should you opt to use
<code>sprintf</code> instead of <code>%</code>? Here's a few reasons:</p>

<ul>
<li><code>%</code> takes either a single element or an array of elements as its
sole argument; <code>sprintf</code> consistently takes a variable number of
arguments.</li>
</ul>


<p>``` ruby
'%d' % 20</p>

<h1>=> '20'</h1>

<p>'%d %d' % [20, 10]</p>

<h1>=> '20 10'</h1>

<p>sprintf('%d %d', 20)</p>

<h1>=> '20'</h1>

<p>sprintf('%d %d', 20, 10)</p>

<h1>=> '20 10'</h1>

<p>```</p>

<p>Personally, I dislike such inconsistencies a lot.</p>

<ul>
<li>It's not always clear what <code>%</code> means without additional
context. Take a loot at this short snippet:</li>
</ul>


<p>``` ruby</p>

<h1>a and b are variables</h1>

<p>a % b
```</p>

<p>Without some knowledge of <code>a</code> and <code>b</code> we cannot know if we're dealing
with a modulo operation (if <code>a</code> and <code>b</code> are fixnums), <code>String#%</code> or if
<code>a</code> is an instance of some other class which has implemented the <code>%</code>
method.</p>

<p>With <code>sprintf</code> its always crystal-clear what's going on.</p>

<ul>
<li><code>%</code> does not carry much of a semantic value in it.</li>
</ul>


<p>Sure, it was named so because of the <code>%</code> placeholders in the target
string, but people not familiar with that operator will probably be
confused by such odd-looking syntax. <code>sprintf</code> on the other hand is
old as time (so people reading your code have probably encountered it
somewhere before) and beside that it's fairly easy to remember that it
stands for <code>string print formatted</code> (or something similar). On a
related note - the use of <code>Kernel%sprintf</code>'s alias <code>format</code> yields
even better readability, since <code>format</code> is obviously less cryptic name
than <code>sprintf</code> and the same name is employed in many programming
languages (most notably <code>Java</code> and many Lisp dialects).</p>

<p>There's one thing about <code>sprintf/format</code> that I dislike, though. It
doesn't make that much sense to have such an operation as command in a
OO language like Ruby. Alas, those things are not up to me - I guess
the authors had something in mind when they made that particular
decision about the standard library.</p>

<p>In an ideal world the standard library would have included a
<code>String#format</code> method, that took variable number of arguments. For
some reason (unknown to me) - that has not happened (and maybe never
will). For now the use of <code>Kernel#sprintf</code> (and <code>Kernel#format</code>)
yields the best results when it comes down to code clarity and
consistency. I encourage you to use them (<code>format</code> in particular)!</p>

<p>As usual I'm looking forward to hearing you thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
</feed>
