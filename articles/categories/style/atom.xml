<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Style | (think)]]></title>
  <link href="http://bbatsov.github.com/articles/categories/style/atom.xml" rel="self"/>
  <link href="http://bbatsov.github.com/"/>
  <updated>2013-07-10T16:30:22+03:00</updated>
  <id>http://bbatsov.github.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #7: The case against ===]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/10/the-elements-of-style-in-ruby-number-7-the-case-against-equals-equals-equals/"/>
    <updated>2013-07-10T15:44:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/10/the-elements-of-style-in-ruby-number-7-the-case-against-equals-equals-equals</id>
    <content type="html"><![CDATA[<p>Today we'll discuss the following section from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Avoid explicit use of the case equality operator <code>===</code>. As it name<br/>
implies it's meant to be used implicitly by <code>case</code> expressions and<br/>
outside of them it yields some pretty confusing code.</p></blockquote>

<p>For those of you who don't know of the case equality operator <code>===</code> -
it's the magic behind <code>case</code> that allows us to write code like this:</p>

<p><code>ruby
case something
when Array then ...
when 1..100 then ...
when /some_regexp/ then ...
end
</code></p>

<p>Ruby will convert the above code to something like:</p>

<p><code>ruby
case something
when Array === something then ...
when 1..100 === something then ...
when /some_regexp/ === something then...
end
</code></p>

<p>For many classes (like <code>Fixnum</code> and <code>String</code>) <code>===</code> will behave the
same way as <code>==</code>.  On the other hand - <code>Module</code>, <code>Range</code> and <code>Regexp</code>
define customized versions of the operator method <code>===</code>.  Knowing how
these 3 classes have defined <code>===</code>, the case expression is also
equivalent to this one:</p>

<p><code>ruby
case something
when something.is_a? Array then ...
when 1..100.include? something then ...
when something =~ /some_regexp/ then ...
end
</code></p>

<p>So far everything is peachy, right?</p>

<p>The problem with the <code>===</code> is that when some people see it they decide
it's very <em>cool</em> and start using it all over their code instead of
its much clearer alternatives. I've seen <code>===</code> (ab)used quite often for <strong>instance of</strong> checks.</p>

<p>``` ruby</p>

<h1>wtf, why doesn't this work???</h1>

<h1>extremely common mistake I've seen numerous times</h1>

<p>return unless a === Array</p>

<h1>=== is defined in Module</h1>

<p>return unless Array === a # same as Array.===(a)
```</p>

<p>I've also seen it used many times for range inclusion
tests. Fortunately nobody has decided so far that <code>===</code> is preferable
to <code>=~</code> for regular expressions.</p>

<p>It should be our utmost goal as programmers to produce clear and
easily digestible code. This means we should abstain ourselves from
doing clever tricks like:</p>

<p><code>ruby
Array === something
(1..100) === 7
/something/ === some_string
</code></p>

<p>And bet on clarity instead:</p>

<p><code>ruby
something.is_a?(Array)
(1..100).include?(7)
some_string =~ /something/
</code></p>

<p>They don't call it the <strong>case equality operator</strong> for no reason - it's
meant to be used internally by <code>case</code> expressions. I guess if it were
a regular method (instead of an operator method) we'd never have had
to deal with its abuse.</p>

<p>As usual I'm looking forward
to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>

<p>Code long and prosper!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #6: Attributes Redux]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/04/the-elements-of-style-in-ruby-number-6-attributes-redux/"/>
    <updated>2013-07-04T15:36:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/04/the-elements-of-style-in-ruby-number-6-attributes-redux</id>
    <content type="html"><![CDATA[<p>Today we'll talk about attributes in Ruby.</p>

<p>Let's start with the following rule from the
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Use the <code>attr</code> family of functions to define trivial accessors or mutators.</p></blockquote>

<p>Everyone who's coded a bit of Ruby knows it's preferable to generate
trivial reader and writer methods via some metaprogramming magic
instead of writing them by hand. The methods from <code>Module</code> <code>attr</code>,
<code>attr_reader</code>, <code>attr_writer</code> and <code>attr_accessor</code> do exactly that kind
of magic. Here's an example using <code>attr_reader</code>:</p>

<p>``` ruby</p>

<h1>bad</h1>

<p>class Person
  def initialize(first_name, last_name)</p>

<pre><code>@first_name = first_name
@last_name = last_name
</code></pre>

<p>  end</p>

<p>  def first_name</p>

<pre><code>@first_name
</code></pre>

<p>  end</p>

<p>  def last_name</p>

<pre><code>@last_name
</code></pre>

<p>  end
end</p>

<h1>good</h1>

<p>class Person
  attr_reader :first_name, :last_name</p>

<p>  def initialize(first_name, last_name)</p>

<pre><code>@first_name = first_name
@last_name = last_name
</code></pre>

<p>  end
end
```</p>

<p>Here's <code>attr_writer</code> in action:</p>

<p>``` ruby</p>

<h1>bad</h1>

<p>class Person
  def initialize(name, name)</p>

<pre><code>@name = name
</code></pre>

<p>  end</p>

<p>  def name=(name)</p>

<pre><code>@name = name
</code></pre>

<p>  end
end</p>

<h1>good</h1>

<p>class Person
  attr_writer :name</p>

<p>  def initialize(name)</p>

<pre><code>@name = name
</code></pre>

<p>  end
end
```</p>

<p><code>attr_accessor</code> combines the two:</p>

<p>``` ruby</p>

<h1>bad</h1>

<p>class Person
  def initialize(name, name)</p>

<pre><code>@name = name
</code></pre>

<p>  end</p>

<p>  def name</p>

<pre><code>@name
</code></pre>

<p>  end</p>

<p>  def name=(name)</p>

<pre><code>@name = name
</code></pre>

<p>  end
end</p>

<h1>good</h1>

<p>class Person
  attr_accessor :name</p>

<p>  def initialize(name)</p>

<pre><code>@name = name
</code></pre>

<p>  end
end
```</p>

<p>Pretty sure none of you has learned anything new at this point. Now we start with the fun part...</p>

<p>How many of you know how <code>attr</code> behaves? Are you totally sure? Let's
see what the style guide says about it:</p>

<blockquote><p>Avoid the use of <code>attr</code>. Use <code>attr_reader</code> and <code>attr_accessor</code> instead.</p></blockquote>

<p><code>attr</code>'s behavior changed between Ruby 1.8 and 1.9. In Ruby 1.8 <code>attr</code>
created a single <em>reader</em> method. With an optional second boolean argument it
created both a <em>reader</em> and a <em>writer</em> method (a la <code>attr_accessor</code>).</p>

<p>``` ruby</p>

<h1>Ruby 1.8</h1>

<h1>same as attr_reader :something</h1>

<p>attr :something</p>

<h1>creates a single attribute accessor (deprecated in 1.9) - same as attr_accessor :something</h1>

<p>attr :something, true</p>

<h1>can't do this</h1>

<p>attr :one, :two, :three
```</p>

<p>Note that you cannot pass multiple attribute names to <code>attr</code> in Ruby 1.8.</p>

<p>In Ruby 1.9 calling <code>attr</code> with an attribute name and a boolean is
deprecated and it now behaves a lot more like <code>attr_reader</code>.</p>

<p>``` ruby</p>

<h1>Ruby 1.9</h1>

<p>attr :one, :two, :three # behaves as attr_reader
```</p>

<p>Given all this facts it's not a surprise that so many people think
it's a bad idea to use <code>attr</code>. I guess if the design of that portion
of the API were up to me I'd have made <code>attr</code> behave like
<code>attr_accessor</code> from day 1. The name of <code>attr_accessor</code> is a bit of a
misnomer since <code>accessor</code> is hardly a synonym for <strong>reader and
writer</strong>. Anyways, this is not of particular importance. Off to the
next item on our agenda for today.</p>

<p>Is this something that should have been defined with <code>attr_reader</code>?</p>

<p><code>ruby
def something
  @something_else
end
</code></p>

<p>Basically it call comes down to whether this is a trivial reader method or not.
Some people would argue that because the name of the instance variable
and the name of the method are not the same - it's not. I'd argue the
opposite case - it is! The name of the method does not change the
semantics. In essence you're simply in need of an alias for the
<em>default</em> attribute reader method:</p>

<p><code>ruby
attr_reader :something_else
alias_method :something, :something_else
</code></p>

<p>Boolean attributes are a bit special, since generally we'd like to
have a <code>?</code> at the end of predicate method names, but this cannot be done with
<code>attr_reader/attr_accessor</code>. Some people would simple hand-code such
methods:</p>

<p><code>ruby
def something?
  @something
end
</code></p>

<p>I'd employ <code>alias_method</code> again:</p>

<p><code>
attr_reader :something
alias_method :something?, :something
</code></p>

<p>I wouldn't call one style necessary good or bad - it's more of a personal preference.</p>

<p>One final note - you should use <code>attr_</code> only for trivial reader and writer methods (trivial means that
they do not need any defensive copying or pre-update checks).</p>

<p>Consider this:</p>

<p>``` ruby</p>

<h1>attr_reader generates code like this</h1>

<p>def something
  @something
end
```</p>

<p>This would expose <code>@something</code> to external modifications if it's a
mutable object. To shield yourself from this you can use defensive
copying (or freezing when applicable):</p>

<p>``` ruby</p>

<h1>defensive copying in action</h1>

<p>def something
  @something.dup # return a copy of @something
end
```</p>

<p>Same goes for attributes writers. If you have an <code>age</code> attribute and you
want to enforce that it should be a positive number you'd generally roll your
own writer:</p>

<p>``` ruby
def age=(age)
  fail 'Age should be a positive number!' unless age > 0</p>

<p>  @age = age
end
```</p>

<p>This post has become way too long, so I'll be wrapping it up. I hope
you've found my musing on the subject of attributes useful.</p>

<p>As usual I'm looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>

<p><strong>P.S.</strong> Happy 4th of July to all my American readers! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #5: Readability of long numeric literals]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/02/the-elements-of-style-in-ruby-number-5-readability-of-long-numeric-literals/"/>
    <updated>2013-07-02T15:01:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/02/the-elements-of-style-in-ruby-number-5-readability-of-long-numeric-literals</id>
    <content type="html"><![CDATA[<p>Today's topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Add underscores to large numeric literals to improve their readability.</p></blockquote>

<p>Most of the programs we write feature a substantial number of numeric
literals(e.g. <code>10</code>, <code>0.34</code>, <code>0b1010</code>, <code>0123</code>, <code>0xCAFE</code>). There is nothing
strange or unusual about that. From time to time, however, those literals are pretty long:</p>

<p><code>
MAX_SIZE = 10000000000
DEVIATION = 0.2343434343
BIT_MASK = 0b100101010101
</code></p>

<p>I'm pretty sure most of you would have pretty hard time to quickly
digest a number written in this way - lots of digits and no separators
between them to help us discern the number's <code>structure</code>. At this
point <code>_</code> makes a dramatic appearance and comes to the rescue:</p>

<p><code>
MAX_SIZE = 10_000_000_000
DEVIATION = 0.2_343_434_343
BIT_MASK = 0b1001_0101_0101
</code></p>

<p>The addition of a few <code>_</code> improves the readability of those huge literals a ton!</p>

<p>The underscores we add to numeric literals are ignored by <code>Ruby</code>:</p>

<p>``` ruby
100_000</p>

<h1>=> 100000</h1>

<p>```</p>

<p>As you can see from the preceding example nothing's lost or changed -
we've only gained readability and eased the parsing burden on our
brains.</p>

<p>Obviously we should not overdo <code>_</code>:</p>

<p>``` ruby</p>

<h1>short literals are pretty readable on their own</h1>

<h1>bad</h1>

<p>1_00</p>

<h1>good</h1>

<p>100
```</p>

<p>Personally, when dealing with decimal literals, I tend to use <code>_</code> for
numbers with at 5 least digits(e.g. <code>11_948</code>). The number of digits to separate with
<code>_</code> depends on the numeric base - in decimal it makes sense to group
digits by 3(<code>1_000_000</code>), in binary by 4(<code>0b1111_1010_1110</code>), etc.</p>

<p>That's all for today folks! Hope I managed to convince at least a few
of you of the benefits of using underscores in your long numeric literals.</p>

<p>As usual I'm looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #4: Array#join vs Array#*]]></title>
    <link href="http://bbatsov.github.com/articles/2013/07/01/the-elements-of-style-in-ruby-number-4-array-number-join-vs-array-number-star/"/>
    <updated>2013-07-01T16:28:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/07/01/the-elements-of-style-in-ruby-number-4-array-number-join-vs-array-number-star</id>
    <content type="html"><![CDATA[<p>Today's topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Favor the use of <code>Array#join</code> over the fairly cryptic <code>Array#*</code> with
a string argument.</p></blockquote>

<p><code>Array#join</code> and <code>Array#*</code> (with a string argument) behave exactly the same:</p>

<p>``` ruby
%w(Bruce Wayne).join(' ')</p>

<h1>=> "Bruce Wayne"</h1>

<p>%w(Bruce Wayne) * ' '</p>

<h1>=> "Bruce Wayne"</h1>

<p>```</p>

<p>So, considering they both do the same thing why should you opt to use
<code>join</code> instead of <code>*</code>? Here's a few reasons:</p>

<ul>
<li><code>*</code> behaves totally differently when passed an integer argument:</li>
</ul>


<p>``` ruby
[1 2] * 3</p>

<h1>=> [1 2 1 2 1 2]</h1>

<p>```</p>

<p>Personally, I'd expect this to be only behavior of such an operator
method and find the alternative one (with a string argument) to be
pretty much counter-intuitive.</p>

<ul>
<li>It's not always clear what <code>*</code> means without additional
context. Take a look at this short snippet:</li>
</ul>


<p>``` ruby</p>

<h1>a and b are variables</h1>

<p>a * b
```</p>

<p>Without some knowledge of <code>a</code> and <code>b</code> we cannot be certain what this
code is going to do. It's hard even to speculate what the code is
going to do. Obviously better variable names would certainly help, but
the point still stands.</p>

<p><code>
a.join(b)
</code></p>

<p>While we still cannot be absolutely certain, it's highly likely that <code>a</code> is
an <code>Array</code> and <code>b</code> is a <code>String</code>.</p>

<ul>
<li><code>*</code> does not carry much of a semantic value in it.</li>
</ul>


<p>Unlike <code>String#%</code>, <code>Array#*</code> with a string argument carries pretty
much no meaning. It's absolutely beyond me how this came into
existence. On the other hand the behavior of <code>Array#*</code> with an integer
argument is pretty reasonable. Here we see a classic example of the
notion that too much operator overloading can be a bad thing, leading
to some pretty unreadable code. An operator should be employed only
when it's use would add clarity to the code, not take clarity away.</p>

<p><code>Array#*</code> has one thing going for it, however - the fact that few
people know about its use as a substitute for <code>Array#join</code>. I hope
they realize that some unknown features are unknown for a reason -
because it's bad idea to make use of them.</p>

<p>As usual I'm looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #3: Make sure something is an array]]></title>
    <link href="http://bbatsov.github.com/articles/2013/06/28/the-elements-of-style-in-ruby-number-3-make-sure-something-is-an-array/"/>
    <updated>2013-06-28T15:39:00+03:00</updated>
    <id>http://bbatsov.github.com/articles/2013/06/28/the-elements-of-style-in-ruby-number-3-make-sure-something-is-an-array</id>
    <content type="html"><![CDATA[<p>The subject of today's post is the following rule from the
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Use <code>[*var]</code> or <code>Array()</code> instead of an explicit <code>Array</code> check, when dealing with a </br>
variable you want to treat as an Array, but you're not certain it's </br>
an array.</p></blockquote>

<p>Countless times I've seen code like this:</p>

<p><code>ruby
paths = [paths] unless paths.is_a? Array
paths.each { |path| do_something(path) }
</code></p>

<p>It seems that <code>paths</code> could be either an <code>Array</code> object or an object
of some other class. The author of the code needed to make sure
<code>paths</code> would be an array so he creates a single element array in the
case <code>paths</code> is not already an array.</p>

<p>While the above code works it's not something an experienced Rubyist
would write. The most popular alternative is the use of the mighty splat
operator(<code>*</code>):</p>

<p><code>ruby
[*paths].each { |path| do_something(path) }
</code></p>

<p>It case you're puzzled by the preceding snippet consider the following example:</p>

<p>``` ruby
elems = 1
[*elems]</p>

<h1>=> [1]</h1>

<p>elems = [1, 2, 3]
[*elems]</p>

<h1>= [1, 2, 3]</h1>

<p>```</p>

<p>Hope that makes clear what's going on.</p>

<p>While I'm extremely fond of this particular usage of <code>*</code> I tend to
avoid it, since there is another equally powerful, but more readable
alternative to it - <code>Kernel#Array</code>. Here's it in action:</p>

<p><code>ruby
Array(paths).each { |path| do_something(path) }
</code></p>

<p><code>Array</code> looks like the name of class, but it's not. It's a totally
normal method defined in the <code>Kernel</code> module. There is a whole family
of conversion methods similar to <code>Array</code> there - <code>Array</code>, <code>Complex</code>,
<code>Float</code>, <code>Hash</code>, <code>Integer</code>, <code>Rational</code> and <code>String</code>. They are all used
for often in practice and we'll probably revisit them in a separate
post somewhere down the road.</p>

<p>The <code>Array</code> method operates exactly like <code>*</code> - it takes a single argument and
converts it to an <code>Array</code> object if necessary:</p>

<p>``` ruby
Array(1)</p>

<h1>=> [1]</h1>

<p>Array([1, 2, 3])</p>

<h1>=> [1, 2, 3]</h1>

<p>```</p>

<p>You can also use <code>*</code> and <code>Array</code> to convert to array other data
composite data structures (like hashes and sets), but that's
irrelevant to today's discussion.</p>

<p>That's all I have for you today, mates. As usual I'm looking forward
to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
</feed>
